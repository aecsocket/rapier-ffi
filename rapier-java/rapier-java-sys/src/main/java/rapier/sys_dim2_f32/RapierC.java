// Generated by jextract

package rapier.sys_dim2_f32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class RapierC  {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_MINOR__ 37
     * }
     */
    public static int __GLIBC_MINOR__() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDLIB_H 1
     * }
     */
    public static int _STDLIB_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WNOHANG 1
     * }
     */
    public static int WNOHANG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WUNTRACED 2
     * }
     */
    public static int WUNTRACED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WSTOPPED 2
     * }
     */
    public static int WSTOPPED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WEXITED 4
     * }
     */
    public static int WEXITED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define WCONTINUED 8
     * }
     */
    public static int WCONTINUED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define WNOWAIT 16777216
     * }
     */
    public static int WNOWAIT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * #define __WNOTHREAD 536870912
     * }
     */
    public static int __WNOTHREAD() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * #define __WALL 1073741824
     * }
     */
    public static int __WALL() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define __W_CONTINUED 65535
     * }
     */
    public static int __W_CONTINUED() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define __WCOREFLAG 128
     * }
     */
    public static int __WCOREFLAG() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128 0
     * }
     */
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __ldiv_t_defined 1
     * }
     */
    public static int __ldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __lldiv_t_defined 1
     * }
     */
    public static int __lldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RAND_MAX 2147483647
     * }
     */
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define EXIT_FAILURE 1
     * }
     */
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EXIT_SUCCESS 0
     * }
     */
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _SYS_TYPES_H 1
     * }
     */
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clock_t_defined 1
     * }
     */
    public static int __clock_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clockid_t_defined 1
     * }
     */
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timer_t_defined 1
     * }
     */
    public static int __timer_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __BIT_TYPES_DEFINED__ 1
     * }
     */
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ENDIAN_H 1
     * }
     */
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_BYTESWAP_H 1
     * }
     */
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_UINTN_IDENTITY_H 1
     * }
     */
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_COMMON_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _THREAD_SHARED_TYPES_H 1
     * }
     */
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_ARCH_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEX_T 40
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_ATTR_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCK_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIER_T 32
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_COND_T 48
     * }
     */
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_CONDATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _THREAD_MUTEX_INTERNAL_H 1
     * }
     */
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_HAVE_PREV 1
     * }
     */
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __have_pthread_attr_t 1
     * }
     */
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ALLOCA_H 1
     * }
     */
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __u_char;
     * }
     */
    public static final OfByte __u_char = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __u_short;
     * }
     */
    public static final OfShort __u_short = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __u_int;
     * }
     */
    public static final OfInt __u_int = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __u_long;
     * }
     */
    public static final OfLong __u_long = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __int64_t;
     * }
     */
    public static final OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char __int_least8_t;
     * }
     */
    public static final OfByte __int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __uint_least8_t;
     * }
     */
    public static final OfByte __uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short __int_least16_t;
     * }
     */
    public static final OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __uint_least16_t;
     * }
     */
    public static final OfShort __uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __int_least32_t;
     * }
     */
    public static final OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uint_least32_t;
     * }
     */
    public static final OfInt __uint_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __int_least64_t;
     * }
     */
    public static final OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uint_least64_t;
     * }
     */
    public static final OfLong __uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __quad_t;
     * }
     */
    public static final OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __u_quad_t;
     * }
     */
    public static final OfLong __u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __intmax_t;
     * }
     */
    public static final OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uintmax_t;
     * }
     */
    public static final OfLong __uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __dev_t;
     * }
     */
    public static final OfLong __dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uid_t;
     * }
     */
    public static final OfInt __uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __gid_t;
     * }
     */
    public static final OfInt __gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __ino_t;
     * }
     */
    public static final OfLong __ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __ino64_t;
     * }
     */
    public static final OfLong __ino64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __mode_t;
     * }
     */
    public static final OfInt __mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __nlink_t;
     * }
     */
    public static final OfLong __nlink_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __off_t;
     * }
     */
    public static final OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __off64_t;
     * }
     */
    public static final OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __pid_t;
     * }
     */
    public static final OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __clock_t;
     * }
     */
    public static final OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __rlim_t;
     * }
     */
    public static final OfLong __rlim_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __rlim64_t;
     * }
     */
    public static final OfLong __rlim64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __id_t;
     * }
     */
    public static final OfInt __id_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __time_t;
     * }
     */
    public static final OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __useconds_t;
     * }
     */
    public static final OfInt __useconds_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __suseconds_t;
     * }
     */
    public static final OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __suseconds64_t;
     * }
     */
    public static final OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __daddr_t;
     * }
     */
    public static final OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __key_t;
     * }
     */
    public static final OfInt __key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __clockid_t;
     * }
     */
    public static final OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef void* __timer_t;
     * }
     */
    public static final OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blksize_t;
     * }
     */
    public static final OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blkcnt_t;
     * }
     */
    public static final OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blkcnt64_t;
     * }
     */
    public static final OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt_t;
     * }
     */
    public static final OfLong __fsblkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt64_t;
     * }
     */
    public static final OfLong __fsblkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt_t;
     * }
     */
    public static final OfLong __fsfilcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt64_t;
     * }
     */
    public static final OfLong __fsfilcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __fsword_t;
     * }
     */
    public static final OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __ssize_t;
     * }
     */
    public static final OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __syscall_slong_t;
     * }
     */
    public static final OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __syscall_ulong_t;
     * }
     */
    public static final OfLong __syscall_ulong_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __loff_t;
     * }
     */
    public static final OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef char* __caddr_t;
     * }
     */
    public static final OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long __intptr_t;
     * }
     */
    public static final OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __socklen_t;
     * }
     */
    public static final OfInt __socklen_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __sig_atomic_t;
     * }
     */
    public static final OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint64_t;
     * }
     */
    public static final OfLong uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast16_t;
     * }
     */
    public static final OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast32_t;
     * }
     */
    public static final OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast16_t;
     * }
     */
    public static final OfLong uint_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast32_t;
     * }
     */
    public static final OfLong uint_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef float _Float32;
     * }
     */
    public static final OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * typedef double _Float64;
     * }
     */
    public static final OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    /**
     * {@snippet :
     * typedef double _Float32x;
     * }
     */
    public static final OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    /**
     * {@snippet :
     * unsigned long __ctype_get_mb_cur_max();
     * }
     */
    public static long __ctype_get_mb_cur_max() {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atof$MH,"atof");
    }
    /**
     * {@snippet :
     * double atof(char* __nptr);
     * }
     */
    public static double atof(MemorySegment __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atoi$MH,"atoi");
    }
    /**
     * {@snippet :
     * int atoi(char* __nptr);
     * }
     */
    public static int atoi(MemorySegment __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atol$MH,"atol");
    }
    /**
     * {@snippet :
     * long atol(char* __nptr);
     * }
     */
    public static long atol(MemorySegment __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atoll$MH,"atoll");
    }
    /**
     * {@snippet :
     * long long atoll(char* __nptr);
     * }
     */
    public static long atoll(MemorySegment __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strtod$MH,"strtod");
    }
    /**
     * {@snippet :
     * double strtod(char* __nptr, char** __endptr);
     * }
     */
    public static double strtod(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtof$MH,"strtof");
    }
    /**
     * {@snippet :
     * float strtof(char* __nptr, char** __endptr);
     * }
     */
    public static float strtof(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtol$MH,"strtol");
    }
    /**
     * {@snippet :
     * long strtol(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtol(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoul$MH,"strtoul");
    }
    /**
     * {@snippet :
     * unsigned long strtoul(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoul(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoq$MH,"strtoq");
    }
    /**
     * {@snippet :
     * long long strtoq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtouq$MH,"strtouq");
    }
    /**
     * {@snippet :
     * unsigned long long strtouq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtouq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoll$MH,"strtoll");
    }
    /**
     * {@snippet :
     * long long strtoll(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoll(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strtoull$MH,"strtoull");
    }
    /**
     * {@snippet :
     * unsigned long long strtoull(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoull(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$2.l64a$MH,"l64a");
    }
    /**
     * {@snippet :
     * char* l64a(long __n);
     * }
     */
    public static MemorySegment l64a(long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$2.a64l$MH,"a64l");
    }
    /**
     * {@snippet :
     * long a64l(char* __s);
     * }
     */
    public static long a64l(MemorySegment __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfLong u_long = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long quad_t;
     * }
     */
    public static final OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_quad_t;
     * }
     */
    public static final OfLong u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long loff_t;
     * }
     */
    public static final OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ino_t;
     * }
     */
    public static final OfLong ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long dev_t;
     * }
     */
    public static final OfLong dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int mode_t;
     * }
     */
    public static final OfInt mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long nlink_t;
     * }
     */
    public static final OfLong nlink_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int id_t;
     * }
     */
    public static final OfInt id_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int daddr_t;
     * }
     */
    public static final OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef char* caddr_t;
     * }
     */
    public static final OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int key_t;
     * }
     */
    public static final OfInt key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long clock_t;
     * }
     */
    public static final OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int clockid_t;
     * }
     */
    public static final OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef void* timer_t;
     * }
     */
    public static final OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ulong;
     * }
     */
    public static final OfLong ulong = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short ushort;
     * }
     */
    public static final OfShort ushort = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint;
     * }
     */
    public static final OfInt uint = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long register_t;
     * }
     */
    public static final OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long suseconds_t;
     * }
     */
    public static final OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __fd_mask;
     * }
     */
    public static final OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long fd_mask;
     * }
     */
    public static final OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$2.select$MH,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, struct fd_set* __readfds, struct fd_set* __writefds, struct fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$2.pselect$MH,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int __nfds, struct fd_set* __readfds, struct fd_set* __writefds, struct fd_set* __exceptfds, struct timespec* __timeout, struct __sigset_t* __sigmask);
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long blksize_t;
     * }
     */
    public static final OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt_t;
     * }
     */
    public static final OfLong fsblkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt_t;
     * }
     */
    public static final OfLong fsfilcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __tss_t;
     * }
     */
    public static final OfInt __tss_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __thrd_t;
     * }
     */
    public static final OfLong __thrd_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long pthread_t;
     * }
     */
    public static final OfLong pthread_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int pthread_key_t;
     * }
     */
    public static final OfInt pthread_key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_once_t;
     * }
     */
    public static final OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_spinlock_t;
     * }
     */
    public static final OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$2.random$MH,"random");
    }
    /**
     * {@snippet :
     * long random();
     * }
     */
    public static long random() {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$3.srandom$MH,"srandom");
    }
    /**
     * {@snippet :
     * void srandom(unsigned int __seed);
     * }
     */
    public static void srandom(int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$3.initstate$MH,"initstate");
    }
    /**
     * {@snippet :
     * char* initstate(unsigned int __seed, char* __statebuf, unsigned long __statelen);
     * }
     */
    public static MemorySegment initstate(int __seed, MemorySegment __statebuf, long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$3.setstate$MH,"setstate");
    }
    /**
     * {@snippet :
     * char* setstate(char* __statebuf);
     * }
     */
    public static MemorySegment setstate(MemorySegment __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$3.random_r$MH,"random_r");
    }
    /**
     * {@snippet :
     * int random_r(struct random_data* __buf, int* __result);
     * }
     */
    public static int random_r(MemorySegment __buf, MemorySegment __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$3.srandom_r$MH,"srandom_r");
    }
    /**
     * {@snippet :
     * int srandom_r(unsigned int __seed, struct random_data* __buf);
     * }
     */
    public static int srandom_r(int __seed, MemorySegment __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$3.initstate_r$MH,"initstate_r");
    }
    /**
     * {@snippet :
     * int initstate_r(unsigned int __seed, char* __statebuf, unsigned long __statelen, struct random_data* __buf);
     * }
     */
    public static int initstate_r(int __seed, MemorySegment __statebuf, long __statelen, MemorySegment __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setstate_r$MH,"setstate_r");
    }
    /**
     * {@snippet :
     * int setstate_r(char* __statebuf, struct random_data* __buf);
     * }
     */
    public static int setstate_r(MemorySegment __statebuf, MemorySegment __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$4.rand$MH,"rand");
    }
    /**
     * {@snippet :
     * int rand();
     * }
     */
    public static int rand() {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$4.srand$MH,"srand");
    }
    /**
     * {@snippet :
     * void srand(unsigned int __seed);
     * }
     */
    public static void srand(int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.rand_r$MH,"rand_r");
    }
    /**
     * {@snippet :
     * int rand_r(unsigned int* __seed);
     * }
     */
    public static int rand_r(MemorySegment __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$4.drand48$MH,"drand48");
    }
    /**
     * {@snippet :
     * double drand48();
     * }
     */
    public static double drand48() {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$4.erand48$MH,"erand48");
    }
    /**
     * {@snippet :
     * double erand48(unsigned short __xsubi[3]);
     * }
     */
    public static double erand48(MemorySegment __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lrand48$MH,"lrand48");
    }
    /**
     * {@snippet :
     * long lrand48();
     * }
     */
    public static long lrand48() {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.nrand48$MH,"nrand48");
    }
    /**
     * {@snippet :
     * long nrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long nrand48(MemorySegment __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mrand48$MH,"mrand48");
    }
    /**
     * {@snippet :
     * long mrand48();
     * }
     */
    public static long mrand48() {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.jrand48$MH,"jrand48");
    }
    /**
     * {@snippet :
     * long jrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long jrand48(MemorySegment __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.srand48$MH,"srand48");
    }
    /**
     * {@snippet :
     * void srand48(long __seedval);
     * }
     */
    public static void srand48(long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.seed48$MH,"seed48");
    }
    /**
     * {@snippet :
     * unsigned short* seed48(unsigned short __seed16v[3]);
     * }
     */
    public static MemorySegment seed48(MemorySegment __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lcong48$MH,"lcong48");
    }
    /**
     * {@snippet :
     * void lcong48(unsigned short __param[7]);
     * }
     */
    public static void lcong48(MemorySegment __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.drand48_r$MH,"drand48_r");
    }
    /**
     * {@snippet :
     * int drand48_r(struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int drand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.erand48_r$MH,"erand48_r");
    }
    /**
     * {@snippet :
     * int erand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int erand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lrand48_r$MH,"lrand48_r");
    }
    /**
     * {@snippet :
     * int lrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int lrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.nrand48_r$MH,"nrand48_r");
    }
    /**
     * {@snippet :
     * int nrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int nrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mrand48_r$MH,"mrand48_r");
    }
    /**
     * {@snippet :
     * int mrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int mrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.jrand48_r$MH,"jrand48_r");
    }
    /**
     * {@snippet :
     * int jrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int jrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.srand48_r$MH,"srand48_r");
    }
    /**
     * {@snippet :
     * int srand48_r(long __seedval, struct drand48_data* __buffer);
     * }
     */
    public static int srand48_r(long __seedval, MemorySegment __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.seed48_r$MH,"seed48_r");
    }
    /**
     * {@snippet :
     * int seed48_r(unsigned short __seed16v[3], struct drand48_data* __buffer);
     * }
     */
    public static int seed48_r(MemorySegment __seed16v, MemorySegment __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lcong48_r$MH,"lcong48_r");
    }
    /**
     * {@snippet :
     * int lcong48_r(unsigned short __param[7], struct drand48_data* __buffer);
     * }
     */
    public static int lcong48_r(MemorySegment __param, MemorySegment __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random$MH() {
        return RuntimeHelper.requireNonNull(constants$7.arc4random$MH,"arc4random");
    }
    /**
     * {@snippet :
     * unsigned int arc4random();
     * }
     */
    public static int arc4random() {
        var mh$ = arc4random$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.arc4random_buf$MH,"arc4random_buf");
    }
    /**
     * {@snippet :
     * void arc4random_buf(void* __buf, unsigned long __size);
     * }
     */
    public static void arc4random_buf(MemorySegment __buf, long __size) {
        var mh$ = arc4random_buf$MH();
        try {
            mh$.invokeExact(__buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_uniform$MH() {
        return RuntimeHelper.requireNonNull(constants$8.arc4random_uniform$MH,"arc4random_uniform");
    }
    /**
     * {@snippet :
     * unsigned int arc4random_uniform(unsigned int __upper_bound);
     * }
     */
    public static int arc4random_uniform(int __upper_bound) {
        var mh$ = arc4random_uniform$MH();
        try {
            return (int)mh$.invokeExact(__upper_bound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.malloc$MH,"malloc");
    }
    /**
     * {@snippet :
     * void* malloc(unsigned long __size);
     * }
     */
    public static MemorySegment malloc(long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.calloc$MH,"calloc");
    }
    /**
     * {@snippet :
     * void* calloc(unsigned long __nmemb, unsigned long __size);
     * }
     */
    public static MemorySegment calloc(long __nmemb, long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.realloc$MH,"realloc");
    }
    /**
     * {@snippet :
     * void* realloc(void* __ptr, unsigned long __size);
     * }
     */
    public static MemorySegment realloc(MemorySegment __ptr, long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$8.free$MH,"free");
    }
    /**
     * {@snippet :
     * void free(void* __ptr);
     * }
     */
    public static void free(MemorySegment __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$8.reallocarray$MH,"reallocarray");
    }
    /**
     * {@snippet :
     * void* reallocarray(void* __ptr, unsigned long __nmemb, unsigned long __size);
     * }
     */
    public static MemorySegment reallocarray(MemorySegment __ptr, long __nmemb, long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$9.alloca$MH,"alloca");
    }
    /**
     * {@snippet :
     * void* alloca(unsigned long __size);
     * }
     */
    public static MemorySegment alloca(long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.valloc$MH,"valloc");
    }
    /**
     * {@snippet :
     * void* valloc(unsigned long __size);
     * }
     */
    public static MemorySegment valloc(long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$9.posix_memalign$MH,"posix_memalign");
    }
    /**
     * {@snippet :
     * int posix_memalign(void** __memptr, unsigned long __alignment, unsigned long __size);
     * }
     */
    public static int posix_memalign(MemorySegment __memptr, long __alignment, long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.aligned_alloc$MH,"aligned_alloc");
    }
    /**
     * {@snippet :
     * void* aligned_alloc(unsigned long __alignment, unsigned long __size);
     * }
     */
    public static MemorySegment aligned_alloc(long __alignment, long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$9.abort$MH,"abort");
    }
    /**
     * {@snippet :
     * void abort();
     * }
     */
    public static void abort() {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$10.atexit$MH,"atexit");
    }
    /**
     * {@snippet :
     * int atexit(void (*__func)());
     * }
     */
    public static int atexit(MemorySegment __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$10.at_quick_exit$MH,"at_quick_exit");
    }
    /**
     * {@snippet :
     * int at_quick_exit(void (*__func)());
     * }
     */
    public static int at_quick_exit(MemorySegment __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$11.on_exit$MH,"on_exit");
    }
    /**
     * {@snippet :
     * int on_exit(void (*__func)(int,void*), void* __arg);
     * }
     */
    public static int on_exit(MemorySegment __func, MemorySegment __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$11.exit$MH,"exit");
    }
    /**
     * {@snippet :
     * void exit(int __status);
     * }
     */
    public static void exit(int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$11.quick_exit$MH,"quick_exit");
    }
    /**
     * {@snippet :
     * void quick_exit(int __status);
     * }
     */
    public static void quick_exit(int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$11._Exit$MH,"_Exit");
    }
    /**
     * {@snippet :
     * void _Exit(int __status);
     * }
     */
    public static void _Exit(int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$11.getenv$MH,"getenv");
    }
    /**
     * {@snippet :
     * char* getenv(char* __name);
     * }
     */
    public static MemorySegment getenv(MemorySegment __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$12.putenv$MH,"putenv");
    }
    /**
     * {@snippet :
     * int putenv(char* __string);
     * }
     */
    public static int putenv(MemorySegment __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$12.setenv$MH,"setenv");
    }
    /**
     * {@snippet :
     * int setenv(char* __name, char* __value, int __replace);
     * }
     */
    public static int setenv(MemorySegment __name, MemorySegment __value, int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$12.unsetenv$MH,"unsetenv");
    }
    /**
     * {@snippet :
     * int unsetenv(char* __name);
     * }
     */
    public static int unsetenv(MemorySegment __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$12.clearenv$MH,"clearenv");
    }
    /**
     * {@snippet :
     * int clearenv();
     * }
     */
    public static int clearenv() {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mktemp$MH,"mktemp");
    }
    /**
     * {@snippet :
     * char* mktemp(char* __template);
     * }
     */
    public static MemorySegment mktemp(MemorySegment __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mkstemp$MH,"mkstemp");
    }
    /**
     * {@snippet :
     * int mkstemp(char* __template);
     * }
     */
    public static int mkstemp(MemorySegment __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mkstemps$MH,"mkstemps");
    }
    /**
     * {@snippet :
     * int mkstemps(char* __template, int __suffixlen);
     * }
     */
    public static int mkstemps(MemorySegment __template, int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mkdtemp$MH,"mkdtemp");
    }
    /**
     * {@snippet :
     * char* mkdtemp(char* __template);
     * }
     */
    public static MemorySegment mkdtemp(MemorySegment __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$13.system$MH,"system");
    }
    /**
     * {@snippet :
     * int system(char* __command);
     * }
     */
    public static int system(MemorySegment __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$13.realpath$MH,"realpath");
    }
    /**
     * {@snippet :
     * char* realpath(char* __name, char* __resolved);
     * }
     */
    public static MemorySegment realpath(MemorySegment __name, MemorySegment __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$14.bsearch$MH,"bsearch");
    }
    /**
     * {@snippet :
     * void* bsearch(void* __key, void* __base, unsigned long __nmemb, unsigned long __size, int (*__compar)(void*,void*));
     * }
     */
    public static MemorySegment bsearch(MemorySegment __key, MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$14.qsort$MH,"qsort");
    }
    /**
     * {@snippet :
     * void qsort(void* __base, unsigned long __nmemb, unsigned long __size, int (*__compar)(void*,void*));
     * }
     */
    public static void qsort(MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.abs$MH,"abs");
    }
    /**
     * {@snippet :
     * int abs(int __x);
     * }
     */
    public static int abs(int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.labs$MH,"labs");
    }
    /**
     * {@snippet :
     * long labs(long __x);
     * }
     */
    public static long labs(long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.llabs$MH,"llabs");
    }
    /**
     * {@snippet :
     * long long llabs(long long __x);
     * }
     */
    public static long llabs(long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$15.div$MH,"div");
    }
    /**
     * {@snippet :
     * struct div_t div(int __numer, int __denom);
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int __numer, int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ldiv$MH,"ldiv");
    }
    /**
     * {@snippet :
     * struct ldiv_t ldiv(long __numer, long __denom);
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.lldiv$MH,"lldiv");
    }
    /**
     * {@snippet :
     * struct lldiv_t lldiv(long long __numer, long long __denom);
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ecvt$MH,"ecvt");
    }
    /**
     * {@snippet :
     * char* ecvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment ecvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fcvt$MH,"fcvt");
    }
    /**
     * {@snippet :
     * char* fcvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment fcvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.gcvt$MH,"gcvt");
    }
    /**
     * {@snippet :
     * char* gcvt(double __value, int __ndigit, char* __buf);
     * }
     */
    public static MemorySegment gcvt(double __value, int __ndigit, MemorySegment __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ecvt_r$MH,"ecvt_r");
    }
    /**
     * {@snippet :
     * int ecvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, unsigned long __len);
     * }
     */
    public static int ecvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fcvt_r$MH,"fcvt_r");
    }
    /**
     * {@snippet :
     * int fcvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, unsigned long __len);
     * }
     */
    public static int fcvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$16.mblen$MH,"mblen");
    }
    /**
     * {@snippet :
     * int mblen(char* __s, unsigned long __n);
     * }
     */
    public static int mblen(MemorySegment __s, long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mbtowc$MH,"mbtowc");
    }
    /**
     * {@snippet :
     * int mbtowc(int* __pwc, char* __s, unsigned long __n);
     * }
     */
    public static int mbtowc(MemorySegment __pwc, MemorySegment __s, long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$17.wctomb$MH,"wctomb");
    }
    /**
     * {@snippet :
     * int wctomb(char* __s, int __wchar);
     * }
     */
    public static int wctomb(MemorySegment __s, int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mbstowcs$MH,"mbstowcs");
    }
    /**
     * {@snippet :
     * unsigned long mbstowcs(int* __pwcs, char* __s, unsigned long __n);
     * }
     */
    public static long mbstowcs(MemorySegment __pwcs, MemorySegment __s, long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.wcstombs$MH,"wcstombs");
    }
    /**
     * {@snippet :
     * unsigned long wcstombs(char* __s, int* __pwcs, unsigned long __n);
     * }
     */
    public static long wcstombs(MemorySegment __s, MemorySegment __pwcs, long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$17.rpmatch$MH,"rpmatch");
    }
    /**
     * {@snippet :
     * int rpmatch(char* __response);
     * }
     */
    public static int rpmatch(MemorySegment __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$17.getsubopt$MH,"getsubopt");
    }
    /**
     * {@snippet :
     * int getsubopt(char** __optionp, char** __tokens, char** __valuep);
     * }
     */
    public static int getsubopt(MemorySegment __optionp, MemorySegment __tokens, MemorySegment __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$18.getloadavg$MH,"getloadavg");
    }
    /**
     * {@snippet :
     * int getloadavg(double __loadavg[], int __nelem);
     * }
     */
    public static int getloadavg(MemorySegment __loadavg, int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef float Real;
     * }
     */
    public static final OfFloat Real = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * typedef float RprReal;
     * }
     */
    public static final OfFloat RprReal = Constants$root.C_FLOAT$LAYOUT;
    public static MethodHandle RprBroadPhase_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprBroadPhase_drop$MH,"RprBroadPhase_drop");
    }
    /**
     * {@snippet :
     * void RprBroadPhase_drop(struct RprBroadPhase* this_);
     * }
     */
    public static void RprBroadPhase_drop(MemorySegment this_) {
        var mh$ = RprBroadPhase_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprBroadPhase_new$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprBroadPhase_new$MH,"RprBroadPhase_new");
    }
    /**
     * {@snippet :
     * struct RprBroadPhase* RprBroadPhase_new();
     * }
     */
    public static MemorySegment RprBroadPhase_new() {
        var mh$ = RprBroadPhase_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCCDSolver_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprCCDSolver_drop$MH,"RprCCDSolver_drop");
    }
    /**
     * {@snippet :
     * void RprCCDSolver_drop(struct RprCCDSolver* this_);
     * }
     */
    public static void RprCCDSolver_drop(MemorySegment this_) {
        var mh$ = RprCCDSolver_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCCDSolver_new$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprCCDSolver_new$MH,"RprCCDSolver_new");
    }
    /**
     * {@snippet :
     * struct RprCCDSolver* RprCCDSolver_new();
     * }
     */
    public static MemorySegment RprCCDSolver_new() {
        var mh$ = RprCCDSolver_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_ball$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprColliderBuilder_ball$MH,"RprColliderBuilder_ball");
    }
    /**
     * {@snippet :
     * struct RprColliderBuilder* RprColliderBuilder_ball(float radius);
     * }
     */
    public static MemorySegment RprColliderBuilder_ball(float radius) {
        var mh$ = RprColliderBuilder_ball$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_build$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_build$MH,"RprColliderBuilder_build");
    }
    /**
     * {@snippet :
     * struct RprCollider* RprColliderBuilder_build(struct RprColliderBuilder* this_);
     * }
     */
    public static MemorySegment RprColliderBuilder_build(MemorySegment this_) {
        var mh$ = RprColliderBuilder_build$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_cuboid$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_cuboid$MH,"RprColliderBuilder_cuboid");
    }
    /**
     * {@snippet :
     * struct RprColliderBuilder* RprColliderBuilder_cuboid(float hx, float hy, float hz);
     * }
     */
    public static MemorySegment RprColliderBuilder_cuboid(float hx, float hy, float hz) {
        var mh$ = RprColliderBuilder_cuboid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hx, hy, hz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_drop$MH,"RprColliderBuilder_drop");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_drop(struct RprColliderBuilder* this_);
     * }
     */
    public static void RprColliderBuilder_drop(MemorySegment this_) {
        var mh$ = RprColliderBuilder_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_restitution$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_restitution$MH,"RprColliderBuilder_restitution");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_restitution(struct RprColliderBuilder* this_, float restitution);
     * }
     */
    public static void RprColliderBuilder_restitution(MemorySegment this_, float restitution) {
        var mh$ = RprColliderBuilder_restitution$MH();
        try {
            mh$.invokeExact(this_, restitution);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderSet_drop$MH,"RprColliderSet_drop");
    }
    /**
     * {@snippet :
     * void RprColliderSet_drop(struct RprColliderSet* this_);
     * }
     */
    public static void RprColliderSet_drop(MemorySegment this_) {
        var mh$ = RprColliderSet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_index$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderSet_index$MH,"RprColliderSet_index");
    }
    /**
     * {@snippet :
     * struct RprCollider* RprColliderSet_index(struct RprColliderSet* this_, struct RprColliderHandle index);
     * }
     */
    public static MemorySegment RprColliderSet_index(MemorySegment this_, MemorySegment index) {
        var mh$ = RprColliderSet_index$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_index_mut$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderSet_index_mut$MH,"RprColliderSet_index_mut");
    }
    /**
     * {@snippet :
     * struct RprCollider* RprColliderSet_index_mut(struct RprColliderSet* this_, struct RprColliderHandle index);
     * }
     */
    public static MemorySegment RprColliderSet_index_mut(MemorySegment this_, MemorySegment index) {
        var mh$ = RprColliderSet_index_mut$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderSet_insert$MH,"RprColliderSet_insert");
    }
    /**
     * {@snippet :
     * struct RprColliderHandle RprColliderSet_insert(struct RprColliderSet* this_, struct RprCollider* coll);
     * }
     */
    public static MemorySegment RprColliderSet_insert(SegmentAllocator allocator, MemorySegment this_, MemorySegment coll) {
        var mh$ = RprColliderSet_insert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, coll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_insert_with_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderSet_insert_with_parent$MH,"RprColliderSet_insert_with_parent");
    }
    /**
     * {@snippet :
     * struct RprColliderHandle RprColliderSet_insert_with_parent(struct RprColliderSet* this_, struct RprCollider* coll, struct RprRigidBodyHandle parent_handle, struct RprRigidBodySet* bodies);
     * }
     */
    public static MemorySegment RprColliderSet_insert_with_parent(SegmentAllocator allocator, MemorySegment this_, MemorySegment coll, MemorySegment parent_handle, MemorySegment bodies) {
        var mh$ = RprColliderSet_insert_with_parent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, coll, parent_handle, bodies);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderSet_new$MH,"RprColliderSet_new");
    }
    /**
     * {@snippet :
     * struct RprColliderSet* RprColliderSet_new();
     * }
     */
    public static MemorySegment RprColliderSet_new() {
        var mh$ = RprColliderSet_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprCollider_drop$MH,"RprCollider_drop");
    }
    /**
     * {@snippet :
     * void RprCollider_drop(struct RprCollider* this_);
     * }
     */
    public static void RprCollider_drop(MemorySegment this_) {
        var mh$ = RprCollider_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprImpulseJointSet_drop$MH,"RprImpulseJointSet_drop");
    }
    /**
     * {@snippet :
     * void RprImpulseJointSet_drop(struct RprImpulseJointSet* this_);
     * }
     */
    public static void RprImpulseJointSet_drop(MemorySegment this_) {
        var mh$ = RprImpulseJointSet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprImpulseJointSet_new$MH,"RprImpulseJointSet_new");
    }
    /**
     * {@snippet :
     * struct RprImpulseJointSet* RprImpulseJointSet_new();
     * }
     */
    public static MemorySegment RprImpulseJointSet_new() {
        var mh$ = RprImpulseJointSet_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIntegrationParameters_default$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprIntegrationParameters_default$MH,"RprIntegrationParameters_default");
    }
    /**
     * {@snippet :
     * struct RprIntegrationParameters* RprIntegrationParameters_default();
     * }
     */
    public static MemorySegment RprIntegrationParameters_default() {
        var mh$ = RprIntegrationParameters_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIntegrationParameters_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprIntegrationParameters_drop$MH,"RprIntegrationParameters_drop");
    }
    /**
     * {@snippet :
     * void RprIntegrationParameters_drop(struct RprIntegrationParameters* this_);
     * }
     */
    public static void RprIntegrationParameters_drop(MemorySegment this_) {
        var mh$ = RprIntegrationParameters_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIntegrationParameters_dt$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprIntegrationParameters_dt$MH,"RprIntegrationParameters_dt");
    }
    /**
     * {@snippet :
     * float* RprIntegrationParameters_dt(struct RprIntegrationParameters* this_);
     * }
     */
    public static MemorySegment RprIntegrationParameters_dt(MemorySegment this_) {
        var mh$ = RprIntegrationParameters_dt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIslandManager_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprIslandManager_drop$MH,"RprIslandManager_drop");
    }
    /**
     * {@snippet :
     * void RprIslandManager_drop(struct RprIslandManager* this_);
     * }
     */
    public static void RprIslandManager_drop(MemorySegment this_) {
        var mh$ = RprIslandManager_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIslandManager_new$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprIslandManager_new$MH,"RprIslandManager_new");
    }
    /**
     * {@snippet :
     * struct RprIslandManager* RprIslandManager_new();
     * }
     */
    public static MemorySegment RprIslandManager_new() {
        var mh$ = RprIslandManager_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprMultibodyJointSet_drop$MH,"RprMultibodyJointSet_drop");
    }
    /**
     * {@snippet :
     * void RprMultibodyJointSet_drop(struct RprMultibodyJointSet* this_);
     * }
     */
    public static void RprMultibodyJointSet_drop(MemorySegment this_) {
        var mh$ = RprMultibodyJointSet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprMultibodyJointSet_new$MH,"RprMultibodyJointSet_new");
    }
    /**
     * {@snippet :
     * struct RprMultibodyJointSet* RprMultibodyJointSet_new();
     * }
     */
    public static MemorySegment RprMultibodyJointSet_new() {
        var mh$ = RprMultibodyJointSet_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprNarrowPhase_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprNarrowPhase_drop$MH,"RprNarrowPhase_drop");
    }
    /**
     * {@snippet :
     * void RprNarrowPhase_drop(struct RprNarrowPhase* this_);
     * }
     */
    public static void RprNarrowPhase_drop(MemorySegment this_) {
        var mh$ = RprNarrowPhase_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprNarrowPhase_new$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprNarrowPhase_new$MH,"RprNarrowPhase_new");
    }
    /**
     * {@snippet :
     * struct RprNarrowPhase* RprNarrowPhase_new();
     * }
     */
    public static MemorySegment RprNarrowPhase_new() {
        var mh$ = RprNarrowPhase_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPhysicsPipeline_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprPhysicsPipeline_drop$MH,"RprPhysicsPipeline_drop");
    }
    /**
     * {@snippet :
     * void RprPhysicsPipeline_drop(struct RprPhysicsPipeline* this_);
     * }
     */
    public static void RprPhysicsPipeline_drop(MemorySegment this_) {
        var mh$ = RprPhysicsPipeline_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPhysicsPipeline_new$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprPhysicsPipeline_new$MH,"RprPhysicsPipeline_new");
    }
    /**
     * {@snippet :
     * struct RprPhysicsPipeline* RprPhysicsPipeline_new();
     * }
     */
    public static MemorySegment RprPhysicsPipeline_new() {
        var mh$ = RprPhysicsPipeline_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPhysicsPipeline_step$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprPhysicsPipeline_step$MH,"RprPhysicsPipeline_step");
    }
    /**
     * {@snippet :
     * void RprPhysicsPipeline_step(struct RprPhysicsPipeline* this_, float gravity[2], struct RprIntegrationParameters* integration_parameters, struct RprIslandManager* islands, struct RprBroadPhase* broad_phase, struct RprNarrowPhase* narrow_phase, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprImpulseJointSet* impulse_joints, struct RprMultibodyJointSet* multibody_joints, struct RprCCDSolver* ccd_solver, struct RprQueryPipeline* query_pipeline);
     * }
     */
    public static void RprPhysicsPipeline_step(MemorySegment this_, MemorySegment gravity, MemorySegment integration_parameters, MemorySegment islands, MemorySegment broad_phase, MemorySegment narrow_phase, MemorySegment bodies, MemorySegment colliders, MemorySegment impulse_joints, MemorySegment multibody_joints, MemorySegment ccd_solver, MemorySegment query_pipeline) {
        var mh$ = RprPhysicsPipeline_step$MH();
        try {
            mh$.invokeExact(this_, gravity, integration_parameters, islands, broad_phase, narrow_phase, bodies, colliders, impulse_joints, multibody_joints, ccd_solver, query_pipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprQueryPipeline_drop$MH,"RprQueryPipeline_drop");
    }
    /**
     * {@snippet :
     * void RprQueryPipeline_drop(struct RprQueryPipeline* this_);
     * }
     */
    public static void RprQueryPipeline_drop(MemorySegment this_) {
        var mh$ = RprQueryPipeline_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_new$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprQueryPipeline_new$MH,"RprQueryPipeline_new");
    }
    /**
     * {@snippet :
     * struct RprQueryPipeline* RprQueryPipeline_new();
     * }
     */
    public static MemorySegment RprQueryPipeline_new() {
        var mh$ = RprQueryPipeline_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_build$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprRigidBodyBuilder_build$MH,"RprRigidBodyBuilder_build");
    }
    /**
     * {@snippet :
     * struct RprRigidBody* RprRigidBodyBuilder_build(struct RprRigidBodyBuilder* this_);
     * }
     */
    public static MemorySegment RprRigidBodyBuilder_build(MemorySegment this_) {
        var mh$ = RprRigidBodyBuilder_build$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprRigidBodyBuilder_drop$MH,"RprRigidBodyBuilder_drop");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_drop(struct RprRigidBodyBuilder* this_);
     * }
     */
    public static void RprRigidBodyBuilder_drop(MemorySegment this_) {
        var mh$ = RprRigidBodyBuilder_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_dynamic$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprRigidBodyBuilder_dynamic$MH,"RprRigidBodyBuilder_dynamic");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyBuilder* RprRigidBodyBuilder_dynamic();
     * }
     */
    public static MemorySegment RprRigidBodyBuilder_dynamic() {
        var mh$ = RprRigidBodyBuilder_dynamic$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_fixed$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprRigidBodyBuilder_fixed$MH,"RprRigidBodyBuilder_fixed");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyBuilder* RprRigidBodyBuilder_fixed();
     * }
     */
    public static MemorySegment RprRigidBodyBuilder_fixed() {
        var mh$ = RprRigidBodyBuilder_fixed$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprRigidBodyBuilder_translation$MH,"RprRigidBodyBuilder_translation");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_translation(struct RprRigidBodyBuilder* this_, float translation[2]);
     * }
     */
    public static void RprRigidBodyBuilder_translation(MemorySegment this_, MemorySegment translation) {
        var mh$ = RprRigidBodyBuilder_translation$MH();
        try {
            mh$.invokeExact(this_, translation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprRigidBodySet_drop$MH,"RprRigidBodySet_drop");
    }
    /**
     * {@snippet :
     * void RprRigidBodySet_drop(struct RprRigidBodySet* this_);
     * }
     */
    public static void RprRigidBodySet_drop(MemorySegment this_) {
        var mh$ = RprRigidBodySet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_index$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprRigidBodySet_index$MH,"RprRigidBodySet_index");
    }
    /**
     * {@snippet :
     * struct RprRigidBody* RprRigidBodySet_index(struct RprRigidBodySet* this_, struct RprRigidBodyHandle index);
     * }
     */
    public static MemorySegment RprRigidBodySet_index(MemorySegment this_, MemorySegment index) {
        var mh$ = RprRigidBodySet_index$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_index_mut$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprRigidBodySet_index_mut$MH,"RprRigidBodySet_index_mut");
    }
    /**
     * {@snippet :
     * struct RprRigidBody* RprRigidBodySet_index_mut(struct RprRigidBodySet* this_, struct RprRigidBodyHandle index);
     * }
     */
    public static MemorySegment RprRigidBodySet_index_mut(MemorySegment this_, MemorySegment index) {
        var mh$ = RprRigidBodySet_index_mut$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprRigidBodySet_insert$MH,"RprRigidBodySet_insert");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyHandle RprRigidBodySet_insert(struct RprRigidBodySet* this_, struct RprRigidBody* rb);
     * }
     */
    public static MemorySegment RprRigidBodySet_insert(SegmentAllocator allocator, MemorySegment this_, MemorySegment rb) {
        var mh$ = RprRigidBodySet_insert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, rb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprRigidBodySet_new$MH,"RprRigidBodySet_new");
    }
    /**
     * {@snippet :
     * struct RprRigidBodySet* RprRigidBodySet_new();
     * }
     */
    public static MemorySegment RprRigidBodySet_new() {
        var mh$ = RprRigidBodySet_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprRigidBody_drop$MH,"RprRigidBody_drop");
    }
    /**
     * {@snippet :
     * void RprRigidBody_drop(struct RprRigidBody* this_);
     * }
     */
    public static void RprRigidBody_drop(MemorySegment this_) {
        var mh$ = RprRigidBody_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprRigidBody_translation$MH,"RprRigidBody_translation");
    }
    /**
     * {@snippet :
     * void RprRigidBody_translation(struct RprRigidBody* this_, float out[2]);
     * }
     */
    public static void RprRigidBody_translation(MemorySegment this_, MemorySegment out) {
        var mh$ = RprRigidBody_translation$MH();
        try {
            mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$25.NULL$ADDR;
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define __WCLONE 2147483648
     * }
     */
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    /**
     * {@snippet :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
}


