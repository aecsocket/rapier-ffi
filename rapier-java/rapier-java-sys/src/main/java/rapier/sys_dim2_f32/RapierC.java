// Generated by jextract

package rapier.sys_dim2_f32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class RapierC  {

    /* package-private */ RapierC() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    public static int true_() {
        return (int)1L;
    }
    public static int false_() {
        return (int)0L;
    }
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    public static int _STDINT_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)37L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    public static int _STDLIB_H() {
        return (int)1L;
    }
    public static int WNOHANG() {
        return (int)1L;
    }
    public static int WUNTRACED() {
        return (int)2L;
    }
    public static int WSTOPPED() {
        return (int)2L;
    }
    public static int WEXITED() {
        return (int)4L;
    }
    public static int WCONTINUED() {
        return (int)8L;
    }
    public static int WNOWAIT() {
        return (int)16777216L;
    }
    public static int __WNOTHREAD() {
        return (int)536870912L;
    }
    public static int __WALL() {
        return (int)1073741824L;
    }
    public static int __W_CONTINUED() {
        return (int)65535L;
    }
    public static int __WCOREFLAG() {
        return (int)128L;
    }
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    public static int __ldiv_t_defined() {
        return (int)1L;
    }
    public static int __lldiv_t_defined() {
        return (int)1L;
    }
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    public static int __clock_t_defined() {
        return (int)1L;
    }
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    public static int __timeval_defined() {
        return (int)1L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    public static int RprJointAxesMask_ANG_X() {
        return (int)4L;
    }
    public static int RprJointAxesMask_FREE_FIXED_AXES() {
        return (int)0L;
    }
    public static int RprJointAxesMask_X() {
        return (int)1L;
    }
    public static int RprJointAxesMask_Y() {
        return (int)2L;
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    public static long __ctype_get_mb_cur_max () {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atof$MH,"atof");
    }
    public static double atof ( Addressable __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atol$MH,"atol");
    }
    public static long atol ( Addressable __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtol$MH,"strtol");
    }
    public static long strtol ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoul$MH,"strtoul");
    }
    public static long strtoul ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoq$MH,"strtoq");
    }
    public static long strtoq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtouq$MH,"strtouq");
    }
    public static long strtouq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$2.l64a$MH,"l64a");
    }
    public static MemoryAddress l64a ( long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$2.a64l$MH,"a64l");
    }
    public static long a64l ( Addressable __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = __bswap_16$MH();
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = __bswap_32$MH();
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = __bswap_64$MH();
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = __uint16_identity$MH();
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = __uint32_identity$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = __uint64_identity$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$3.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$3.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$3.random$MH,"random");
    }
    public static long random () {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$4.srandom$MH,"srandom");
    }
    public static void srandom ( int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$4.initstate$MH,"initstate");
    }
    public static MemoryAddress initstate ( int __seed,  Addressable __statebuf,  long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setstate$MH,"setstate");
    }
    public static MemoryAddress setstate ( Addressable __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.random_r$MH,"random_r");
    }
    public static int random_r ( Addressable __buf,  Addressable __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.srandom_r$MH,"srandom_r");
    }
    public static int srandom_r ( int __seed,  Addressable __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.initstate_r$MH,"initstate_r");
    }
    public static int initstate_r ( int __seed,  Addressable __statebuf,  long __statelen,  Addressable __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$5.setstate_r$MH,"setstate_r");
    }
    public static int setstate_r ( Addressable __statebuf,  Addressable __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$5.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$5.srand$MH,"srand");
    }
    public static void srand ( int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$5.rand_r$MH,"rand_r");
    }
    public static int rand_r ( Addressable __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.drand48$MH,"drand48");
    }
    public static double drand48 () {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.erand48$MH,"erand48");
    }
    public static double erand48 ( Addressable __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lrand48$MH,"lrand48");
    }
    public static long lrand48 () {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$6.nrand48$MH,"nrand48");
    }
    public static long nrand48 ( Addressable __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mrand48$MH,"mrand48");
    }
    public static long mrand48 () {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$6.jrand48$MH,"jrand48");
    }
    public static long jrand48 ( Addressable __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$6.srand48$MH,"srand48");
    }
    public static void srand48 ( long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$6.seed48$MH,"seed48");
    }
    public static MemoryAddress seed48 ( Addressable __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lcong48$MH,"lcong48");
    }
    public static void lcong48 ( Addressable __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.drand48_r$MH,"drand48_r");
    }
    public static int drand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.erand48_r$MH,"erand48_r");
    }
    public static int erand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lrand48_r$MH,"lrand48_r");
    }
    public static int lrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.nrand48_r$MH,"nrand48_r");
    }
    public static int nrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.mrand48_r$MH,"mrand48_r");
    }
    public static int mrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$8.jrand48_r$MH,"jrand48_r");
    }
    public static int jrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$8.srand48_r$MH,"srand48_r");
    }
    public static int srand48_r ( long __seedval,  Addressable __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$8.seed48_r$MH,"seed48_r");
    }
    public static int seed48_r ( Addressable __seed16v,  Addressable __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$8.lcong48_r$MH,"lcong48_r");
    }
    public static int lcong48_r ( Addressable __param,  Addressable __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random$MH() {
        return RuntimeHelper.requireNonNull(constants$8.arc4random$MH,"arc4random");
    }
    public static int arc4random () {
        var mh$ = arc4random$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.arc4random_buf$MH,"arc4random_buf");
    }
    public static void arc4random_buf ( Addressable __buf,  long __size) {
        var mh$ = arc4random_buf$MH();
        try {
            mh$.invokeExact(__buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_uniform$MH() {
        return RuntimeHelper.requireNonNull(constants$9.arc4random_uniform$MH,"arc4random_uniform");
    }
    public static int arc4random_uniform ( int __upper_bound) {
        var mh$ = arc4random_uniform$MH();
        try {
            return (int)mh$.invokeExact(__upper_bound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long __nmemb,  long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable __ptr,  long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$9.free$MH,"free");
    }
    public static void free ( Addressable __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$9.reallocarray$MH,"reallocarray");
    }
    public static MemoryAddress reallocarray ( Addressable __ptr,  long __nmemb,  long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$10.alloca$MH,"alloca");
    }
    public static MemoryAddress alloca ( long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$10.posix_memalign$MH,"posix_memalign");
    }
    public static int posix_memalign ( Addressable __memptr,  long __alignment,  long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.aligned_alloc$MH,"aligned_alloc");
    }
    public static MemoryAddress aligned_alloc ( long __alignment,  long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$10.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$11.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$11.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$12.on_exit$MH,"on_exit");
    }
    public static int on_exit ( Addressable __func,  Addressable __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$12.exit$MH,"exit");
    }
    public static void exit ( int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$12.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$12._Exit$MH,"_Exit");
    }
    public static void _Exit ( int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$12.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$13.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$13.setenv$MH,"setenv");
    }
    public static int setenv ( Addressable __name,  Addressable __value,  int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$13.unsetenv$MH,"unsetenv");
    }
    public static int unsetenv ( Addressable __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$13.clearenv$MH,"clearenv");
    }
    public static int clearenv () {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mkstemps$MH,"mkstemps");
    }
    public static int mkstemps ( Addressable __template,  int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mkdtemp$MH,"mkdtemp");
    }
    public static MemoryAddress mkdtemp ( Addressable __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$14.system$MH,"system");
    }
    public static int system ( Addressable __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$14.realpath$MH,"realpath");
    }
    public static MemoryAddress realpath ( Addressable __name,  Addressable __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$15.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable __key,  Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$15.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.abs$MH,"abs");
    }
    public static int abs ( int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.labs$MH,"labs");
    }
    public static long labs ( long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.llabs$MH,"llabs");
    }
    public static long llabs ( long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$15.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int __numer,  int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double __value,  int __ndigit,  Addressable __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ecvt_r$MH,"ecvt_r");
    }
    public static int ecvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fcvt_r$MH,"fcvt_r");
    }
    public static int fcvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable __s,  long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable __pwc,  Addressable __s,  long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$17.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable __s,  int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable __pwcs,  Addressable __s,  long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable __s,  Addressable __pwcs,  long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$18.rpmatch$MH,"rpmatch");
    }
    public static int rpmatch ( Addressable __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$18.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable __optionp,  Addressable __tokens,  Addressable __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$18.getloadavg$MH,"getloadavg");
    }
    public static int getloadavg ( Addressable __loadavg,  int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfFloat Real = Constants$root.C_FLOAT$LAYOUT;
    public static int Average() {
        return (int)0L;
    }
    public static int Min() {
        return (int)1L;
    }
    public static int Multiply() {
        return (int)2L;
    }
    public static int Max() {
        return (int)3L;
    }
    public static int X() {
        return (int)0L;
    }
    public static int Y() {
        return (int)1L;
    }
    public static int AngX() {
        return (int)2L;
    }
    public static int AccelerationBased() {
        return (int)0L;
    }
    public static int ForceBased() {
        return (int)1L;
    }
    public static int Dynamic() {
        return (int)0L;
    }
    public static int Fixed() {
        return (int)1L;
    }
    public static int KinematicPositionBased() {
        return (int)2L;
    }
    public static int KinematicVelocityBased() {
        return (int)3L;
    }
    public static MethodHandle RprArenaKey_invalid$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprArenaKey_invalid$MH,"RprArenaKey_invalid");
    }
    public static MemorySegment RprArenaKey_invalid ( SegmentAllocator allocator) {
        var mh$ = RprArenaKey_invalid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprBroadPhase_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprBroadPhase_drop$MH,"RprBroadPhase_drop");
    }
    public static void RprBroadPhase_drop ( Addressable this_) {
        var mh$ = RprBroadPhase_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprBroadPhase_new$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprBroadPhase_new$MH,"RprBroadPhase_new");
    }
    public static MemoryAddress RprBroadPhase_new () {
        var mh$ = RprBroadPhase_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCCDSolver_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprCCDSolver_drop$MH,"RprCCDSolver_drop");
    }
    public static void RprCCDSolver_drop ( Addressable this_) {
        var mh$ = RprCCDSolver_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCCDSolver_new$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprCCDSolver_new$MH,"RprCCDSolver_new");
    }
    public static MemoryAddress RprCCDSolver_new () {
        var mh$ = RprCCDSolver_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_build$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_build$MH,"RprColliderBuilder_build");
    }
    public static MemoryAddress RprColliderBuilder_build ( Addressable this_) {
        var mh$ = RprColliderBuilder_build$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_contact_force_event_threshold$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_contact_force_event_threshold$MH,"RprColliderBuilder_contact_force_event_threshold");
    }
    public static void RprColliderBuilder_contact_force_event_threshold ( Addressable this_,  float threshold) {
        var mh$ = RprColliderBuilder_contact_force_event_threshold$MH();
        try {
            mh$.invokeExact(this_, threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_density$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_density$MH,"RprColliderBuilder_density");
    }
    public static void RprColliderBuilder_density ( Addressable this_,  float density) {
        var mh$ = RprColliderBuilder_density$MH();
        try {
            mh$.invokeExact(this_, density);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_drop$MH,"RprColliderBuilder_drop");
    }
    public static void RprColliderBuilder_drop ( Addressable this_) {
        var mh$ = RprColliderBuilder_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_enabled$MH,"RprColliderBuilder_enabled");
    }
    public static void RprColliderBuilder_enabled ( Addressable this_,  boolean enabled) {
        var mh$ = RprColliderBuilder_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_friction$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_friction$MH,"RprColliderBuilder_friction");
    }
    public static void RprColliderBuilder_friction ( Addressable this_,  float friction) {
        var mh$ = RprColliderBuilder_friction$MH();
        try {
            mh$.invokeExact(this_, friction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_friction_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_friction_combine_rule$MH,"RprColliderBuilder_friction_combine_rule");
    }
    public static void RprColliderBuilder_friction_combine_rule ( Addressable this_,  int rule) {
        var mh$ = RprColliderBuilder_friction_combine_rule$MH();
        try {
            mh$.invokeExact(this_, rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_mass$MH,"RprColliderBuilder_mass");
    }
    public static void RprColliderBuilder_mass ( Addressable this_,  float mass) {
        var mh$ = RprColliderBuilder_mass$MH();
        try {
            mh$.invokeExact(this_, mass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_new$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_new$MH,"RprColliderBuilder_new");
    }
    public static MemoryAddress RprColliderBuilder_new ( Addressable shape) {
        var mh$ = RprColliderBuilder_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_position$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_position$MH,"RprColliderBuilder_position");
    }
    public static void RprColliderBuilder_position ( Addressable this_,  MemorySegment position) {
        var mh$ = RprColliderBuilder_position$MH();
        try {
            mh$.invokeExact(this_, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_restitution$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderBuilder_restitution$MH,"RprColliderBuilder_restitution");
    }
    public static void RprColliderBuilder_restitution ( Addressable this_,  float restitution) {
        var mh$ = RprColliderBuilder_restitution$MH();
        try {
            mh$.invokeExact(this_, restitution);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_restitution_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderBuilder_restitution_combine_rule$MH,"RprColliderBuilder_restitution_combine_rule");
    }
    public static void RprColliderBuilder_restitution_combine_rule ( Addressable this_,  int rule) {
        var mh$ = RprColliderBuilder_restitution_combine_rule$MH();
        try {
            mh$.invokeExact(this_, rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderBuilder_rotation$MH,"RprColliderBuilder_rotation");
    }
    public static void RprColliderBuilder_rotation ( Addressable this_,  MemorySegment rotation) {
        var mh$ = RprColliderBuilder_rotation$MH();
        try {
            mh$.invokeExact(this_, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_sensor$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderBuilder_sensor$MH,"RprColliderBuilder_sensor");
    }
    public static void RprColliderBuilder_sensor ( Addressable this_,  boolean sensor) {
        var mh$ = RprColliderBuilder_sensor$MH();
        try {
            mh$.invokeExact(this_, sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderBuilder_translation$MH,"RprColliderBuilder_translation");
    }
    public static void RprColliderBuilder_translation ( Addressable this_,  MemorySegment translation) {
        var mh$ = RprColliderBuilder_translation$MH();
        try {
            mh$.invokeExact(this_, translation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderSet_contains$MH,"RprColliderSet_contains");
    }
    public static boolean RprColliderSet_contains ( Addressable this_,  MemorySegment handle) {
        var mh$ = RprColliderSet_contains$MH();
        try {
            return (boolean)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderSet_drop$MH,"RprColliderSet_drop");
    }
    public static void RprColliderSet_drop ( Addressable this_) {
        var mh$ = RprColliderSet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_get$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderSet_get$MH,"RprColliderSet_get");
    }
    public static MemoryAddress RprColliderSet_get ( Addressable this_,  MemorySegment handle) {
        var mh$ = RprColliderSet_get$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_get_mut$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderSet_get_mut$MH,"RprColliderSet_get_mut");
    }
    public static MemoryAddress RprColliderSet_get_mut ( Addressable this_,  MemorySegment handle) {
        var mh$ = RprColliderSet_get_mut$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderSet_insert$MH,"RprColliderSet_insert");
    }
    public static MemorySegment RprColliderSet_insert ( SegmentAllocator allocator,  Addressable this_,  Addressable coll) {
        var mh$ = RprColliderSet_insert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, coll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_insert_with_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderSet_insert_with_parent$MH,"RprColliderSet_insert_with_parent");
    }
    public static MemorySegment RprColliderSet_insert_with_parent ( SegmentAllocator allocator,  Addressable this_,  Addressable coll,  MemorySegment parent_handle,  Addressable bodies) {
        var mh$ = RprColliderSet_insert_with_parent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, coll, parent_handle, bodies);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderSet_is_empty$MH,"RprColliderSet_is_empty");
    }
    public static boolean RprColliderSet_is_empty ( Addressable this_) {
        var mh$ = RprColliderSet_is_empty$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_len$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprColliderSet_len$MH,"RprColliderSet_len");
    }
    public static long RprColliderSet_len ( Addressable this_) {
        var mh$ = RprColliderSet_len$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprColliderSet_new$MH,"RprColliderSet_new");
    }
    public static MemoryAddress RprColliderSet_new () {
        var mh$ = RprColliderSet_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprColliderSet_remove$MH,"RprColliderSet_remove");
    }
    public static MemoryAddress RprColliderSet_remove ( Addressable this_,  MemorySegment handle,  Addressable islands,  Addressable bodies,  boolean wake_up) {
        var mh$ = RprColliderSet_remove$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_, handle, islands, bodies, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_set_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprColliderSet_set_parent$MH,"RprColliderSet_set_parent");
    }
    public static void RprColliderSet_set_parent ( Addressable this_,  MemorySegment handle,  MemorySegment new_parent_handle,  Addressable bodies) {
        var mh$ = RprColliderSet_set_parent$MH();
        try {
            mh$.invokeExact(this_, handle, new_parent_handle, bodies);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_compute_aabb$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprCollider_compute_aabb$MH,"RprCollider_compute_aabb");
    }
    public static MemorySegment RprCollider_compute_aabb ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprCollider_compute_aabb$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_compute_swept_aabb$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprCollider_compute_swept_aabb$MH,"RprCollider_compute_swept_aabb");
    }
    public static MemorySegment RprCollider_compute_swept_aabb ( SegmentAllocator allocator,  Addressable this_,  MemorySegment next_position) {
        var mh$ = RprCollider_compute_swept_aabb$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, next_position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_contact_force_event_threshold$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprCollider_contact_force_event_threshold$MH,"RprCollider_contact_force_event_threshold");
    }
    public static float RprCollider_contact_force_event_threshold ( Addressable this_) {
        var mh$ = RprCollider_contact_force_event_threshold$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_density$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprCollider_density$MH,"RprCollider_density");
    }
    public static float RprCollider_density ( Addressable this_) {
        var mh$ = RprCollider_density$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprCollider_drop$MH,"RprCollider_drop");
    }
    public static void RprCollider_drop ( Addressable this_) {
        var mh$ = RprCollider_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_friction$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprCollider_friction$MH,"RprCollider_friction");
    }
    public static float RprCollider_friction ( Addressable this_) {
        var mh$ = RprCollider_friction$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_friction_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprCollider_friction_combine_rule$MH,"RprCollider_friction_combine_rule");
    }
    public static int RprCollider_friction_combine_rule ( Addressable this_) {
        var mh$ = RprCollider_friction_combine_rule$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_is_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprCollider_is_enabled$MH,"RprCollider_is_enabled");
    }
    public static boolean RprCollider_is_enabled ( Addressable this_) {
        var mh$ = RprCollider_is_enabled$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_is_sensor$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprCollider_is_sensor$MH,"RprCollider_is_sensor");
    }
    public static boolean RprCollider_is_sensor ( Addressable this_) {
        var mh$ = RprCollider_is_sensor$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprCollider_mass$MH,"RprCollider_mass");
    }
    public static float RprCollider_mass ( Addressable this_) {
        var mh$ = RprCollider_mass$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprCollider_parent$MH,"RprCollider_parent");
    }
    public static MemorySegment RprCollider_parent ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprCollider_parent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_position$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprCollider_position$MH,"RprCollider_position");
    }
    public static MemorySegment RprCollider_position ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprCollider_position$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_position_wrt_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprCollider_position_wrt_parent$MH,"RprCollider_position_wrt_parent");
    }
    public static MemorySegment RprCollider_position_wrt_parent ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprCollider_position_wrt_parent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_restitution$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprCollider_restitution$MH,"RprCollider_restitution");
    }
    public static float RprCollider_restitution ( Addressable this_) {
        var mh$ = RprCollider_restitution$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_restitution_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_restitution_combine_rule$MH,"RprCollider_restitution_combine_rule");
    }
    public static int RprCollider_restitution_combine_rule ( Addressable this_) {
        var mh$ = RprCollider_restitution_combine_rule$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_rotation$MH,"RprCollider_rotation");
    }
    public static MemorySegment RprCollider_rotation ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprCollider_rotation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_contact_force_event_threshold$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_set_contact_force_event_threshold$MH,"RprCollider_set_contact_force_event_threshold");
    }
    public static void RprCollider_set_contact_force_event_threshold ( Addressable this_,  float threshold) {
        var mh$ = RprCollider_set_contact_force_event_threshold$MH();
        try {
            mh$.invokeExact(this_, threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_density$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_set_density$MH,"RprCollider_set_density");
    }
    public static void RprCollider_set_density ( Addressable this_,  float density) {
        var mh$ = RprCollider_set_density$MH();
        try {
            mh$.invokeExact(this_, density);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_set_enabled$MH,"RprCollider_set_enabled");
    }
    public static void RprCollider_set_enabled ( Addressable this_,  boolean enabled) {
        var mh$ = RprCollider_set_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_friction$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_set_friction$MH,"RprCollider_set_friction");
    }
    public static void RprCollider_set_friction ( Addressable this_,  float coefficient) {
        var mh$ = RprCollider_set_friction$MH();
        try {
            mh$.invokeExact(this_, coefficient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_friction_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_set_friction_combine_rule$MH,"RprCollider_set_friction_combine_rule");
    }
    public static void RprCollider_set_friction_combine_rule ( Addressable this_,  int rule) {
        var mh$ = RprCollider_set_friction_combine_rule$MH();
        try {
            mh$.invokeExact(this_, rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_set_mass$MH,"RprCollider_set_mass");
    }
    public static void RprCollider_set_mass ( Addressable this_,  float mass) {
        var mh$ = RprCollider_set_mass$MH();
        try {
            mh$.invokeExact(this_, mass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_position$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_set_position$MH,"RprCollider_set_position");
    }
    public static void RprCollider_set_position ( Addressable this_,  MemorySegment position) {
        var mh$ = RprCollider_set_position$MH();
        try {
            mh$.invokeExact(this_, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_position_wrt_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_set_position_wrt_parent$MH,"RprCollider_set_position_wrt_parent");
    }
    public static void RprCollider_set_position_wrt_parent ( Addressable this_,  MemorySegment pos_wrt_parent) {
        var mh$ = RprCollider_set_position_wrt_parent$MH();
        try {
            mh$.invokeExact(this_, pos_wrt_parent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_restitution$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_set_restitution$MH,"RprCollider_set_restitution");
    }
    public static void RprCollider_set_restitution ( Addressable this_,  float coefficient) {
        var mh$ = RprCollider_set_restitution$MH();
        try {
            mh$.invokeExact(this_, coefficient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_restitution_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_set_restitution_combine_rule$MH,"RprCollider_set_restitution_combine_rule");
    }
    public static void RprCollider_set_restitution_combine_rule ( Addressable this_,  int rule) {
        var mh$ = RprCollider_set_restitution_combine_rule$MH();
        try {
            mh$.invokeExact(this_, rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_set_rotation$MH,"RprCollider_set_rotation");
    }
    public static void RprCollider_set_rotation ( Addressable this_,  MemorySegment rotation) {
        var mh$ = RprCollider_set_rotation$MH();
        try {
            mh$.invokeExact(this_, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_rotation_wrt_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_set_rotation_wrt_parent$MH,"RprCollider_set_rotation_wrt_parent");
    }
    public static void RprCollider_set_rotation_wrt_parent ( Addressable this_,  MemorySegment rotation) {
        var mh$ = RprCollider_set_rotation_wrt_parent$MH();
        try {
            mh$.invokeExact(this_, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_sensor$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_set_sensor$MH,"RprCollider_set_sensor");
    }
    public static void RprCollider_set_sensor ( Addressable this_,  boolean is_sensor) {
        var mh$ = RprCollider_set_sensor$MH();
        try {
            mh$.invokeExact(this_, is_sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_set_shape$MH,"RprCollider_set_shape");
    }
    public static void RprCollider_set_shape ( Addressable this_,  Addressable shape) {
        var mh$ = RprCollider_set_shape$MH();
        try {
            mh$.invokeExact(this_, shape);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_set_translation$MH,"RprCollider_set_translation");
    }
    public static void RprCollider_set_translation ( Addressable this_,  MemorySegment translation) {
        var mh$ = RprCollider_set_translation$MH();
        try {
            mh$.invokeExact(this_, translation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_translation_wrt_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_set_translation_wrt_parent$MH,"RprCollider_set_translation_wrt_parent");
    }
    public static void RprCollider_set_translation_wrt_parent ( Addressable this_,  MemorySegment translation) {
        var mh$ = RprCollider_set_translation_wrt_parent$MH();
        try {
            mh$.invokeExact(this_, translation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprCollider_shape$MH,"RprCollider_shape");
    }
    public static MemoryAddress RprCollider_shape ( Addressable this_) {
        var mh$ = RprCollider_shape$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprCollider_translation$MH,"RprCollider_translation");
    }
    public static MemorySegment RprCollider_translation ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprCollider_translation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_volume$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprCollider_volume$MH,"RprCollider_volume");
    }
    public static float RprCollider_volume ( Addressable this_) {
        var mh$ = RprCollider_volume$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_contacts_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprGenericJoint_contacts_enabled$MH,"RprGenericJoint_contacts_enabled");
    }
    public static boolean RprGenericJoint_contacts_enabled ( Addressable this_) {
        var mh$ = RprGenericJoint_contacts_enabled$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprGenericJoint_drop$MH,"RprGenericJoint_drop");
    }
    public static void RprGenericJoint_drop ( Addressable this_) {
        var mh$ = RprGenericJoint_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_is_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprGenericJoint_is_enabled$MH,"RprGenericJoint_is_enabled");
    }
    public static boolean RprGenericJoint_is_enabled ( Addressable this_) {
        var mh$ = RprGenericJoint_is_enabled$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_limits$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprGenericJoint_limits$MH,"RprGenericJoint_limits");
    }
    public static boolean RprGenericJoint_limits ( Addressable this_,  int axis,  Addressable out) {
        var mh$ = RprGenericJoint_limits$MH();
        try {
            return (boolean)mh$.invokeExact(this_, axis, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_local_anchor1$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprGenericJoint_local_anchor1$MH,"RprGenericJoint_local_anchor1");
    }
    public static MemorySegment RprGenericJoint_local_anchor1 ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprGenericJoint_local_anchor1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_local_anchor2$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprGenericJoint_local_anchor2$MH,"RprGenericJoint_local_anchor2");
    }
    public static MemorySegment RprGenericJoint_local_anchor2 ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprGenericJoint_local_anchor2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_local_axis1$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprGenericJoint_local_axis1$MH,"RprGenericJoint_local_axis1");
    }
    public static MemorySegment RprGenericJoint_local_axis1 ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprGenericJoint_local_axis1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_local_axis2$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprGenericJoint_local_axis2$MH,"RprGenericJoint_local_axis2");
    }
    public static MemorySegment RprGenericJoint_local_axis2 ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprGenericJoint_local_axis2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_lock_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprGenericJoint_lock_axes$MH,"RprGenericJoint_lock_axes");
    }
    public static void RprGenericJoint_lock_axes ( Addressable this_,  byte axes) {
        var mh$ = RprGenericJoint_lock_axes$MH();
        try {
            mh$.invokeExact(this_, axes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_locked_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprGenericJoint_locked_axes$MH,"RprGenericJoint_locked_axes");
    }
    public static byte RprGenericJoint_locked_axes ( Addressable this_) {
        var mh$ = RprGenericJoint_locked_axes$MH();
        try {
            return (byte)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_motor$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprGenericJoint_motor$MH,"RprGenericJoint_motor");
    }
    public static boolean RprGenericJoint_motor ( Addressable this_,  int axis,  Addressable out) {
        var mh$ = RprGenericJoint_motor$MH();
        try {
            return (boolean)mh$.invokeExact(this_, axis, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_motor_model$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprGenericJoint_motor_model$MH,"RprGenericJoint_motor_model");
    }
    public static boolean RprGenericJoint_motor_model ( Addressable this_,  int axis,  Addressable out) {
        var mh$ = RprGenericJoint_motor_model$MH();
        try {
            return (boolean)mh$.invokeExact(this_, axis, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_new$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprGenericJoint_new$MH,"RprGenericJoint_new");
    }
    public static MemoryAddress RprGenericJoint_new ( byte locked_axes) {
        var mh$ = RprGenericJoint_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(locked_axes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_contacts_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprGenericJoint_set_contacts_enabled$MH,"RprGenericJoint_set_contacts_enabled");
    }
    public static void RprGenericJoint_set_contacts_enabled ( Addressable this_,  boolean enabled) {
        var mh$ = RprGenericJoint_set_contacts_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprGenericJoint_set_enabled$MH,"RprGenericJoint_set_enabled");
    }
    public static void RprGenericJoint_set_enabled ( Addressable this_,  boolean enabled) {
        var mh$ = RprGenericJoint_set_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_limits$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprGenericJoint_set_limits$MH,"RprGenericJoint_set_limits");
    }
    public static void RprGenericJoint_set_limits ( Addressable this_,  int axis,  Addressable limits) {
        var mh$ = RprGenericJoint_set_limits$MH();
        try {
            mh$.invokeExact(this_, axis, limits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_anchor1$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprGenericJoint_set_local_anchor1$MH,"RprGenericJoint_set_local_anchor1");
    }
    public static void RprGenericJoint_set_local_anchor1 ( Addressable this_,  MemorySegment local_anchor) {
        var mh$ = RprGenericJoint_set_local_anchor1$MH();
        try {
            mh$.invokeExact(this_, local_anchor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_anchor2$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprGenericJoint_set_local_anchor2$MH,"RprGenericJoint_set_local_anchor2");
    }
    public static void RprGenericJoint_set_local_anchor2 ( Addressable this_,  MemorySegment local_anchor) {
        var mh$ = RprGenericJoint_set_local_anchor2$MH();
        try {
            mh$.invokeExact(this_, local_anchor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_axis1$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprGenericJoint_set_local_axis1$MH,"RprGenericJoint_set_local_axis1");
    }
    public static void RprGenericJoint_set_local_axis1 ( Addressable this_,  MemorySegment local_axis) {
        var mh$ = RprGenericJoint_set_local_axis1$MH();
        try {
            mh$.invokeExact(this_, local_axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_axis2$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprGenericJoint_set_local_axis2$MH,"RprGenericJoint_set_local_axis2");
    }
    public static void RprGenericJoint_set_local_axis2 ( Addressable this_,  MemorySegment local_axis) {
        var mh$ = RprGenericJoint_set_local_axis2$MH();
        try {
            mh$.invokeExact(this_, local_axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_frame1$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprGenericJoint_set_local_frame1$MH,"RprGenericJoint_set_local_frame1");
    }
    public static void RprGenericJoint_set_local_frame1 ( Addressable this_,  MemorySegment local_frame) {
        var mh$ = RprGenericJoint_set_local_frame1$MH();
        try {
            mh$.invokeExact(this_, local_frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_frame2$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprGenericJoint_set_local_frame2$MH,"RprGenericJoint_set_local_frame2");
    }
    public static void RprGenericJoint_set_local_frame2 ( Addressable this_,  MemorySegment local_frame) {
        var mh$ = RprGenericJoint_set_local_frame2$MH();
        try {
            mh$.invokeExact(this_, local_frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motor$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprGenericJoint_set_motor$MH,"RprGenericJoint_set_motor");
    }
    public static void RprGenericJoint_set_motor ( Addressable this_,  int axis,  float target_pos,  float target_vel,  float stiffness,  float damping) {
        var mh$ = RprGenericJoint_set_motor$MH();
        try {
            mh$.invokeExact(this_, axis, target_pos, target_vel, stiffness, damping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motor_max_force$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprGenericJoint_set_motor_max_force$MH,"RprGenericJoint_set_motor_max_force");
    }
    public static void RprGenericJoint_set_motor_max_force ( Addressable this_,  int axis,  float max_force) {
        var mh$ = RprGenericJoint_set_motor_max_force$MH();
        try {
            mh$.invokeExact(this_, axis, max_force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motor_model$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprGenericJoint_set_motor_model$MH,"RprGenericJoint_set_motor_model");
    }
    public static void RprGenericJoint_set_motor_model ( Addressable this_,  int axis,  int model) {
        var mh$ = RprGenericJoint_set_motor_model$MH();
        try {
            mh$.invokeExact(this_, axis, model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motor_position$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprGenericJoint_set_motor_position$MH,"RprGenericJoint_set_motor_position");
    }
    public static void RprGenericJoint_set_motor_position ( Addressable this_,  int axis,  float target_pos,  float stiffness,  float damping) {
        var mh$ = RprGenericJoint_set_motor_position$MH();
        try {
            mh$.invokeExact(this_, axis, target_pos, stiffness, damping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motor_velocity$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprGenericJoint_set_motor_velocity$MH,"RprGenericJoint_set_motor_velocity");
    }
    public static void RprGenericJoint_set_motor_velocity ( Addressable this_,  int axis,  float target_vel,  float factor) {
        var mh$ = RprGenericJoint_set_motor_velocity$MH();
        try {
            mh$.invokeExact(this_, axis, target_vel, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprImpulseJointSet_contains$MH,"RprImpulseJointSet_contains");
    }
    public static boolean RprImpulseJointSet_contains ( Addressable this_,  MemorySegment handle) {
        var mh$ = RprImpulseJointSet_contains$MH();
        try {
            return (boolean)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprImpulseJointSet_drop$MH,"RprImpulseJointSet_drop");
    }
    public static void RprImpulseJointSet_drop ( Addressable this_) {
        var mh$ = RprImpulseJointSet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_get$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprImpulseJointSet_get$MH,"RprImpulseJointSet_get");
    }
    public static MemoryAddress RprImpulseJointSet_get ( Addressable this_,  MemorySegment handle) {
        var mh$ = RprImpulseJointSet_get$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_get_mut$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprImpulseJointSet_get_mut$MH,"RprImpulseJointSet_get_mut");
    }
    public static MemoryAddress RprImpulseJointSet_get_mut ( Addressable this_,  MemorySegment handle) {
        var mh$ = RprImpulseJointSet_get_mut$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprImpulseJointSet_insert$MH,"RprImpulseJointSet_insert");
    }
    public static MemorySegment RprImpulseJointSet_insert ( SegmentAllocator allocator,  Addressable this_,  MemorySegment body1,  MemorySegment body2,  Addressable data,  boolean wake_up) {
        var mh$ = RprImpulseJointSet_insert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, body1, body2, data, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprImpulseJointSet_is_empty$MH,"RprImpulseJointSet_is_empty");
    }
    public static boolean RprImpulseJointSet_is_empty ( Addressable this_) {
        var mh$ = RprImpulseJointSet_is_empty$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_len$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprImpulseJointSet_len$MH,"RprImpulseJointSet_len");
    }
    public static long RprImpulseJointSet_len ( Addressable this_) {
        var mh$ = RprImpulseJointSet_len$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprImpulseJointSet_new$MH,"RprImpulseJointSet_new");
    }
    public static MemoryAddress RprImpulseJointSet_new () {
        var mh$ = RprImpulseJointSet_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprImpulseJointSet_remove$MH,"RprImpulseJointSet_remove");
    }
    public static MemoryAddress RprImpulseJointSet_remove ( Addressable this_,  MemorySegment handle,  boolean wake_up) {
        var mh$ = RprImpulseJointSet_remove$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_, handle, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_body1$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprImpulseJoint_body1$MH,"RprImpulseJoint_body1");
    }
    public static MemorySegment RprImpulseJoint_body1 ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprImpulseJoint_body1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_body2$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprImpulseJoint_body2$MH,"RprImpulseJoint_body2");
    }
    public static MemorySegment RprImpulseJoint_body2 ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprImpulseJoint_body2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_data$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprImpulseJoint_data$MH,"RprImpulseJoint_data");
    }
    public static MemoryAddress RprImpulseJoint_data ( Addressable this_) {
        var mh$ = RprImpulseJoint_data$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_impulses$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprImpulseJoint_impulses$MH,"RprImpulseJoint_impulses");
    }
    public static MemorySegment RprImpulseJoint_impulses ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprImpulseJoint_impulses$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_set_body1$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprImpulseJoint_set_body1$MH,"RprImpulseJoint_set_body1");
    }
    public static void RprImpulseJoint_set_body1 ( Addressable this_,  MemorySegment body1) {
        var mh$ = RprImpulseJoint_set_body1$MH();
        try {
            mh$.invokeExact(this_, body1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_set_body2$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprImpulseJoint_set_body2$MH,"RprImpulseJoint_set_body2");
    }
    public static void RprImpulseJoint_set_body2 ( Addressable this_,  MemorySegment body2) {
        var mh$ = RprImpulseJoint_set_body2$MH();
        try {
            mh$.invokeExact(this_, body2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprImpulseJoint_set_data$MH,"RprImpulseJoint_set_data");
    }
    public static void RprImpulseJoint_set_data ( Addressable this_,  Addressable data) {
        var mh$ = RprImpulseJoint_set_data$MH();
        try {
            mh$.invokeExact(this_, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_set_impulses$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprImpulseJoint_set_impulses$MH,"RprImpulseJoint_set_impulses");
    }
    public static void RprImpulseJoint_set_impulses ( Addressable this_,  MemorySegment impulses) {
        var mh$ = RprImpulseJoint_set_impulses$MH();
        try {
            mh$.invokeExact(this_, impulses);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIntegrationParametersDesc_default$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprIntegrationParametersDesc_default$MH,"RprIntegrationParametersDesc_default");
    }
    public static MemorySegment RprIntegrationParametersDesc_default ( SegmentAllocator allocator) {
        var mh$ = RprIntegrationParametersDesc_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIntegrationParameters_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprIntegrationParameters_drop$MH,"RprIntegrationParameters_drop");
    }
    public static void RprIntegrationParameters_drop ( Addressable this_) {
        var mh$ = RprIntegrationParameters_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIntegrationParameters_new$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprIntegrationParameters_new$MH,"RprIntegrationParameters_new");
    }
    public static MemoryAddress RprIntegrationParameters_new ( MemorySegment desc) {
        var mh$ = RprIntegrationParameters_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIslandManager_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprIslandManager_drop$MH,"RprIslandManager_drop");
    }
    public static void RprIslandManager_drop ( Addressable this_) {
        var mh$ = RprIslandManager_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIslandManager_new$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprIslandManager_new$MH,"RprIslandManager_new");
    }
    public static MemoryAddress RprIslandManager_new () {
        var mh$ = RprIslandManager_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprJointLimits_default$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprJointLimits_default$MH,"RprJointLimits_default");
    }
    public static MemorySegment RprJointLimits_default ( SegmentAllocator allocator) {
        var mh$ = RprJointLimits_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprJointMotor_default$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprJointMotor_default$MH,"RprJointMotor_default");
    }
    public static MemorySegment RprJointMotor_default ( SegmentAllocator allocator) {
        var mh$ = RprJointMotor_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprMultibodyJointSet_drop$MH,"RprMultibodyJointSet_drop");
    }
    public static void RprMultibodyJointSet_drop ( Addressable this_) {
        var mh$ = RprMultibodyJointSet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprMultibodyJointSet_insert$MH,"RprMultibodyJointSet_insert");
    }
    public static boolean RprMultibodyJointSet_insert ( Addressable this_,  MemorySegment body1,  MemorySegment body2,  Addressable data,  boolean wake_up,  Addressable out) {
        var mh$ = RprMultibodyJointSet_insert$MH();
        try {
            return (boolean)mh$.invokeExact(this_, body1, body2, data, wake_up, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprMultibodyJointSet_new$MH,"RprMultibodyJointSet_new");
    }
    public static MemoryAddress RprMultibodyJointSet_new () {
        var mh$ = RprMultibodyJointSet_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprMultibodyJointSet_remove$MH,"RprMultibodyJointSet_remove");
    }
    public static void RprMultibodyJointSet_remove ( Addressable this_,  MemorySegment handle,  boolean wake_up) {
        var mh$ = RprMultibodyJointSet_remove$MH();
        try {
            mh$.invokeExact(this_, handle, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_remove_joints_attached_to_rigid_body$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprMultibodyJointSet_remove_joints_attached_to_rigid_body$MH,"RprMultibodyJointSet_remove_joints_attached_to_rigid_body");
    }
    public static void RprMultibodyJointSet_remove_joints_attached_to_rigid_body ( Addressable this_,  MemorySegment rb_to_remove) {
        var mh$ = RprMultibodyJointSet_remove_joints_attached_to_rigid_body$MH();
        try {
            mh$.invokeExact(this_, rb_to_remove);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_remove_multibody_articulations$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprMultibodyJointSet_remove_multibody_articulations$MH,"RprMultibodyJointSet_remove_multibody_articulations");
    }
    public static void RprMultibodyJointSet_remove_multibody_articulations ( Addressable this_,  MemorySegment handle,  boolean wake_up) {
        var mh$ = RprMultibodyJointSet_remove_multibody_articulations$MH();
        try {
            mh$.invokeExact(this_, handle, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprNarrowPhase_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprNarrowPhase_drop$MH,"RprNarrowPhase_drop");
    }
    public static void RprNarrowPhase_drop ( Addressable this_) {
        var mh$ = RprNarrowPhase_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprNarrowPhase_new$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprNarrowPhase_new$MH,"RprNarrowPhase_new");
    }
    public static MemoryAddress RprNarrowPhase_new () {
        var mh$ = RprNarrowPhase_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPhysicsPipeline_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprPhysicsPipeline_drop$MH,"RprPhysicsPipeline_drop");
    }
    public static void RprPhysicsPipeline_drop ( Addressable this_) {
        var mh$ = RprPhysicsPipeline_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPhysicsPipeline_new$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprPhysicsPipeline_new$MH,"RprPhysicsPipeline_new");
    }
    public static MemoryAddress RprPhysicsPipeline_new () {
        var mh$ = RprPhysicsPipeline_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPhysicsPipeline_step$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprPhysicsPipeline_step$MH,"RprPhysicsPipeline_step");
    }
    public static void RprPhysicsPipeline_step ( Addressable this_,  MemorySegment gravity,  Addressable integration_parameters,  Addressable islands,  Addressable broad_phase,  Addressable narrow_phase,  Addressable bodies,  Addressable colliders,  Addressable impulse_joints,  Addressable multibody_joints,  Addressable ccd_solver,  Addressable query_pipeline) {
        var mh$ = RprPhysicsPipeline_step$MH();
        try {
            mh$.invokeExact(this_, gravity, integration_parameters, islands, broad_phase, narrow_phase, bodies, colliders, impulse_joints, multibody_joints, ccd_solver, query_pipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPhysicsPipeline_step_all$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprPhysicsPipeline_step_all$MH,"RprPhysicsPipeline_step_all");
    }
    public static void RprPhysicsPipeline_step_all ( long count,  Addressable pipeline,  Addressable gravity,  Addressable integration_parameters,  Addressable islands,  Addressable broad_phase,  Addressable narrow_phase,  Addressable bodies,  Addressable colliders,  Addressable impulse_joints,  Addressable multibody_joints,  Addressable ccd_solver,  Addressable query_pipeline) {
        var mh$ = RprPhysicsPipeline_step_all$MH();
        try {
            mh$.invokeExact(count, pipeline, gravity, integration_parameters, islands, broad_phase, narrow_phase, bodies, colliders, impulse_joints, multibody_joints, ccd_solver, query_pipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprQueryPipeline_drop$MH,"RprQueryPipeline_drop");
    }
    public static void RprQueryPipeline_drop ( Addressable this_) {
        var mh$ = RprQueryPipeline_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_new$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprQueryPipeline_new$MH,"RprQueryPipeline_new");
    }
    public static MemoryAddress RprQueryPipeline_new () {
        var mh$ = RprQueryPipeline_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_additional_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprRigidBodyBuilder_additional_mass$MH,"RprRigidBodyBuilder_additional_mass");
    }
    public static void RprRigidBodyBuilder_additional_mass ( Addressable this_,  float mass) {
        var mh$ = RprRigidBodyBuilder_additional_mass$MH();
        try {
            mh$.invokeExact(this_, mass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_angular_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprRigidBodyBuilder_angular_damping$MH,"RprRigidBodyBuilder_angular_damping");
    }
    public static void RprRigidBodyBuilder_angular_damping ( Addressable this_,  float factor) {
        var mh$ = RprRigidBodyBuilder_angular_damping$MH();
        try {
            mh$.invokeExact(this_, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_angvel$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprRigidBodyBuilder_angvel$MH,"RprRigidBodyBuilder_angvel");
    }
    public static void RprRigidBodyBuilder_angvel ( Addressable this_,  MemorySegment angvel) {
        var mh$ = RprRigidBodyBuilder_angvel$MH();
        try {
            mh$.invokeExact(this_, angvel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_build$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprRigidBodyBuilder_build$MH,"RprRigidBodyBuilder_build");
    }
    public static MemoryAddress RprRigidBodyBuilder_build ( Addressable this_) {
        var mh$ = RprRigidBodyBuilder_build$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_can_sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprRigidBodyBuilder_can_sleep$MH,"RprRigidBodyBuilder_can_sleep");
    }
    public static void RprRigidBodyBuilder_can_sleep ( Addressable this_,  boolean can_sleep) {
        var mh$ = RprRigidBodyBuilder_can_sleep$MH();
        try {
            mh$.invokeExact(this_, can_sleep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_ccd_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprRigidBodyBuilder_ccd_enabled$MH,"RprRigidBodyBuilder_ccd_enabled");
    }
    public static void RprRigidBodyBuilder_ccd_enabled ( Addressable this_,  boolean enabled) {
        var mh$ = RprRigidBodyBuilder_ccd_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_dominance_group$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprRigidBodyBuilder_dominance_group$MH,"RprRigidBodyBuilder_dominance_group");
    }
    public static void RprRigidBodyBuilder_dominance_group ( Addressable this_,  byte group) {
        var mh$ = RprRigidBodyBuilder_dominance_group$MH();
        try {
            mh$.invokeExact(this_, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprRigidBodyBuilder_drop$MH,"RprRigidBodyBuilder_drop");
    }
    public static void RprRigidBodyBuilder_drop ( Addressable this_) {
        var mh$ = RprRigidBodyBuilder_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_dynamic$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprRigidBodyBuilder_dynamic$MH,"RprRigidBodyBuilder_dynamic");
    }
    public static MemoryAddress RprRigidBodyBuilder_dynamic () {
        var mh$ = RprRigidBodyBuilder_dynamic$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprRigidBodyBuilder_enabled$MH,"RprRigidBodyBuilder_enabled");
    }
    public static void RprRigidBodyBuilder_enabled ( Addressable this_,  boolean enabled) {
        var mh$ = RprRigidBodyBuilder_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_fixed$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprRigidBodyBuilder_fixed$MH,"RprRigidBodyBuilder_fixed");
    }
    public static MemoryAddress RprRigidBodyBuilder_fixed () {
        var mh$ = RprRigidBodyBuilder_fixed$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_gravity_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprRigidBodyBuilder_gravity_scale$MH,"RprRigidBodyBuilder_gravity_scale");
    }
    public static void RprRigidBodyBuilder_gravity_scale ( Addressable this_,  float scale_factor) {
        var mh$ = RprRigidBodyBuilder_gravity_scale$MH();
        try {
            mh$.invokeExact(this_, scale_factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_kinematic_position_based$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprRigidBodyBuilder_kinematic_position_based$MH,"RprRigidBodyBuilder_kinematic_position_based");
    }
    public static MemoryAddress RprRigidBodyBuilder_kinematic_position_based () {
        var mh$ = RprRigidBodyBuilder_kinematic_position_based$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_kinematic_velocity_based$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprRigidBodyBuilder_kinematic_velocity_based$MH,"RprRigidBodyBuilder_kinematic_velocity_based");
    }
    public static MemoryAddress RprRigidBodyBuilder_kinematic_velocity_based () {
        var mh$ = RprRigidBodyBuilder_kinematic_velocity_based$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_linear_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprRigidBodyBuilder_linear_damping$MH,"RprRigidBodyBuilder_linear_damping");
    }
    public static void RprRigidBodyBuilder_linear_damping ( Addressable this_,  float factor) {
        var mh$ = RprRigidBodyBuilder_linear_damping$MH();
        try {
            mh$.invokeExact(this_, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_linvel$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprRigidBodyBuilder_linvel$MH,"RprRigidBodyBuilder_linvel");
    }
    public static void RprRigidBodyBuilder_linvel ( Addressable this_,  MemorySegment linvel) {
        var mh$ = RprRigidBodyBuilder_linvel$MH();
        try {
            mh$.invokeExact(this_, linvel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_new$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprRigidBodyBuilder_new$MH,"RprRigidBodyBuilder_new");
    }
    public static MemoryAddress RprRigidBodyBuilder_new ( int body_type) {
        var mh$ = RprRigidBodyBuilder_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(body_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_position$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprRigidBodyBuilder_position$MH,"RprRigidBodyBuilder_position");
    }
    public static void RprRigidBodyBuilder_position ( Addressable this_,  MemorySegment position) {
        var mh$ = RprRigidBodyBuilder_position$MH();
        try {
            mh$.invokeExact(this_, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprRigidBodyBuilder_rotation$MH,"RprRigidBodyBuilder_rotation");
    }
    public static void RprRigidBodyBuilder_rotation ( Addressable this_,  MemorySegment rotation) {
        var mh$ = RprRigidBodyBuilder_rotation$MH();
        try {
            mh$.invokeExact(this_, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_sleeping$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprRigidBodyBuilder_sleeping$MH,"RprRigidBodyBuilder_sleeping");
    }
    public static void RprRigidBodyBuilder_sleeping ( Addressable this_,  boolean sleeping) {
        var mh$ = RprRigidBodyBuilder_sleeping$MH();
        try {
            mh$.invokeExact(this_, sleeping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprRigidBodyBuilder_translation$MH,"RprRigidBodyBuilder_translation");
    }
    public static void RprRigidBodyBuilder_translation ( Addressable this_,  MemorySegment translation) {
        var mh$ = RprRigidBodyBuilder_translation$MH();
        try {
            mh$.invokeExact(this_, translation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprRigidBodySet_contains$MH,"RprRigidBodySet_contains");
    }
    public static boolean RprRigidBodySet_contains ( Addressable this_,  MemorySegment handle) {
        var mh$ = RprRigidBodySet_contains$MH();
        try {
            return (boolean)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprRigidBodySet_drop$MH,"RprRigidBodySet_drop");
    }
    public static void RprRigidBodySet_drop ( Addressable this_) {
        var mh$ = RprRigidBodySet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_get$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprRigidBodySet_get$MH,"RprRigidBodySet_get");
    }
    public static MemoryAddress RprRigidBodySet_get ( Addressable this_,  MemorySegment handle) {
        var mh$ = RprRigidBodySet_get$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_get_mut$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprRigidBodySet_get_mut$MH,"RprRigidBodySet_get_mut");
    }
    public static MemoryAddress RprRigidBodySet_get_mut ( Addressable this_,  MemorySegment handle) {
        var mh$ = RprRigidBodySet_get_mut$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprRigidBodySet_insert$MH,"RprRigidBodySet_insert");
    }
    public static MemorySegment RprRigidBodySet_insert ( SegmentAllocator allocator,  Addressable this_,  Addressable rb) {
        var mh$ = RprRigidBodySet_insert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, rb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprRigidBodySet_is_empty$MH,"RprRigidBodySet_is_empty");
    }
    public static boolean RprRigidBodySet_is_empty ( Addressable this_) {
        var mh$ = RprRigidBodySet_is_empty$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_len$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprRigidBodySet_len$MH,"RprRigidBodySet_len");
    }
    public static long RprRigidBodySet_len ( Addressable this_) {
        var mh$ = RprRigidBodySet_len$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprRigidBodySet_new$MH,"RprRigidBodySet_new");
    }
    public static MemoryAddress RprRigidBodySet_new () {
        var mh$ = RprRigidBodySet_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprRigidBodySet_remove$MH,"RprRigidBodySet_remove");
    }
    public static MemoryAddress RprRigidBodySet_remove ( Addressable this_,  MemorySegment handle,  Addressable islands,  Addressable colliders,  Addressable impulse_joints,  Addressable multibody_joints,  boolean remove_attached_colliders) {
        var mh$ = RprRigidBodySet_remove$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(this_, handle, islands, colliders, impulse_joints, multibody_joints, remove_attached_colliders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_add_force$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprRigidBody_add_force$MH,"RprRigidBody_add_force");
    }
    public static void RprRigidBody_add_force ( Addressable this_,  MemorySegment force,  boolean wake_up) {
        var mh$ = RprRigidBody_add_force$MH();
        try {
            mh$.invokeExact(this_, force, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_add_force_at_point$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprRigidBody_add_force_at_point$MH,"RprRigidBody_add_force_at_point");
    }
    public static void RprRigidBody_add_force_at_point ( Addressable this_,  MemorySegment force,  MemorySegment point,  boolean wake_up) {
        var mh$ = RprRigidBody_add_force_at_point$MH();
        try {
            mh$.invokeExact(this_, force, point, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_add_torque$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprRigidBody_add_torque$MH,"RprRigidBody_add_torque");
    }
    public static void RprRigidBody_add_torque ( Addressable this_,  MemorySegment torque,  boolean wake_up) {
        var mh$ = RprRigidBody_add_torque$MH();
        try {
            mh$.invokeExact(this_, torque, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_angular_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprRigidBody_angular_damping$MH,"RprRigidBody_angular_damping");
    }
    public static float RprRigidBody_angular_damping ( Addressable this_) {
        var mh$ = RprRigidBody_angular_damping$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_angvel$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprRigidBody_angvel$MH,"RprRigidBody_angvel");
    }
    public static MemorySegment RprRigidBody_angvel ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprRigidBody_angvel$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_apply_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprRigidBody_apply_impulse$MH,"RprRigidBody_apply_impulse");
    }
    public static void RprRigidBody_apply_impulse ( Addressable this_,  MemorySegment impulse,  boolean wake_up) {
        var mh$ = RprRigidBody_apply_impulse$MH();
        try {
            mh$.invokeExact(this_, impulse, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_apply_impulse_at_point$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprRigidBody_apply_impulse_at_point$MH,"RprRigidBody_apply_impulse_at_point");
    }
    public static void RprRigidBody_apply_impulse_at_point ( Addressable this_,  MemorySegment impulse,  MemorySegment point,  boolean wake_up) {
        var mh$ = RprRigidBody_apply_impulse_at_point$MH();
        try {
            mh$.invokeExact(this_, impulse, point, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_apply_torque_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprRigidBody_apply_torque_impulse$MH,"RprRigidBody_apply_torque_impulse");
    }
    public static void RprRigidBody_apply_torque_impulse ( Addressable this_,  MemorySegment torque_impulse,  boolean wake_up) {
        var mh$ = RprRigidBody_apply_torque_impulse$MH();
        try {
            mh$.invokeExact(this_, torque_impulse, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_body_type$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprRigidBody_body_type$MH,"RprRigidBody_body_type");
    }
    public static int RprRigidBody_body_type ( Addressable this_) {
        var mh$ = RprRigidBody_body_type$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_center_of_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprRigidBody_center_of_mass$MH,"RprRigidBody_center_of_mass");
    }
    public static MemorySegment RprRigidBody_center_of_mass ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprRigidBody_center_of_mass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_dominance_group$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprRigidBody_dominance_group$MH,"RprRigidBody_dominance_group");
    }
    public static byte RprRigidBody_dominance_group ( Addressable this_) {
        var mh$ = RprRigidBody_dominance_group$MH();
        try {
            return (byte)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprRigidBody_drop$MH,"RprRigidBody_drop");
    }
    public static void RprRigidBody_drop ( Addressable this_) {
        var mh$ = RprRigidBody_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_effective_dominance_group$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprRigidBody_effective_dominance_group$MH,"RprRigidBody_effective_dominance_group");
    }
    public static short RprRigidBody_effective_dominance_group ( Addressable this_) {
        var mh$ = RprRigidBody_effective_dominance_group$MH();
        try {
            return (short)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_enable_ccd$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprRigidBody_enable_ccd$MH,"RprRigidBody_enable_ccd");
    }
    public static void RprRigidBody_enable_ccd ( Addressable this_,  boolean enabled) {
        var mh$ = RprRigidBody_enable_ccd$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_gravitational_potential_energy$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprRigidBody_gravitational_potential_energy$MH,"RprRigidBody_gravitational_potential_energy");
    }
    public static float RprRigidBody_gravitational_potential_energy ( Addressable this_,  float dt,  MemorySegment gravity) {
        var mh$ = RprRigidBody_gravitational_potential_energy$MH();
        try {
            return (float)mh$.invokeExact(this_, dt, gravity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_gravity_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprRigidBody_gravity_scale$MH,"RprRigidBody_gravity_scale");
    }
    public static float RprRigidBody_gravity_scale ( Addressable this_) {
        var mh$ = RprRigidBody_gravity_scale$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_ccd_active$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprRigidBody_is_ccd_active$MH,"RprRigidBody_is_ccd_active");
    }
    public static boolean RprRigidBody_is_ccd_active ( Addressable this_) {
        var mh$ = RprRigidBody_is_ccd_active$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_ccd_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprRigidBody_is_ccd_enabled$MH,"RprRigidBody_is_ccd_enabled");
    }
    public static boolean RprRigidBody_is_ccd_enabled ( Addressable this_) {
        var mh$ = RprRigidBody_is_ccd_enabled$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_dynamic$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprRigidBody_is_dynamic$MH,"RprRigidBody_is_dynamic");
    }
    public static boolean RprRigidBody_is_dynamic ( Addressable this_) {
        var mh$ = RprRigidBody_is_dynamic$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprRigidBody_is_enabled$MH,"RprRigidBody_is_enabled");
    }
    public static boolean RprRigidBody_is_enabled ( Addressable this_) {
        var mh$ = RprRigidBody_is_enabled$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_fixed$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprRigidBody_is_fixed$MH,"RprRigidBody_is_fixed");
    }
    public static boolean RprRigidBody_is_fixed ( Addressable this_) {
        var mh$ = RprRigidBody_is_fixed$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_kinematic$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprRigidBody_is_kinematic$MH,"RprRigidBody_is_kinematic");
    }
    public static boolean RprRigidBody_is_kinematic ( Addressable this_) {
        var mh$ = RprRigidBody_is_kinematic$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_rotation_locked$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprRigidBody_is_rotation_locked$MH,"RprRigidBody_is_rotation_locked");
    }
    public static void RprRigidBody_is_rotation_locked ( Addressable this_,  Addressable out) {
        var mh$ = RprRigidBody_is_rotation_locked$MH();
        try {
            mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_sleeping$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprRigidBody_is_sleeping$MH,"RprRigidBody_is_sleeping");
    }
    public static boolean RprRigidBody_is_sleeping ( Addressable this_) {
        var mh$ = RprRigidBody_is_sleeping$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_translation_locked$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprRigidBody_is_translation_locked$MH,"RprRigidBody_is_translation_locked");
    }
    public static boolean RprRigidBody_is_translation_locked ( Addressable this_) {
        var mh$ = RprRigidBody_is_translation_locked$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_kinetic_energy$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprRigidBody_kinetic_energy$MH,"RprRigidBody_kinetic_energy");
    }
    public static float RprRigidBody_kinetic_energy ( Addressable this_) {
        var mh$ = RprRigidBody_kinetic_energy$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_linear_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprRigidBody_linear_damping$MH,"RprRigidBody_linear_damping");
    }
    public static float RprRigidBody_linear_damping ( Addressable this_) {
        var mh$ = RprRigidBody_linear_damping$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_linvel$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprRigidBody_linvel$MH,"RprRigidBody_linvel");
    }
    public static MemorySegment RprRigidBody_linvel ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprRigidBody_linvel$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_lock_translations$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprRigidBody_lock_translations$MH,"RprRigidBody_lock_translations");
    }
    public static void RprRigidBody_lock_translations ( Addressable this_,  boolean locked,  boolean wake_up) {
        var mh$ = RprRigidBody_lock_translations$MH();
        try {
            mh$.invokeExact(this_, locked, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprRigidBody_mass$MH,"RprRigidBody_mass");
    }
    public static float RprRigidBody_mass ( Addressable this_) {
        var mh$ = RprRigidBody_mass$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_next_position$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprRigidBody_next_position$MH,"RprRigidBody_next_position");
    }
    public static MemorySegment RprRigidBody_next_position ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprRigidBody_next_position$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_position$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprRigidBody_position$MH,"RprRigidBody_position");
    }
    public static MemorySegment RprRigidBody_position ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprRigidBody_position$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_predict_position_using_velocity_and_forces$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprRigidBody_predict_position_using_velocity_and_forces$MH,"RprRigidBody_predict_position_using_velocity_and_forces");
    }
    public static MemorySegment RprRigidBody_predict_position_using_velocity_and_forces ( SegmentAllocator allocator,  Addressable this_,  float dt) {
        var mh$ = RprRigidBody_predict_position_using_velocity_and_forces$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, dt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_recompute_mass_properties_from_colliders$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprRigidBody_recompute_mass_properties_from_colliders$MH,"RprRigidBody_recompute_mass_properties_from_colliders");
    }
    public static void RprRigidBody_recompute_mass_properties_from_colliders ( Addressable this_,  Addressable colliders) {
        var mh$ = RprRigidBody_recompute_mass_properties_from_colliders$MH();
        try {
            mh$.invokeExact(this_, colliders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_reset_forces$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprRigidBody_reset_forces$MH,"RprRigidBody_reset_forces");
    }
    public static void RprRigidBody_reset_forces ( Addressable this_,  boolean wake_up) {
        var mh$ = RprRigidBody_reset_forces$MH();
        try {
            mh$.invokeExact(this_, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_reset_torques$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprRigidBody_reset_torques$MH,"RprRigidBody_reset_torques");
    }
    public static void RprRigidBody_reset_torques ( Addressable this_,  boolean wake_up) {
        var mh$ = RprRigidBody_reset_torques$MH();
        try {
            mh$.invokeExact(this_, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprRigidBody_rotation$MH,"RprRigidBody_rotation");
    }
    public static MemorySegment RprRigidBody_rotation ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprRigidBody_rotation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_additional_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprRigidBody_set_additional_mass$MH,"RprRigidBody_set_additional_mass");
    }
    public static void RprRigidBody_set_additional_mass ( Addressable this_,  float additional_mass,  boolean wake_up) {
        var mh$ = RprRigidBody_set_additional_mass$MH();
        try {
            mh$.invokeExact(this_, additional_mass, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_angular_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprRigidBody_set_angular_damping$MH,"RprRigidBody_set_angular_damping");
    }
    public static void RprRigidBody_set_angular_damping ( Addressable this_,  float damping) {
        var mh$ = RprRigidBody_set_angular_damping$MH();
        try {
            mh$.invokeExact(this_, damping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_angvel$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprRigidBody_set_angvel$MH,"RprRigidBody_set_angvel");
    }
    public static void RprRigidBody_set_angvel ( Addressable this_,  MemorySegment angvel,  boolean wake_up) {
        var mh$ = RprRigidBody_set_angvel$MH();
        try {
            mh$.invokeExact(this_, angvel, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_body_type$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprRigidBody_set_body_type$MH,"RprRigidBody_set_body_type");
    }
    public static void RprRigidBody_set_body_type ( Addressable this_,  int status,  boolean wake_up) {
        var mh$ = RprRigidBody_set_body_type$MH();
        try {
            mh$.invokeExact(this_, status, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_dominance_group$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprRigidBody_set_dominance_group$MH,"RprRigidBody_set_dominance_group");
    }
    public static void RprRigidBody_set_dominance_group ( Addressable this_,  byte dominance) {
        var mh$ = RprRigidBody_set_dominance_group$MH();
        try {
            mh$.invokeExact(this_, dominance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprRigidBody_set_enabled$MH,"RprRigidBody_set_enabled");
    }
    public static void RprRigidBody_set_enabled ( Addressable this_,  boolean enabled) {
        var mh$ = RprRigidBody_set_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_enabled_rotations$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprRigidBody_set_enabled_rotations$MH,"RprRigidBody_set_enabled_rotations");
    }
    public static void RprRigidBody_set_enabled_rotations ( Addressable this_,  boolean allow_rotations_x,  boolean allow_rotations_y,  boolean allow_rotations_z,  boolean wake_up) {
        var mh$ = RprRigidBody_set_enabled_rotations$MH();
        try {
            mh$.invokeExact(this_, allow_rotations_x, allow_rotations_y, allow_rotations_z, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_enabled_translations$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprRigidBody_set_enabled_translations$MH,"RprRigidBody_set_enabled_translations");
    }
    public static void RprRigidBody_set_enabled_translations ( Addressable this_,  boolean allow_translation_x,  boolean allow_translation_y,  boolean wake_up) {
        var mh$ = RprRigidBody_set_enabled_translations$MH();
        try {
            mh$.invokeExact(this_, allow_translation_x, allow_translation_y, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_gravity_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprRigidBody_set_gravity_scale$MH,"RprRigidBody_set_gravity_scale");
    }
    public static void RprRigidBody_set_gravity_scale ( Addressable this_,  float scale,  boolean wake_up) {
        var mh$ = RprRigidBody_set_gravity_scale$MH();
        try {
            mh$.invokeExact(this_, scale, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_linear_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprRigidBody_set_linear_damping$MH,"RprRigidBody_set_linear_damping");
    }
    public static void RprRigidBody_set_linear_damping ( Addressable this_,  float damping) {
        var mh$ = RprRigidBody_set_linear_damping$MH();
        try {
            mh$.invokeExact(this_, damping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_linvel$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprRigidBody_set_linvel$MH,"RprRigidBody_set_linvel");
    }
    public static void RprRigidBody_set_linvel ( Addressable this_,  MemorySegment linvel,  boolean wake_up) {
        var mh$ = RprRigidBody_set_linvel$MH();
        try {
            mh$.invokeExact(this_, linvel, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_next_kinematic_position$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprRigidBody_set_next_kinematic_position$MH,"RprRigidBody_set_next_kinematic_position");
    }
    public static void RprRigidBody_set_next_kinematic_position ( Addressable this_,  MemorySegment pos) {
        var mh$ = RprRigidBody_set_next_kinematic_position$MH();
        try {
            mh$.invokeExact(this_, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_next_kinematic_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprRigidBody_set_next_kinematic_rotation$MH,"RprRigidBody_set_next_kinematic_rotation");
    }
    public static void RprRigidBody_set_next_kinematic_rotation ( Addressable this_,  MemorySegment rotation) {
        var mh$ = RprRigidBody_set_next_kinematic_rotation$MH();
        try {
            mh$.invokeExact(this_, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_next_kinematic_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprRigidBody_set_next_kinematic_translation$MH,"RprRigidBody_set_next_kinematic_translation");
    }
    public static void RprRigidBody_set_next_kinematic_translation ( Addressable this_,  MemorySegment translation) {
        var mh$ = RprRigidBody_set_next_kinematic_translation$MH();
        try {
            mh$.invokeExact(this_, translation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_position$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprRigidBody_set_position$MH,"RprRigidBody_set_position");
    }
    public static void RprRigidBody_set_position ( Addressable this_,  MemorySegment pos,  boolean wake_up) {
        var mh$ = RprRigidBody_set_position$MH();
        try {
            mh$.invokeExact(this_, pos, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RprRigidBody_set_rotation$MH,"RprRigidBody_set_rotation");
    }
    public static void RprRigidBody_set_rotation ( Addressable this_,  MemorySegment rotation,  boolean wake_up) {
        var mh$ = RprRigidBody_set_rotation$MH();
        try {
            mh$.invokeExact(this_, rotation, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RprRigidBody_set_translation$MH,"RprRigidBody_set_translation");
    }
    public static void RprRigidBody_set_translation ( Addressable this_,  MemorySegment translation,  boolean wake_up) {
        var mh$ = RprRigidBody_set_translation$MH();
        try {
            mh$.invokeExact(this_, translation, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RprRigidBody_sleep$MH,"RprRigidBody_sleep");
    }
    public static void RprRigidBody_sleep ( Addressable this_) {
        var mh$ = RprRigidBody_sleep$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RprRigidBody_translation$MH,"RprRigidBody_translation");
    }
    public static MemorySegment RprRigidBody_translation ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprRigidBody_translation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_user_force$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RprRigidBody_user_force$MH,"RprRigidBody_user_force");
    }
    public static MemorySegment RprRigidBody_user_force ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprRigidBody_user_force$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_user_torque$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RprRigidBody_user_torque$MH,"RprRigidBody_user_torque");
    }
    public static MemorySegment RprRigidBody_user_torque ( SegmentAllocator allocator,  Addressable this_) {
        var mh$ = RprRigidBody_user_torque$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_velocity_at_point$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprRigidBody_velocity_at_point$MH,"RprRigidBody_velocity_at_point");
    }
    public static MemorySegment RprRigidBody_velocity_at_point ( SegmentAllocator allocator,  Addressable this_,  MemorySegment point) {
        var mh$ = RprRigidBody_velocity_at_point$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_wake_up$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprRigidBody_wake_up$MH,"RprRigidBody_wake_up");
    }
    public static void RprRigidBody_wake_up ( Addressable this_,  boolean strong) {
        var mh$ = RprRigidBody_wake_up$MH();
        try {
            mh$.invokeExact(this_, strong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprSharedShape_acquire$MH,"RprSharedShape_acquire");
    }
    public static void RprSharedShape_acquire ( Addressable this_) {
        var mh$ = RprSharedShape_acquire$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_ball$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprSharedShape_ball$MH,"RprSharedShape_ball");
    }
    public static MemoryAddress RprSharedShape_ball ( MemorySegment ball) {
        var mh$ = RprSharedShape_ball$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ball);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_capsule$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprSharedShape_capsule$MH,"RprSharedShape_capsule");
    }
    public static MemoryAddress RprSharedShape_capsule ( MemorySegment capsule) {
        var mh$ = RprSharedShape_capsule$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(capsule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_cuboid$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprSharedShape_cuboid$MH,"RprSharedShape_cuboid");
    }
    public static MemoryAddress RprSharedShape_cuboid ( MemorySegment cuboid) {
        var mh$ = RprSharedShape_cuboid$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cuboid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_release$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RprSharedShape_release$MH,"RprSharedShape_release");
    }
    public static void RprSharedShape_release ( Addressable this_) {
        var mh$ = RprSharedShape_release$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_segment$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RprSharedShape_segment$MH,"RprSharedShape_segment");
    }
    public static MemoryAddress RprSharedShape_segment ( MemorySegment segment) {
        var mh$ = RprSharedShape_segment$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_strong_count$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RprSharedShape_strong_count$MH,"RprSharedShape_strong_count");
    }
    public static long RprSharedShape_strong_count ( Addressable this_) {
        var mh$ = RprSharedShape_strong_count$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_triangle$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RprSharedShape_triangle$MH,"RprSharedShape_triangle");
    }
    public static MemoryAddress RprSharedShape_triangle ( MemorySegment triangle) {
        var mh$ = RprSharedShape_triangle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(triangle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryAddress NULL() {
        return constants$56.NULL$ADDR;
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    public static int RprJointAxesMask_ANG_AXES() {
        return (int)4L;
    }
    public static int RprJointAxesMask_FREE_PRISMATIC_AXES() {
        return (int)1L;
    }
    public static int RprJointAxesMask_FREE_REVOLUTE_AXES() {
        return (int)4L;
    }
    public static int RprJointAxesMask_LIN_AXES() {
        return (int)3L;
    }
    public static int RprJointAxesMask_LOCKED_FIXED_AXES() {
        return (int)7L;
    }
    public static int RprJointAxesMask_LOCKED_PRISMATIC_AXES() {
        return (int)6L;
    }
    public static int RprJointAxesMask_LOCKED_REVOLUTE_AXES() {
        return (int)3L;
    }
}


