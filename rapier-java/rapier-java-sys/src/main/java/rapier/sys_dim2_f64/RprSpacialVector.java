// Generated by jextract

package rapier.sys_dim2_f64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class RprSpacialVector {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_DOUBLE$LAYOUT.withName("x"),
        Constants$root.C_DOUBLE$LAYOUT.withName("y"),
        Constants$root.C_DOUBLE$LAYOUT.withName("z")
    ).withName("RprSpacialVector");
    public static MemoryLayout $LAYOUT() {
        return RprSpacialVector.$struct$LAYOUT;
    }
    static final VarHandle x$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x"));
    public static VarHandle x$VH() {
        return RprSpacialVector.x$VH;
    }
    public static double x$get(MemorySegment seg) {
        return (double)RprSpacialVector.x$VH.get(seg);
    }
    public static void x$set( MemorySegment seg, double x) {
        RprSpacialVector.x$VH.set(seg, x);
    }
    public static double x$get(MemorySegment seg, long index) {
        return (double)RprSpacialVector.x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, double x) {
        RprSpacialVector.x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("y"));
    public static VarHandle y$VH() {
        return RprSpacialVector.y$VH;
    }
    public static double y$get(MemorySegment seg) {
        return (double)RprSpacialVector.y$VH.get(seg);
    }
    public static void y$set( MemorySegment seg, double x) {
        RprSpacialVector.y$VH.set(seg, x);
    }
    public static double y$get(MemorySegment seg, long index) {
        return (double)RprSpacialVector.y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, double x) {
        RprSpacialVector.y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle z$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("z"));
    public static VarHandle z$VH() {
        return RprSpacialVector.z$VH;
    }
    public static double z$get(MemorySegment seg) {
        return (double)RprSpacialVector.z$VH.get(seg);
    }
    public static void z$set( MemorySegment seg, double x) {
        RprSpacialVector.z$VH.set(seg, x);
    }
    public static double z$get(MemorySegment seg, long index) {
        return (double)RprSpacialVector.z$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void z$set(MemorySegment seg, long index, double x) {
        RprSpacialVector.z$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


