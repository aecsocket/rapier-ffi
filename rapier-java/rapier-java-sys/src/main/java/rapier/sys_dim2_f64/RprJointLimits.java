// Generated by jextract

package rapier.sys_dim2_f64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class RprJointLimits {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_DOUBLE$LAYOUT.withName("min"),
        Constants$root.C_DOUBLE$LAYOUT.withName("max"),
        Constants$root.C_DOUBLE$LAYOUT.withName("impulse")
    ).withName("RprJointLimits");
    public static MemoryLayout $LAYOUT() {
        return RprJointLimits.$struct$LAYOUT;
    }
    static final VarHandle min$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("min"));
    public static VarHandle min$VH() {
        return RprJointLimits.min$VH;
    }
    public static double min$get(MemorySegment seg) {
        return (double)RprJointLimits.min$VH.get(seg);
    }
    public static void min$set( MemorySegment seg, double x) {
        RprJointLimits.min$VH.set(seg, x);
    }
    public static double min$get(MemorySegment seg, long index) {
        return (double)RprJointLimits.min$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void min$set(MemorySegment seg, long index, double x) {
        RprJointLimits.min$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max"));
    public static VarHandle max$VH() {
        return RprJointLimits.max$VH;
    }
    public static double max$get(MemorySegment seg) {
        return (double)RprJointLimits.max$VH.get(seg);
    }
    public static void max$set( MemorySegment seg, double x) {
        RprJointLimits.max$VH.set(seg, x);
    }
    public static double max$get(MemorySegment seg, long index) {
        return (double)RprJointLimits.max$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max$set(MemorySegment seg, long index, double x) {
        RprJointLimits.max$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle impulse$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("impulse"));
    public static VarHandle impulse$VH() {
        return RprJointLimits.impulse$VH;
    }
    public static double impulse$get(MemorySegment seg) {
        return (double)RprJointLimits.impulse$VH.get(seg);
    }
    public static void impulse$set( MemorySegment seg, double x) {
        RprJointLimits.impulse$VH.set(seg, x);
    }
    public static double impulse$get(MemorySegment seg, long index) {
        return (double)RprJointLimits.impulse$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void impulse$set(MemorySegment seg, long index, double x) {
        RprJointLimits.impulse$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


