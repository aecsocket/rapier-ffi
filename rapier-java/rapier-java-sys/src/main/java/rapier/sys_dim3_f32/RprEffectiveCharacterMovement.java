// Generated by jextract

package rapier.sys_dim3_f32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct RprEffectiveCharacterMovement {
 *     struct RprVector translation;
 *     _Bool grounded;
 * };
 * }
 */
public class RprEffectiveCharacterMovement {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y"),
            Constants$root.C_FLOAT$LAYOUT.withName("z")
        ).withName("translation"),
        Constants$root.C_BOOL$LAYOUT.withName("grounded"),
        MemoryLayout.paddingLayout(24)
    ).withName("RprEffectiveCharacterMovement");
    public static MemoryLayout $LAYOUT() {
        return RprEffectiveCharacterMovement.$struct$LAYOUT;
    }
    public static MemorySegment translation$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    static final VarHandle grounded$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("grounded"));
    public static VarHandle grounded$VH() {
        return RprEffectiveCharacterMovement.grounded$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool grounded;
     * }
     */
    public static boolean grounded$get(MemorySegment seg) {
        return (boolean)RprEffectiveCharacterMovement.grounded$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool grounded;
     * }
     */
    public static void grounded$set(MemorySegment seg, boolean x) {
        RprEffectiveCharacterMovement.grounded$VH.set(seg, x);
    }
    public static boolean grounded$get(MemorySegment seg, long index) {
        return (boolean)RprEffectiveCharacterMovement.grounded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grounded$set(MemorySegment seg, long index, boolean x) {
        RprEffectiveCharacterMovement.grounded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


