// Generated by jextract

package rapier.sys_dim3_f32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct RprSpacialVector {
 *     float x;
 *     float y;
 *     float z;
 *     float w;
 *     float a;
 *     float b;
 * };
 * }
 */
public class RprSpacialVector {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_FLOAT$LAYOUT.withName("x"),
        Constants$root.C_FLOAT$LAYOUT.withName("y"),
        Constants$root.C_FLOAT$LAYOUT.withName("z"),
        Constants$root.C_FLOAT$LAYOUT.withName("w"),
        Constants$root.C_FLOAT$LAYOUT.withName("a"),
        Constants$root.C_FLOAT$LAYOUT.withName("b")
    ).withName("RprSpacialVector");
    public static MemoryLayout $LAYOUT() {
        return RprSpacialVector.$struct$LAYOUT;
    }
    static final VarHandle x$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x"));
    public static VarHandle x$VH() {
        return RprSpacialVector.x$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float x;
     * }
     */
    public static float x$get(MemorySegment seg) {
        return (float)RprSpacialVector.x$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float x;
     * }
     */
    public static void x$set(MemorySegment seg, float x) {
        RprSpacialVector.x$VH.set(seg, x);
    }
    public static float x$get(MemorySegment seg, long index) {
        return (float)RprSpacialVector.x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, float x) {
        RprSpacialVector.x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("y"));
    public static VarHandle y$VH() {
        return RprSpacialVector.y$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float y;
     * }
     */
    public static float y$get(MemorySegment seg) {
        return (float)RprSpacialVector.y$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float y;
     * }
     */
    public static void y$set(MemorySegment seg, float x) {
        RprSpacialVector.y$VH.set(seg, x);
    }
    public static float y$get(MemorySegment seg, long index) {
        return (float)RprSpacialVector.y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, float x) {
        RprSpacialVector.y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle z$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("z"));
    public static VarHandle z$VH() {
        return RprSpacialVector.z$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float z;
     * }
     */
    public static float z$get(MemorySegment seg) {
        return (float)RprSpacialVector.z$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float z;
     * }
     */
    public static void z$set(MemorySegment seg, float x) {
        RprSpacialVector.z$VH.set(seg, x);
    }
    public static float z$get(MemorySegment seg, long index) {
        return (float)RprSpacialVector.z$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void z$set(MemorySegment seg, long index, float x) {
        RprSpacialVector.z$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle w$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("w"));
    public static VarHandle w$VH() {
        return RprSpacialVector.w$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float w;
     * }
     */
    public static float w$get(MemorySegment seg) {
        return (float)RprSpacialVector.w$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float w;
     * }
     */
    public static void w$set(MemorySegment seg, float x) {
        RprSpacialVector.w$VH.set(seg, x);
    }
    public static float w$get(MemorySegment seg, long index) {
        return (float)RprSpacialVector.w$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void w$set(MemorySegment seg, long index, float x) {
        RprSpacialVector.w$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle a$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("a"));
    public static VarHandle a$VH() {
        return RprSpacialVector.a$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float a;
     * }
     */
    public static float a$get(MemorySegment seg) {
        return (float)RprSpacialVector.a$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float a;
     * }
     */
    public static void a$set(MemorySegment seg, float x) {
        RprSpacialVector.a$VH.set(seg, x);
    }
    public static float a$get(MemorySegment seg, long index) {
        return (float)RprSpacialVector.a$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void a$set(MemorySegment seg, long index, float x) {
        RprSpacialVector.a$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle b$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("b"));
    public static VarHandle b$VH() {
        return RprSpacialVector.b$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float b;
     * }
     */
    public static float b$get(MemorySegment seg) {
        return (float)RprSpacialVector.b$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float b;
     * }
     */
    public static void b$set(MemorySegment seg, float x) {
        RprSpacialVector.b$VH.set(seg, x);
    }
    public static float b$get(MemorySegment seg, long index) {
        return (float)RprSpacialVector.b$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void b$set(MemorySegment seg, long index, float x) {
        RprSpacialVector.b$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


