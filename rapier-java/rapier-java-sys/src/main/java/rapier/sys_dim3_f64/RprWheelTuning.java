// Generated by jextract

package rapier.sys_dim3_f64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct RprWheelTuning {
 *     double suspension_stiffness;
 *     double suspension_compression;
 *     double suspension_damping;
 *     double max_suspension_travel;
 *     double friction_slip;
 *     double max_suspension_force;
 * };
 * }
 */
public class RprWheelTuning {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_DOUBLE$LAYOUT.withName("suspension_stiffness"),
        Constants$root.C_DOUBLE$LAYOUT.withName("suspension_compression"),
        Constants$root.C_DOUBLE$LAYOUT.withName("suspension_damping"),
        Constants$root.C_DOUBLE$LAYOUT.withName("max_suspension_travel"),
        Constants$root.C_DOUBLE$LAYOUT.withName("friction_slip"),
        Constants$root.C_DOUBLE$LAYOUT.withName("max_suspension_force")
    ).withName("RprWheelTuning");
    public static MemoryLayout $LAYOUT() {
        return RprWheelTuning.$struct$LAYOUT;
    }
    static final VarHandle suspension_stiffness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("suspension_stiffness"));
    public static VarHandle suspension_stiffness$VH() {
        return RprWheelTuning.suspension_stiffness$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double suspension_stiffness;
     * }
     */
    public static double suspension_stiffness$get(MemorySegment seg) {
        return (double)RprWheelTuning.suspension_stiffness$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double suspension_stiffness;
     * }
     */
    public static void suspension_stiffness$set(MemorySegment seg, double x) {
        RprWheelTuning.suspension_stiffness$VH.set(seg, x);
    }
    public static double suspension_stiffness$get(MemorySegment seg, long index) {
        return (double)RprWheelTuning.suspension_stiffness$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void suspension_stiffness$set(MemorySegment seg, long index, double x) {
        RprWheelTuning.suspension_stiffness$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle suspension_compression$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("suspension_compression"));
    public static VarHandle suspension_compression$VH() {
        return RprWheelTuning.suspension_compression$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double suspension_compression;
     * }
     */
    public static double suspension_compression$get(MemorySegment seg) {
        return (double)RprWheelTuning.suspension_compression$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double suspension_compression;
     * }
     */
    public static void suspension_compression$set(MemorySegment seg, double x) {
        RprWheelTuning.suspension_compression$VH.set(seg, x);
    }
    public static double suspension_compression$get(MemorySegment seg, long index) {
        return (double)RprWheelTuning.suspension_compression$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void suspension_compression$set(MemorySegment seg, long index, double x) {
        RprWheelTuning.suspension_compression$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle suspension_damping$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("suspension_damping"));
    public static VarHandle suspension_damping$VH() {
        return RprWheelTuning.suspension_damping$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double suspension_damping;
     * }
     */
    public static double suspension_damping$get(MemorySegment seg) {
        return (double)RprWheelTuning.suspension_damping$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double suspension_damping;
     * }
     */
    public static void suspension_damping$set(MemorySegment seg, double x) {
        RprWheelTuning.suspension_damping$VH.set(seg, x);
    }
    public static double suspension_damping$get(MemorySegment seg, long index) {
        return (double)RprWheelTuning.suspension_damping$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void suspension_damping$set(MemorySegment seg, long index, double x) {
        RprWheelTuning.suspension_damping$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_suspension_travel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_suspension_travel"));
    public static VarHandle max_suspension_travel$VH() {
        return RprWheelTuning.max_suspension_travel$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double max_suspension_travel;
     * }
     */
    public static double max_suspension_travel$get(MemorySegment seg) {
        return (double)RprWheelTuning.max_suspension_travel$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double max_suspension_travel;
     * }
     */
    public static void max_suspension_travel$set(MemorySegment seg, double x) {
        RprWheelTuning.max_suspension_travel$VH.set(seg, x);
    }
    public static double max_suspension_travel$get(MemorySegment seg, long index) {
        return (double)RprWheelTuning.max_suspension_travel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_suspension_travel$set(MemorySegment seg, long index, double x) {
        RprWheelTuning.max_suspension_travel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle friction_slip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("friction_slip"));
    public static VarHandle friction_slip$VH() {
        return RprWheelTuning.friction_slip$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double friction_slip;
     * }
     */
    public static double friction_slip$get(MemorySegment seg) {
        return (double)RprWheelTuning.friction_slip$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double friction_slip;
     * }
     */
    public static void friction_slip$set(MemorySegment seg, double x) {
        RprWheelTuning.friction_slip$VH.set(seg, x);
    }
    public static double friction_slip$get(MemorySegment seg, long index) {
        return (double)RprWheelTuning.friction_slip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void friction_slip$set(MemorySegment seg, long index, double x) {
        RprWheelTuning.friction_slip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_suspension_force$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_suspension_force"));
    public static VarHandle max_suspension_force$VH() {
        return RprWheelTuning.max_suspension_force$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double max_suspension_force;
     * }
     */
    public static double max_suspension_force$get(MemorySegment seg) {
        return (double)RprWheelTuning.max_suspension_force$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double max_suspension_force;
     * }
     */
    public static void max_suspension_force$set(MemorySegment seg, double x) {
        RprWheelTuning.max_suspension_force$VH.set(seg, x);
    }
    public static double max_suspension_force$get(MemorySegment seg, long index) {
        return (double)RprWheelTuning.max_suspension_force$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_suspension_force$set(MemorySegment seg, long index, double x) {
        RprWheelTuning.max_suspension_force$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


