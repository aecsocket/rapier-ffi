// Generated by jextract

package rapier.sys_dim2;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class RprCompoundChild {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_FLOAT$LAYOUT.withName("re"),
                Constants$root.C_FLOAT$LAYOUT.withName("im")
            ).withName("rotation"),
            MemoryLayout.structLayout(
                Constants$root.C_FLOAT$LAYOUT.withName("x"),
                Constants$root.C_FLOAT$LAYOUT.withName("y")
            ).withName("translation")
        ).withName("delta"),
        Constants$root.C_POINTER$LAYOUT.withName("shape")
    ).withName("RprCompoundChild");
    public static MemoryLayout $LAYOUT() {
        return RprCompoundChild.$struct$LAYOUT;
    }
    public static MemorySegment delta$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final VarHandle shape$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("shape"));
    public static VarHandle shape$VH() {
        return RprCompoundChild.shape$VH;
    }
    public static MemoryAddress shape$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)RprCompoundChild.shape$VH.get(seg);
    }
    public static void shape$set( MemorySegment seg, MemoryAddress x) {
        RprCompoundChild.shape$VH.set(seg, x);
    }
    public static MemoryAddress shape$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)RprCompoundChild.shape$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shape$set(MemorySegment seg, long index, MemoryAddress x) {
        RprCompoundChild.shape$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


