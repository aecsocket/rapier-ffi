// Generated by jextract

package rapier.sys_dim2;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class RprTOI {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_FLOAT$LAYOUT.withName("toi"),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y")
        ).withName("witness1"),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y")
        ).withName("witness2"),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y")
        ).withName("normal1"),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y")
        ).withName("normal2"),
        Constants$root.C_INT$LAYOUT.withName("status")
    ).withName("RprTOI");
    public static MemoryLayout $LAYOUT() {
        return RprTOI.$struct$LAYOUT;
    }
    static final VarHandle toi$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("toi"));
    public static VarHandle toi$VH() {
        return RprTOI.toi$VH;
    }
    public static float toi$get(MemorySegment seg) {
        return (float)RprTOI.toi$VH.get(seg);
    }
    public static void toi$set( MemorySegment seg, float x) {
        RprTOI.toi$VH.set(seg, x);
    }
    public static float toi$get(MemorySegment seg, long index) {
        return (float)RprTOI.toi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void toi$set(MemorySegment seg, long index, float x) {
        RprTOI.toi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment witness1$slice(MemorySegment seg) {
        return seg.asSlice(4, 8);
    }
    public static MemorySegment witness2$slice(MemorySegment seg) {
        return seg.asSlice(12, 8);
    }
    public static MemorySegment normal1$slice(MemorySegment seg) {
        return seg.asSlice(20, 8);
    }
    public static MemorySegment normal2$slice(MemorySegment seg) {
        return seg.asSlice(28, 8);
    }
    static final VarHandle status$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("status"));
    public static VarHandle status$VH() {
        return RprTOI.status$VH;
    }
    public static int status$get(MemorySegment seg) {
        return (int)RprTOI.status$VH.get(seg);
    }
    public static void status$set( MemorySegment seg, int x) {
        RprTOI.status$VH.set(seg, x);
    }
    public static int status$get(MemorySegment seg, long index) {
        return (int)RprTOI.status$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void status$set(MemorySegment seg, long index, int x) {
        RprTOI.status$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


