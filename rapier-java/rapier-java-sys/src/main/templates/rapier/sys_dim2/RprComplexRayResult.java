// Generated by jextract

package rapier.sys_dim2;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct RprComplexRayResult {
 *     struct RprArenaKey collider;
 *     float toi;
 *     struct RprVector normal;
 *     struct RprFeatureId feature;
 * };
 * }
 */
public class RprComplexRayResult {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("index"),
            Constants$root.C_INT$LAYOUT.withName("generation")
        ).withName("collider"),
        Constants$root.C_FLOAT$LAYOUT.withName("toi"),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y")
        ).withName("normal"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("tag"),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("id")
                ).withName("vertex"),
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("id")
                ).withName("face")
            ).withName("union (anonymous at /home/socket/Projects/rapier-ffi/rapier-java/rapier-java-sys/build/librapier.h:1142:3)")
        ).withName("feature")
    ).withName("RprComplexRayResult");
    public static MemoryLayout $LAYOUT() {
        return RprComplexRayResult.$struct$LAYOUT;
    }
    public static MemorySegment collider$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle toi$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("toi"));
    public static VarHandle toi$VH() {
        return RprComplexRayResult.toi$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float toi;
     * }
     */
    public static float toi$get(MemorySegment seg) {
        return (float)RprComplexRayResult.toi$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float toi;
     * }
     */
    public static void toi$set(MemorySegment seg, float x) {
        RprComplexRayResult.toi$VH.set(seg, x);
    }
    public static float toi$get(MemorySegment seg, long index) {
        return (float)RprComplexRayResult.toi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void toi$set(MemorySegment seg, long index, float x) {
        RprComplexRayResult.toi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment normal$slice(MemorySegment seg) {
        return seg.asSlice(12, 8);
    }
    public static MemorySegment feature$slice(MemorySegment seg) {
        return seg.asSlice(20, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


