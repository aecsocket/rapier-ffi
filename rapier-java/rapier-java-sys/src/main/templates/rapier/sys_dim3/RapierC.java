// Generated by jextract

package rapier.sys_dim3;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class RapierC  {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_C2X_STRTOL 0
     * }
     */
    public static int __GLIBC_USE_C2X_STRTOL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_MINOR__ 38
     * }
     */
    public static int __GLIBC_MINOR__() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDLIB_H 1
     * }
     */
    public static int _STDLIB_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WNOHANG 1
     * }
     */
    public static int WNOHANG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WUNTRACED 2
     * }
     */
    public static int WUNTRACED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WSTOPPED 2
     * }
     */
    public static int WSTOPPED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WEXITED 4
     * }
     */
    public static int WEXITED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define WCONTINUED 8
     * }
     */
    public static int WCONTINUED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define WNOWAIT 16777216
     * }
     */
    public static int WNOWAIT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * #define __WNOTHREAD 536870912
     * }
     */
    public static int __WNOTHREAD() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * #define __WALL 1073741824
     * }
     */
    public static int __WALL() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define __W_CONTINUED 65535
     * }
     */
    public static int __W_CONTINUED() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define __WCOREFLAG 128
     * }
     */
    public static int __WCOREFLAG() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128 0
     * }
     */
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __ldiv_t_defined 1
     * }
     */
    public static int __ldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __lldiv_t_defined 1
     * }
     */
    public static int __lldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RAND_MAX 2147483647
     * }
     */
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define EXIT_FAILURE 1
     * }
     */
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EXIT_SUCCESS 0
     * }
     */
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _SYS_TYPES_H 1
     * }
     */
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clock_t_defined 1
     * }
     */
    public static int __clock_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clockid_t_defined 1
     * }
     */
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timer_t_defined 1
     * }
     */
    public static int __timer_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __BIT_TYPES_DEFINED__ 1
     * }
     */
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ENDIAN_H 1
     * }
     */
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_BYTESWAP_H 1
     * }
     */
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_UINTN_IDENTITY_H 1
     * }
     */
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_COMMON_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _THREAD_SHARED_TYPES_H 1
     * }
     */
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_ARCH_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEX_T 40
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_ATTR_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCK_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIER_T 32
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_COND_T 48
     * }
     */
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_CONDATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _THREAD_MUTEX_INTERNAL_H 1
     * }
     */
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_HAVE_PREV 1
     * }
     */
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __have_pthread_attr_t 1
     * }
     */
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ALLOCA_H 1
     * }
     */
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RprActiveCollisionTypes_DYNAMIC_DYNAMIC 1
     * }
     */
    public static int RprActiveCollisionTypes_DYNAMIC_DYNAMIC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RprActiveCollisionTypes_DYNAMIC_FIXED 2
     * }
     */
    public static int RprActiveCollisionTypes_DYNAMIC_FIXED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RprActiveCollisionTypes_DYNAMIC_KINEMATIC 12
     * }
     */
    public static int RprActiveCollisionTypes_DYNAMIC_KINEMATIC() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define RprActiveCollisionTypes_FIXED_FIXED 32
     * }
     */
    public static int RprActiveCollisionTypes_FIXED_FIXED() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define RprActiveCollisionTypes_KINEMATIC_FIXED 8704
     * }
     */
    public static int RprActiveCollisionTypes_KINEMATIC_FIXED() {
        return (int)8704L;
    }
    /**
     * {@snippet :
     * #define RprActiveCollisionTypes_KINEMATIC_KINEMATIC 52224
     * }
     */
    public static int RprActiveCollisionTypes_KINEMATIC_KINEMATIC() {
        return (int)52224L;
    }
    /**
     * {@snippet :
     * #define RprActiveEvents_COLLISION_EVENTS 1
     * }
     */
    public static int RprActiveEvents_COLLISION_EVENTS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RprActiveEvents_CONTACT_FORCE_EVENTS 2
     * }
     */
    public static int RprActiveEvents_CONTACT_FORCE_EVENTS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RprActiveHooks_FILTER_CONTACT_PAIRS 1
     * }
     */
    public static int RprActiveHooks_FILTER_CONTACT_PAIRS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RprActiveHooks_FILTER_INTERSECTION_PAIR 2
     * }
     */
    public static int RprActiveHooks_FILTER_INTERSECTION_PAIR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RprActiveHooks_MODIFY_SOLVER_CONTACTS 4
     * }
     */
    public static int RprActiveHooks_MODIFY_SOLVER_CONTACTS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_ANG_X 8
     * }
     */
    public static int RprJointAxesMask_ANG_X() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_ANG_Y 16
     * }
     */
    public static int RprJointAxesMask_ANG_Y() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_ANG_Z 32
     * }
     */
    public static int RprJointAxesMask_ANG_Z() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_FREE_FIXED_AXES 0
     * }
     */
    public static int RprJointAxesMask_FREE_FIXED_AXES() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_X 1
     * }
     */
    public static int RprJointAxesMask_X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_Y 2
     * }
     */
    public static int RprJointAxesMask_Y() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_Z 4
     * }
     */
    public static int RprJointAxesMask_Z() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RprTriMeshFlags_CONNECTED_COMPONENTS 2
     * }
     */
    public static int RprTriMeshFlags_CONNECTED_COMPONENTS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RprTriMeshFlags_DELETE_BAD_TOPOLOGY_TRIANGLES 4
     * }
     */
    public static int RprTriMeshFlags_DELETE_BAD_TOPOLOGY_TRIANGLES() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RprTriMeshFlags_DELETE_DEGENERATE_TRIANGLES 32
     * }
     */
    public static int RprTriMeshFlags_DELETE_DEGENERATE_TRIANGLES() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define RprTriMeshFlags_DELETE_DUPLICATE_TRIANGLES 64
     * }
     */
    public static int RprTriMeshFlags_DELETE_DUPLICATE_TRIANGLES() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define RprTriMeshFlags_HALF_EDGE_TOPOLOGY 1
     * }
     */
    public static int RprTriMeshFlags_HALF_EDGE_TOPOLOGY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RprTriMeshFlags_MERGE_DUPLICATE_VERTICES 16
     * }
     */
    public static int RprTriMeshFlags_MERGE_DUPLICATE_VERTICES() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define RprTriMeshFlags_ORIENTED 8
     * }
     */
    public static int RprTriMeshFlags_ORIENTED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define RprCollisionEventFlags_REMOVED 2
     * }
     */
    public static int RprCollisionEventFlags_REMOVED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RprCollisionEventFlags_SENSOR 1
     * }
     */
    public static int RprCollisionEventFlags_SENSOR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RprSolverFlags_COMPUTE_IMPULSES 1
     * }
     */
    public static int RprSolverFlags_COMPUTE_IMPULSES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __u_char;
     * }
     */
    public static final OfByte __u_char = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __u_short;
     * }
     */
    public static final OfShort __u_short = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __u_int;
     * }
     */
    public static final OfInt __u_int = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __u_long;
     * }
     */
    public static final OfLong __u_long = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __int64_t;
     * }
     */
    public static final OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char __int_least8_t;
     * }
     */
    public static final OfByte __int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __uint_least8_t;
     * }
     */
    public static final OfByte __uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short __int_least16_t;
     * }
     */
    public static final OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __uint_least16_t;
     * }
     */
    public static final OfShort __uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __int_least32_t;
     * }
     */
    public static final OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uint_least32_t;
     * }
     */
    public static final OfInt __uint_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __int_least64_t;
     * }
     */
    public static final OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uint_least64_t;
     * }
     */
    public static final OfLong __uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __quad_t;
     * }
     */
    public static final OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __u_quad_t;
     * }
     */
    public static final OfLong __u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __intmax_t;
     * }
     */
    public static final OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uintmax_t;
     * }
     */
    public static final OfLong __uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __dev_t;
     * }
     */
    public static final OfLong __dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uid_t;
     * }
     */
    public static final OfInt __uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __gid_t;
     * }
     */
    public static final OfInt __gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __ino_t;
     * }
     */
    public static final OfLong __ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __ino64_t;
     * }
     */
    public static final OfLong __ino64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __mode_t;
     * }
     */
    public static final OfInt __mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __nlink_t;
     * }
     */
    public static final OfLong __nlink_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __off_t;
     * }
     */
    public static final OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __off64_t;
     * }
     */
    public static final OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __pid_t;
     * }
     */
    public static final OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __clock_t;
     * }
     */
    public static final OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __rlim_t;
     * }
     */
    public static final OfLong __rlim_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __rlim64_t;
     * }
     */
    public static final OfLong __rlim64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __id_t;
     * }
     */
    public static final OfInt __id_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __time_t;
     * }
     */
    public static final OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __useconds_t;
     * }
     */
    public static final OfInt __useconds_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __suseconds_t;
     * }
     */
    public static final OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __suseconds64_t;
     * }
     */
    public static final OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __daddr_t;
     * }
     */
    public static final OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __key_t;
     * }
     */
    public static final OfInt __key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __clockid_t;
     * }
     */
    public static final OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef void* __timer_t;
     * }
     */
    public static final OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blksize_t;
     * }
     */
    public static final OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blkcnt_t;
     * }
     */
    public static final OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blkcnt64_t;
     * }
     */
    public static final OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt_t;
     * }
     */
    public static final OfLong __fsblkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt64_t;
     * }
     */
    public static final OfLong __fsblkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt_t;
     * }
     */
    public static final OfLong __fsfilcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt64_t;
     * }
     */
    public static final OfLong __fsfilcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __fsword_t;
     * }
     */
    public static final OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __ssize_t;
     * }
     */
    public static final OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __syscall_slong_t;
     * }
     */
    public static final OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __syscall_ulong_t;
     * }
     */
    public static final OfLong __syscall_ulong_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __loff_t;
     * }
     */
    public static final OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef char* __caddr_t;
     * }
     */
    public static final OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long __intptr_t;
     * }
     */
    public static final OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __socklen_t;
     * }
     */
    public static final OfInt __socklen_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __sig_atomic_t;
     * }
     */
    public static final OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint64_t;
     * }
     */
    public static final OfLong uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast16_t;
     * }
     */
    public static final OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast32_t;
     * }
     */
    public static final OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast16_t;
     * }
     */
    public static final OfLong uint_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast32_t;
     * }
     */
    public static final OfLong uint_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef float _Float32;
     * }
     */
    public static final OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * typedef double _Float64;
     * }
     */
    public static final OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    /**
     * {@snippet :
     * typedef double _Float32x;
     * }
     */
    public static final OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    /**
     * {@snippet :
     * unsigned long __ctype_get_mb_cur_max();
     * }
     */
    public static long __ctype_get_mb_cur_max() {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atof$MH,"atof");
    }
    /**
     * {@snippet :
     * double atof(char* __nptr);
     * }
     */
    public static double atof(MemorySegment __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atoi$MH,"atoi");
    }
    /**
     * {@snippet :
     * int atoi(char* __nptr);
     * }
     */
    public static int atoi(MemorySegment __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atol$MH,"atol");
    }
    /**
     * {@snippet :
     * long atol(char* __nptr);
     * }
     */
    public static long atol(MemorySegment __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atoll$MH,"atoll");
    }
    /**
     * {@snippet :
     * long long atoll(char* __nptr);
     * }
     */
    public static long atoll(MemorySegment __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strtod$MH,"strtod");
    }
    /**
     * {@snippet :
     * double strtod(char* __nptr, char** __endptr);
     * }
     */
    public static double strtod(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtof$MH,"strtof");
    }
    /**
     * {@snippet :
     * float strtof(char* __nptr, char** __endptr);
     * }
     */
    public static float strtof(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtol$MH,"strtol");
    }
    /**
     * {@snippet :
     * long strtol(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtol(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoul$MH,"strtoul");
    }
    /**
     * {@snippet :
     * unsigned long strtoul(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoul(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoq$MH,"strtoq");
    }
    /**
     * {@snippet :
     * long long strtoq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtouq$MH,"strtouq");
    }
    /**
     * {@snippet :
     * unsigned long long strtouq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtouq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoll$MH,"strtoll");
    }
    /**
     * {@snippet :
     * long long strtoll(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoll(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strtoull$MH,"strtoull");
    }
    /**
     * {@snippet :
     * unsigned long long strtoull(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoull(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$2.l64a$MH,"l64a");
    }
    /**
     * {@snippet :
     * char* l64a(long __n);
     * }
     */
    public static MemorySegment l64a(long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$2.a64l$MH,"a64l");
    }
    /**
     * {@snippet :
     * long a64l(char* __s);
     * }
     */
    public static long a64l(MemorySegment __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfLong u_long = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long quad_t;
     * }
     */
    public static final OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_quad_t;
     * }
     */
    public static final OfLong u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long loff_t;
     * }
     */
    public static final OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ino_t;
     * }
     */
    public static final OfLong ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long dev_t;
     * }
     */
    public static final OfLong dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int mode_t;
     * }
     */
    public static final OfInt mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long nlink_t;
     * }
     */
    public static final OfLong nlink_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int id_t;
     * }
     */
    public static final OfInt id_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int daddr_t;
     * }
     */
    public static final OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef char* caddr_t;
     * }
     */
    public static final OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int key_t;
     * }
     */
    public static final OfInt key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long clock_t;
     * }
     */
    public static final OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int clockid_t;
     * }
     */
    public static final OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef void* timer_t;
     * }
     */
    public static final OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ulong;
     * }
     */
    public static final OfLong ulong = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short ushort;
     * }
     */
    public static final OfShort ushort = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint;
     * }
     */
    public static final OfInt uint = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long register_t;
     * }
     */
    public static final OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long suseconds_t;
     * }
     */
    public static final OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __fd_mask;
     * }
     */
    public static final OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long fd_mask;
     * }
     */
    public static final OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$2.select$MH,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, struct fd_set* __readfds, struct fd_set* __writefds, struct fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$2.pselect$MH,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int __nfds, struct fd_set* __readfds, struct fd_set* __writefds, struct fd_set* __exceptfds, struct timespec* __timeout, struct __sigset_t* __sigmask);
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long blksize_t;
     * }
     */
    public static final OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt_t;
     * }
     */
    public static final OfLong fsblkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt_t;
     * }
     */
    public static final OfLong fsfilcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __tss_t;
     * }
     */
    public static final OfInt __tss_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __thrd_t;
     * }
     */
    public static final OfLong __thrd_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long pthread_t;
     * }
     */
    public static final OfLong pthread_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int pthread_key_t;
     * }
     */
    public static final OfInt pthread_key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_once_t;
     * }
     */
    public static final OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_spinlock_t;
     * }
     */
    public static final OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$2.random$MH,"random");
    }
    /**
     * {@snippet :
     * long random();
     * }
     */
    public static long random() {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$3.srandom$MH,"srandom");
    }
    /**
     * {@snippet :
     * void srandom(unsigned int __seed);
     * }
     */
    public static void srandom(int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$3.initstate$MH,"initstate");
    }
    /**
     * {@snippet :
     * char* initstate(unsigned int __seed, char* __statebuf, unsigned long __statelen);
     * }
     */
    public static MemorySegment initstate(int __seed, MemorySegment __statebuf, long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$3.setstate$MH,"setstate");
    }
    /**
     * {@snippet :
     * char* setstate(char* __statebuf);
     * }
     */
    public static MemorySegment setstate(MemorySegment __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$3.random_r$MH,"random_r");
    }
    /**
     * {@snippet :
     * int random_r(struct random_data* __buf, int* __result);
     * }
     */
    public static int random_r(MemorySegment __buf, MemorySegment __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$3.srandom_r$MH,"srandom_r");
    }
    /**
     * {@snippet :
     * int srandom_r(unsigned int __seed, struct random_data* __buf);
     * }
     */
    public static int srandom_r(int __seed, MemorySegment __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$3.initstate_r$MH,"initstate_r");
    }
    /**
     * {@snippet :
     * int initstate_r(unsigned int __seed, char* __statebuf, unsigned long __statelen, struct random_data* __buf);
     * }
     */
    public static int initstate_r(int __seed, MemorySegment __statebuf, long __statelen, MemorySegment __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setstate_r$MH,"setstate_r");
    }
    /**
     * {@snippet :
     * int setstate_r(char* __statebuf, struct random_data* __buf);
     * }
     */
    public static int setstate_r(MemorySegment __statebuf, MemorySegment __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$4.rand$MH,"rand");
    }
    /**
     * {@snippet :
     * int rand();
     * }
     */
    public static int rand() {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$4.srand$MH,"srand");
    }
    /**
     * {@snippet :
     * void srand(unsigned int __seed);
     * }
     */
    public static void srand(int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.rand_r$MH,"rand_r");
    }
    /**
     * {@snippet :
     * int rand_r(unsigned int* __seed);
     * }
     */
    public static int rand_r(MemorySegment __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$4.drand48$MH,"drand48");
    }
    /**
     * {@snippet :
     * double drand48();
     * }
     */
    public static double drand48() {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$4.erand48$MH,"erand48");
    }
    /**
     * {@snippet :
     * double erand48(unsigned short __xsubi[3]);
     * }
     */
    public static double erand48(MemorySegment __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lrand48$MH,"lrand48");
    }
    /**
     * {@snippet :
     * long lrand48();
     * }
     */
    public static long lrand48() {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.nrand48$MH,"nrand48");
    }
    /**
     * {@snippet :
     * long nrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long nrand48(MemorySegment __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mrand48$MH,"mrand48");
    }
    /**
     * {@snippet :
     * long mrand48();
     * }
     */
    public static long mrand48() {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.jrand48$MH,"jrand48");
    }
    /**
     * {@snippet :
     * long jrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long jrand48(MemorySegment __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.srand48$MH,"srand48");
    }
    /**
     * {@snippet :
     * void srand48(long __seedval);
     * }
     */
    public static void srand48(long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.seed48$MH,"seed48");
    }
    /**
     * {@snippet :
     * unsigned short* seed48(unsigned short __seed16v[3]);
     * }
     */
    public static MemorySegment seed48(MemorySegment __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lcong48$MH,"lcong48");
    }
    /**
     * {@snippet :
     * void lcong48(unsigned short __param[7]);
     * }
     */
    public static void lcong48(MemorySegment __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.drand48_r$MH,"drand48_r");
    }
    /**
     * {@snippet :
     * int drand48_r(struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int drand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.erand48_r$MH,"erand48_r");
    }
    /**
     * {@snippet :
     * int erand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int erand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lrand48_r$MH,"lrand48_r");
    }
    /**
     * {@snippet :
     * int lrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int lrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.nrand48_r$MH,"nrand48_r");
    }
    /**
     * {@snippet :
     * int nrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int nrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mrand48_r$MH,"mrand48_r");
    }
    /**
     * {@snippet :
     * int mrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int mrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.jrand48_r$MH,"jrand48_r");
    }
    /**
     * {@snippet :
     * int jrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int jrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.srand48_r$MH,"srand48_r");
    }
    /**
     * {@snippet :
     * int srand48_r(long __seedval, struct drand48_data* __buffer);
     * }
     */
    public static int srand48_r(long __seedval, MemorySegment __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.seed48_r$MH,"seed48_r");
    }
    /**
     * {@snippet :
     * int seed48_r(unsigned short __seed16v[3], struct drand48_data* __buffer);
     * }
     */
    public static int seed48_r(MemorySegment __seed16v, MemorySegment __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lcong48_r$MH,"lcong48_r");
    }
    /**
     * {@snippet :
     * int lcong48_r(unsigned short __param[7], struct drand48_data* __buffer);
     * }
     */
    public static int lcong48_r(MemorySegment __param, MemorySegment __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random$MH() {
        return RuntimeHelper.requireNonNull(constants$7.arc4random$MH,"arc4random");
    }
    /**
     * {@snippet :
     * unsigned int arc4random();
     * }
     */
    public static int arc4random() {
        var mh$ = arc4random$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.arc4random_buf$MH,"arc4random_buf");
    }
    /**
     * {@snippet :
     * void arc4random_buf(void* __buf, unsigned long __size);
     * }
     */
    public static void arc4random_buf(MemorySegment __buf, long __size) {
        var mh$ = arc4random_buf$MH();
        try {
            mh$.invokeExact(__buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_uniform$MH() {
        return RuntimeHelper.requireNonNull(constants$8.arc4random_uniform$MH,"arc4random_uniform");
    }
    /**
     * {@snippet :
     * unsigned int arc4random_uniform(unsigned int __upper_bound);
     * }
     */
    public static int arc4random_uniform(int __upper_bound) {
        var mh$ = arc4random_uniform$MH();
        try {
            return (int)mh$.invokeExact(__upper_bound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.malloc$MH,"malloc");
    }
    /**
     * {@snippet :
     * void* malloc(unsigned long __size);
     * }
     */
    public static MemorySegment malloc(long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.calloc$MH,"calloc");
    }
    /**
     * {@snippet :
     * void* calloc(unsigned long __nmemb, unsigned long __size);
     * }
     */
    public static MemorySegment calloc(long __nmemb, long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.realloc$MH,"realloc");
    }
    /**
     * {@snippet :
     * void* realloc(void* __ptr, unsigned long __size);
     * }
     */
    public static MemorySegment realloc(MemorySegment __ptr, long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$8.free$MH,"free");
    }
    /**
     * {@snippet :
     * void free(void* __ptr);
     * }
     */
    public static void free(MemorySegment __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$8.reallocarray$MH,"reallocarray");
    }
    /**
     * {@snippet :
     * void* reallocarray(void* __ptr, unsigned long __nmemb, unsigned long __size);
     * }
     */
    public static MemorySegment reallocarray(MemorySegment __ptr, long __nmemb, long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$9.alloca$MH,"alloca");
    }
    /**
     * {@snippet :
     * void* alloca(unsigned long __size);
     * }
     */
    public static MemorySegment alloca(long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.valloc$MH,"valloc");
    }
    /**
     * {@snippet :
     * void* valloc(unsigned long __size);
     * }
     */
    public static MemorySegment valloc(long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$9.posix_memalign$MH,"posix_memalign");
    }
    /**
     * {@snippet :
     * int posix_memalign(void** __memptr, unsigned long __alignment, unsigned long __size);
     * }
     */
    public static int posix_memalign(MemorySegment __memptr, long __alignment, long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.aligned_alloc$MH,"aligned_alloc");
    }
    /**
     * {@snippet :
     * void* aligned_alloc(unsigned long __alignment, unsigned long __size);
     * }
     */
    public static MemorySegment aligned_alloc(long __alignment, long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$9.abort$MH,"abort");
    }
    /**
     * {@snippet :
     * void abort();
     * }
     */
    public static void abort() {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$10.atexit$MH,"atexit");
    }
    /**
     * {@snippet :
     * int atexit(void (*__func)());
     * }
     */
    public static int atexit(MemorySegment __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$10.at_quick_exit$MH,"at_quick_exit");
    }
    /**
     * {@snippet :
     * int at_quick_exit(void (*__func)());
     * }
     */
    public static int at_quick_exit(MemorySegment __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$11.on_exit$MH,"on_exit");
    }
    /**
     * {@snippet :
     * int on_exit(void (*__func)(int,void*), void* __arg);
     * }
     */
    public static int on_exit(MemorySegment __func, MemorySegment __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$11.exit$MH,"exit");
    }
    /**
     * {@snippet :
     * void exit(int __status);
     * }
     */
    public static void exit(int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$11.quick_exit$MH,"quick_exit");
    }
    /**
     * {@snippet :
     * void quick_exit(int __status);
     * }
     */
    public static void quick_exit(int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$11._Exit$MH,"_Exit");
    }
    /**
     * {@snippet :
     * void _Exit(int __status);
     * }
     */
    public static void _Exit(int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$11.getenv$MH,"getenv");
    }
    /**
     * {@snippet :
     * char* getenv(char* __name);
     * }
     */
    public static MemorySegment getenv(MemorySegment __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$12.putenv$MH,"putenv");
    }
    /**
     * {@snippet :
     * int putenv(char* __string);
     * }
     */
    public static int putenv(MemorySegment __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$12.setenv$MH,"setenv");
    }
    /**
     * {@snippet :
     * int setenv(char* __name, char* __value, int __replace);
     * }
     */
    public static int setenv(MemorySegment __name, MemorySegment __value, int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$12.unsetenv$MH,"unsetenv");
    }
    /**
     * {@snippet :
     * int unsetenv(char* __name);
     * }
     */
    public static int unsetenv(MemorySegment __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$12.clearenv$MH,"clearenv");
    }
    /**
     * {@snippet :
     * int clearenv();
     * }
     */
    public static int clearenv() {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mktemp$MH,"mktemp");
    }
    /**
     * {@snippet :
     * char* mktemp(char* __template);
     * }
     */
    public static MemorySegment mktemp(MemorySegment __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mkstemp$MH,"mkstemp");
    }
    /**
     * {@snippet :
     * int mkstemp(char* __template);
     * }
     */
    public static int mkstemp(MemorySegment __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mkstemps$MH,"mkstemps");
    }
    /**
     * {@snippet :
     * int mkstemps(char* __template, int __suffixlen);
     * }
     */
    public static int mkstemps(MemorySegment __template, int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mkdtemp$MH,"mkdtemp");
    }
    /**
     * {@snippet :
     * char* mkdtemp(char* __template);
     * }
     */
    public static MemorySegment mkdtemp(MemorySegment __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$13.system$MH,"system");
    }
    /**
     * {@snippet :
     * int system(char* __command);
     * }
     */
    public static int system(MemorySegment __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$13.realpath$MH,"realpath");
    }
    /**
     * {@snippet :
     * char* realpath(char* __name, char* __resolved);
     * }
     */
    public static MemorySegment realpath(MemorySegment __name, MemorySegment __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$14.bsearch$MH,"bsearch");
    }
    /**
     * {@snippet :
     * void* bsearch(void* __key, void* __base, unsigned long __nmemb, unsigned long __size, int (*__compar)(void*,void*));
     * }
     */
    public static MemorySegment bsearch(MemorySegment __key, MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$14.qsort$MH,"qsort");
    }
    /**
     * {@snippet :
     * void qsort(void* __base, unsigned long __nmemb, unsigned long __size, int (*__compar)(void*,void*));
     * }
     */
    public static void qsort(MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.abs$MH,"abs");
    }
    /**
     * {@snippet :
     * int abs(int __x);
     * }
     */
    public static int abs(int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.labs$MH,"labs");
    }
    /**
     * {@snippet :
     * long labs(long __x);
     * }
     */
    public static long labs(long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.llabs$MH,"llabs");
    }
    /**
     * {@snippet :
     * long long llabs(long long __x);
     * }
     */
    public static long llabs(long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$15.div$MH,"div");
    }
    /**
     * {@snippet :
     * struct div_t div(int __numer, int __denom);
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int __numer, int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ldiv$MH,"ldiv");
    }
    /**
     * {@snippet :
     * struct ldiv_t ldiv(long __numer, long __denom);
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.lldiv$MH,"lldiv");
    }
    /**
     * {@snippet :
     * struct lldiv_t lldiv(long long __numer, long long __denom);
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ecvt$MH,"ecvt");
    }
    /**
     * {@snippet :
     * char* ecvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment ecvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fcvt$MH,"fcvt");
    }
    /**
     * {@snippet :
     * char* fcvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment fcvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.gcvt$MH,"gcvt");
    }
    /**
     * {@snippet :
     * char* gcvt(double __value, int __ndigit, char* __buf);
     * }
     */
    public static MemorySegment gcvt(double __value, int __ndigit, MemorySegment __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$16.ecvt_r$MH,"ecvt_r");
    }
    /**
     * {@snippet :
     * int ecvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, unsigned long __len);
     * }
     */
    public static int ecvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fcvt_r$MH,"fcvt_r");
    }
    /**
     * {@snippet :
     * int fcvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, unsigned long __len);
     * }
     */
    public static int fcvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$16.mblen$MH,"mblen");
    }
    /**
     * {@snippet :
     * int mblen(char* __s, unsigned long __n);
     * }
     */
    public static int mblen(MemorySegment __s, long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mbtowc$MH,"mbtowc");
    }
    /**
     * {@snippet :
     * int mbtowc(int* __pwc, char* __s, unsigned long __n);
     * }
     */
    public static int mbtowc(MemorySegment __pwc, MemorySegment __s, long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$17.wctomb$MH,"wctomb");
    }
    /**
     * {@snippet :
     * int wctomb(char* __s, int __wchar);
     * }
     */
    public static int wctomb(MemorySegment __s, int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.mbstowcs$MH,"mbstowcs");
    }
    /**
     * {@snippet :
     * unsigned long mbstowcs(int* __pwcs, char* __s, unsigned long __n);
     * }
     */
    public static long mbstowcs(MemorySegment __pwcs, MemorySegment __s, long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.wcstombs$MH,"wcstombs");
    }
    /**
     * {@snippet :
     * unsigned long wcstombs(char* __s, int* __pwcs, unsigned long __n);
     * }
     */
    public static long wcstombs(MemorySegment __s, MemorySegment __pwcs, long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$17.rpmatch$MH,"rpmatch");
    }
    /**
     * {@snippet :
     * int rpmatch(char* __response);
     * }
     */
    public static int rpmatch(MemorySegment __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$17.getsubopt$MH,"getsubopt");
    }
    /**
     * {@snippet :
     * int getsubopt(char** __optionp, char** __tokens, char** __valuep);
     * }
     */
    public static int getsubopt(MemorySegment __optionp, MemorySegment __tokens, MemorySegment __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$18.getloadavg$MH,"getloadavg");
    }
    /**
     * {@snippet :
     * int getloadavg(double __loadavg[], int __nelem);
     * }
     */
    public static int getloadavg(MemorySegment __loadavg, int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef float Real;
     * }
     */
    public static final OfFloat Real = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * enum RprCoefficientCombineRule.Average = 0;
     * }
     */
    public static int Average() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum RprCoefficientCombineRule.Min = 1;
     * }
     */
    public static int Min() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum RprCoefficientCombineRule.Multiply = 2;
     * }
     */
    public static int Multiply() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum RprCoefficientCombineRule.Max = 3;
     * }
     */
    public static int Max() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum RprJointAxis.X = 0;
     * }
     */
    public static int X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum RprJointAxis.Y = 1;
     * }
     */
    public static int Y() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum RprJointAxis.Z = 2;
     * }
     */
    public static int Z() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum RprJointAxis.AngX = 3;
     * }
     */
    public static int AngX() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum RprJointAxis.AngY = 4;
     * }
     */
    public static int AngY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum RprJointAxis.AngZ = 5;
     * }
     */
    public static int AngZ() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum RprMotorModel.AccelerationBased = 0;
     * }
     */
    public static int AccelerationBased() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum RprMotorModel.ForceBased = 1;
     * }
     */
    public static int ForceBased() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum RprRigidBodyType.Dynamic = 0;
     * }
     */
    public static int Dynamic() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum RprRigidBodyType.Fixed = 1;
     * }
     */
    public static int Fixed() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum RprRigidBodyType.KinematicPositionBased = 2;
     * }
     */
    public static int KinematicPositionBased() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum RprRigidBodyType.KinematicVelocityBased = 3;
     * }
     */
    public static int KinematicVelocityBased() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum RprTOIStatus.OutOfIterations = 0;
     * }
     */
    public static int OutOfIterations() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum RprTOIStatus.Converged = 1;
     * }
     */
    public static int Converged() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum RprTOIStatus.Failed = 2;
     * }
     */
    public static int Failed() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum RprTOIStatus.Penetrating = 3;
     * }
     */
    public static int Penetrating() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * typedef unsigned short RprActiveCollisionTypes;
     * }
     */
    public static final OfShort RprActiveCollisionTypes = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int RprActiveEvents;
     * }
     */
    public static final OfInt RprActiveEvents = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int RprActiveHooks;
     * }
     */
    public static final OfInt RprActiveHooks = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int RprGroup;
     * }
     */
    public static final OfInt RprGroup = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int RprSolverFlags;
     * }
     */
    public static final OfInt RprSolverFlags = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int RprQueryFilterFlags;
     * }
     */
    public static final OfInt RprQueryFilterFlags = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char RprJointAxesMask;
     * }
     */
    public static final OfByte RprJointAxesMask = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * enum RprCharacterLength_Tag.Relative = 0;
     * }
     */
    public static int Relative() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum RprCharacterLength_Tag.Absolute = 1;
     * }
     */
    public static int Absolute() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef unsigned int RprCollisionEventFlags;
     * }
     */
    public static final OfInt RprCollisionEventFlags = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * enum RprCollisionEvent_Tag.Started = 0;
     * }
     */
    public static int Started() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum RprCollisionEvent_Tag.Stopped = 1;
     * }
     */
    public static int Stopped() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum RprFeatureId_Tag.Vertex = 0;
     * }
     */
    public static int Vertex() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum RprFeatureId_Tag.Edge = 1;
     * }
     */
    public static int Edge() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum RprFeatureId_Tag.Face = 2;
     * }
     */
    public static int Face() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum RprFeatureId_Tag.Unknown = 3;
     * }
     */
    public static int Unknown() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum RprRigidBodyAdditionalMassProps_Tag.MassProps = 0;
     * }
     */
    public static int MassProps() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum RprRigidBodyAdditionalMassProps_Tag.Mass = 1;
     * }
     */
    public static int Mass() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef unsigned char RprLockedAxes;
     * }
     */
    public static final OfByte RprLockedAxes = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * enum RprFillMode_Tag.SurfaceOnly = 0;
     * }
     */
    public static int SurfaceOnly() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum RprFillMode_Tag.FloodFill = 1;
     * }
     */
    public static int FloodFill() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef unsigned char RprTriMeshFlags;
     * }
     */
    public static final OfByte RprTriMeshFlags = Constants$root.C_CHAR$LAYOUT;
    public static MethodHandle RprArenaKey_invalid$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprArenaKey_invalid$MH,"RprArenaKey_invalid");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprArenaKey_invalid();
     * }
     */
    public static MemorySegment RprArenaKey_invalid(SegmentAllocator allocator) {
        var mh$ = RprArenaKey_invalid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprBroadPhase_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprBroadPhase_drop$MH,"RprBroadPhase_drop");
    }
    /**
     * {@snippet :
     * void RprBroadPhase_drop(struct RprBroadPhase* this_);
     * }
     */
    public static void RprBroadPhase_drop(MemorySegment this_) {
        var mh$ = RprBroadPhase_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprBroadPhase_new$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprBroadPhase_new$MH,"RprBroadPhase_new");
    }
    /**
     * {@snippet :
     * struct RprBroadPhase* RprBroadPhase_new();
     * }
     */
    public static MemorySegment RprBroadPhase_new() {
        var mh$ = RprBroadPhase_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCCDSolver_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprCCDSolver_drop$MH,"RprCCDSolver_drop");
    }
    /**
     * {@snippet :
     * void RprCCDSolver_drop(struct RprCCDSolver* this_);
     * }
     */
    public static void RprCCDSolver_drop(MemorySegment this_) {
        var mh$ = RprCCDSolver_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCCDSolver_new$MH() {
        return RuntimeHelper.requireNonNull(constants$18.RprCCDSolver_new$MH,"RprCCDSolver_new");
    }
    /**
     * {@snippet :
     * struct RprCCDSolver* RprCCDSolver_new();
     * }
     */
    public static MemorySegment RprCCDSolver_new() {
        var mh$ = RprCCDSolver_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_active_collision_types$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_active_collision_types$MH,"RprColliderBuilder_active_collision_types");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_active_collision_types(struct RprColliderBuilder* this_, unsigned short active_collision_types);
     * }
     */
    public static void RprColliderBuilder_active_collision_types(MemorySegment this_, short active_collision_types) {
        var mh$ = RprColliderBuilder_active_collision_types$MH();
        try {
            mh$.invokeExact(this_, active_collision_types);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_active_events$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_active_events$MH,"RprColliderBuilder_active_events");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_active_events(struct RprColliderBuilder* this_, unsigned int active_events);
     * }
     */
    public static void RprColliderBuilder_active_events(MemorySegment this_, int active_events) {
        var mh$ = RprColliderBuilder_active_events$MH();
        try {
            mh$.invokeExact(this_, active_events);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_active_hooks$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_active_hooks$MH,"RprColliderBuilder_active_hooks");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_active_hooks(struct RprColliderBuilder* this_, unsigned int active_hooks);
     * }
     */
    public static void RprColliderBuilder_active_hooks(MemorySegment this_, int active_hooks) {
        var mh$ = RprColliderBuilder_active_hooks$MH();
        try {
            mh$.invokeExact(this_, active_hooks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_build$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_build$MH,"RprColliderBuilder_build");
    }
    /**
     * {@snippet :
     * struct RprCollider* RprColliderBuilder_build(struct RprColliderBuilder* this_);
     * }
     */
    public static MemorySegment RprColliderBuilder_build(MemorySegment this_) {
        var mh$ = RprColliderBuilder_build$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_collision_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_collision_groups$MH,"RprColliderBuilder_collision_groups");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_collision_groups(struct RprColliderBuilder* this_, struct RprInteractionGroups groups);
     * }
     */
    public static void RprColliderBuilder_collision_groups(MemorySegment this_, MemorySegment groups) {
        var mh$ = RprColliderBuilder_collision_groups$MH();
        try {
            mh$.invokeExact(this_, groups);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_contact_force_event_threshold$MH() {
        return RuntimeHelper.requireNonNull(constants$19.RprColliderBuilder_contact_force_event_threshold$MH,"RprColliderBuilder_contact_force_event_threshold");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_contact_force_event_threshold(struct RprColliderBuilder* this_, float threshold);
     * }
     */
    public static void RprColliderBuilder_contact_force_event_threshold(MemorySegment this_, float threshold) {
        var mh$ = RprColliderBuilder_contact_force_event_threshold$MH();
        try {
            mh$.invokeExact(this_, threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_density$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_density$MH,"RprColliderBuilder_density");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_density(struct RprColliderBuilder* this_, float density);
     * }
     */
    public static void RprColliderBuilder_density(MemorySegment this_, float density) {
        var mh$ = RprColliderBuilder_density$MH();
        try {
            mh$.invokeExact(this_, density);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_drop$MH,"RprColliderBuilder_drop");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_drop(struct RprColliderBuilder* this_);
     * }
     */
    public static void RprColliderBuilder_drop(MemorySegment this_) {
        var mh$ = RprColliderBuilder_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_enabled$MH,"RprColliderBuilder_enabled");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_enabled(struct RprColliderBuilder* this_, _Bool enabled);
     * }
     */
    public static void RprColliderBuilder_enabled(MemorySegment this_, boolean enabled) {
        var mh$ = RprColliderBuilder_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_friction$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_friction$MH,"RprColliderBuilder_friction");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_friction(struct RprColliderBuilder* this_, float friction);
     * }
     */
    public static void RprColliderBuilder_friction(MemorySegment this_, float friction) {
        var mh$ = RprColliderBuilder_friction$MH();
        try {
            mh$.invokeExact(this_, friction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_friction_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_friction_combine_rule$MH,"RprColliderBuilder_friction_combine_rule");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_friction_combine_rule(struct RprColliderBuilder* this_, enum RprCoefficientCombineRule rule);
     * }
     */
    public static void RprColliderBuilder_friction_combine_rule(MemorySegment this_, int rule) {
        var mh$ = RprColliderBuilder_friction_combine_rule$MH();
        try {
            mh$.invokeExact(this_, rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$20.RprColliderBuilder_mass$MH,"RprColliderBuilder_mass");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_mass(struct RprColliderBuilder* this_, float mass);
     * }
     */
    public static void RprColliderBuilder_mass(MemorySegment this_, float mass) {
        var mh$ = RprColliderBuilder_mass$MH();
        try {
            mh$.invokeExact(this_, mass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_new$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderBuilder_new$MH,"RprColliderBuilder_new");
    }
    /**
     * {@snippet :
     * struct RprColliderBuilder* RprColliderBuilder_new(struct RprSharedShape* shape);
     * }
     */
    public static MemorySegment RprColliderBuilder_new(MemorySegment shape) {
        var mh$ = RprColliderBuilder_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_position$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderBuilder_position$MH,"RprColliderBuilder_position");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_position(struct RprColliderBuilder* this_, struct RprIsometry position);
     * }
     */
    public static void RprColliderBuilder_position(MemorySegment this_, MemorySegment position) {
        var mh$ = RprColliderBuilder_position$MH();
        try {
            mh$.invokeExact(this_, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_restitution$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderBuilder_restitution$MH,"RprColliderBuilder_restitution");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_restitution(struct RprColliderBuilder* this_, float restitution);
     * }
     */
    public static void RprColliderBuilder_restitution(MemorySegment this_, float restitution) {
        var mh$ = RprColliderBuilder_restitution$MH();
        try {
            mh$.invokeExact(this_, restitution);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_restitution_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderBuilder_restitution_combine_rule$MH,"RprColliderBuilder_restitution_combine_rule");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_restitution_combine_rule(struct RprColliderBuilder* this_, enum RprCoefficientCombineRule rule);
     * }
     */
    public static void RprColliderBuilder_restitution_combine_rule(MemorySegment this_, int rule) {
        var mh$ = RprColliderBuilder_restitution_combine_rule$MH();
        try {
            mh$.invokeExact(this_, rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderBuilder_rotation$MH,"RprColliderBuilder_rotation");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_rotation(struct RprColliderBuilder* this_, struct RprAngVector rotation);
     * }
     */
    public static void RprColliderBuilder_rotation(MemorySegment this_, MemorySegment rotation) {
        var mh$ = RprColliderBuilder_rotation$MH();
        try {
            mh$.invokeExact(this_, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_sensor$MH() {
        return RuntimeHelper.requireNonNull(constants$21.RprColliderBuilder_sensor$MH,"RprColliderBuilder_sensor");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_sensor(struct RprColliderBuilder* this_, _Bool sensor);
     * }
     */
    public static void RprColliderBuilder_sensor(MemorySegment this_, boolean sensor) {
        var mh$ = RprColliderBuilder_sensor$MH();
        try {
            mh$.invokeExact(this_, sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_solver_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderBuilder_solver_groups$MH,"RprColliderBuilder_solver_groups");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_solver_groups(struct RprColliderBuilder* this_, struct RprInteractionGroups groups);
     * }
     */
    public static void RprColliderBuilder_solver_groups(MemorySegment this_, MemorySegment groups) {
        var mh$ = RprColliderBuilder_solver_groups$MH();
        try {
            mh$.invokeExact(this_, groups);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderBuilder_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderBuilder_translation$MH,"RprColliderBuilder_translation");
    }
    /**
     * {@snippet :
     * void RprColliderBuilder_translation(struct RprColliderBuilder* this_, struct RprVector translation);
     * }
     */
    public static void RprColliderBuilder_translation(MemorySegment this_, MemorySegment translation) {
        var mh$ = RprColliderBuilder_translation$MH();
        try {
            mh$.invokeExact(this_, translation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderMaterial_default$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderMaterial_default$MH,"RprColliderMaterial_default");
    }
    /**
     * {@snippet :
     * struct RprColliderMaterial RprColliderMaterial_default();
     * }
     */
    public static MemorySegment RprColliderMaterial_default(SegmentAllocator allocator) {
        var mh$ = RprColliderMaterial_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_all$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderSet_all$MH,"RprColliderSet_all");
    }
    /**
     * {@snippet :
     * struct RprColliderVec* RprColliderSet_all(struct RprColliderSet* this_);
     * }
     */
    public static MemorySegment RprColliderSet_all(MemorySegment this_) {
        var mh$ = RprColliderSet_all$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_all_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderSet_all_enabled$MH,"RprColliderSet_all_enabled");
    }
    /**
     * {@snippet :
     * struct RprColliderVec* RprColliderSet_all_enabled(struct RprColliderSet* this_);
     * }
     */
    public static MemorySegment RprColliderSet_all_enabled(MemorySegment this_) {
        var mh$ = RprColliderSet_all_enabled$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$22.RprColliderSet_contains$MH,"RprColliderSet_contains");
    }
    /**
     * {@snippet :
     * _Bool RprColliderSet_contains(struct RprColliderSet* this_, struct RprArenaKey handle);
     * }
     */
    public static boolean RprColliderSet_contains(MemorySegment this_, MemorySegment handle) {
        var mh$ = RprColliderSet_contains$MH();
        try {
            return (boolean)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprColliderSet_drop$MH,"RprColliderSet_drop");
    }
    /**
     * {@snippet :
     * void RprColliderSet_drop(struct RprColliderSet* this_);
     * }
     */
    public static void RprColliderSet_drop(MemorySegment this_) {
        var mh$ = RprColliderSet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_get$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprColliderSet_get$MH,"RprColliderSet_get");
    }
    /**
     * {@snippet :
     * struct RprCollider* RprColliderSet_get(struct RprColliderSet* this_, struct RprArenaKey handle);
     * }
     */
    public static MemorySegment RprColliderSet_get(MemorySegment this_, MemorySegment handle) {
        var mh$ = RprColliderSet_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_get_mut$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprColliderSet_get_mut$MH,"RprColliderSet_get_mut");
    }
    /**
     * {@snippet :
     * struct RprCollider* RprColliderSet_get_mut(struct RprColliderSet* this_, struct RprArenaKey handle);
     * }
     */
    public static MemorySegment RprColliderSet_get_mut(MemorySegment this_, MemorySegment handle) {
        var mh$ = RprColliderSet_get_mut$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprColliderSet_insert$MH,"RprColliderSet_insert");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprColliderSet_insert(struct RprColliderSet* this_, struct RprCollider* coll);
     * }
     */
    public static MemorySegment RprColliderSet_insert(SegmentAllocator allocator, MemorySegment this_, MemorySegment coll) {
        var mh$ = RprColliderSet_insert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, coll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_insert_with_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprColliderSet_insert_with_parent$MH,"RprColliderSet_insert_with_parent");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprColliderSet_insert_with_parent(struct RprColliderSet* this_, struct RprCollider* coll, struct RprArenaKey parent_handle, struct RprRigidBodySet* bodies);
     * }
     */
    public static MemorySegment RprColliderSet_insert_with_parent(SegmentAllocator allocator, MemorySegment this_, MemorySegment coll, MemorySegment parent_handle, MemorySegment bodies) {
        var mh$ = RprColliderSet_insert_with_parent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, coll, parent_handle, bodies);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$23.RprColliderSet_is_empty$MH,"RprColliderSet_is_empty");
    }
    /**
     * {@snippet :
     * _Bool RprColliderSet_is_empty(struct RprColliderSet* this_);
     * }
     */
    public static boolean RprColliderSet_is_empty(MemorySegment this_) {
        var mh$ = RprColliderSet_is_empty$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_len$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprColliderSet_len$MH,"RprColliderSet_len");
    }
    /**
     * {@snippet :
     * unsigned long RprColliderSet_len(struct RprColliderSet* this_);
     * }
     */
    public static long RprColliderSet_len(MemorySegment this_) {
        var mh$ = RprColliderSet_len$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprColliderSet_new$MH,"RprColliderSet_new");
    }
    /**
     * {@snippet :
     * struct RprColliderSet* RprColliderSet_new();
     * }
     */
    public static MemorySegment RprColliderSet_new() {
        var mh$ = RprColliderSet_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprColliderSet_remove$MH,"RprColliderSet_remove");
    }
    /**
     * {@snippet :
     * struct RprCollider* RprColliderSet_remove(struct RprColliderSet* this_, struct RprArenaKey handle, struct RprIslandManager* islands, struct RprRigidBodySet* bodies, _Bool wake_up);
     * }
     */
    public static MemorySegment RprColliderSet_remove(MemorySegment this_, MemorySegment handle, MemorySegment islands, MemorySegment bodies, boolean wake_up) {
        var mh$ = RprColliderSet_remove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, handle, islands, bodies, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderSet_set_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprColliderSet_set_parent$MH,"RprColliderSet_set_parent");
    }
    /**
     * {@snippet :
     * void RprColliderSet_set_parent(struct RprColliderSet* this_, struct RprArenaKey handle, struct RprArenaKey new_parent_handle, struct RprRigidBodySet* bodies);
     * }
     */
    public static void RprColliderSet_set_parent(MemorySegment this_, MemorySegment handle, MemorySegment new_parent_handle, MemorySegment bodies) {
        var mh$ = RprColliderSet_set_parent$MH();
        try {
            mh$.invokeExact(this_, handle, new_parent_handle, bodies);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderVec_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprColliderVec_drop$MH,"RprColliderVec_drop");
    }
    /**
     * {@snippet :
     * void RprColliderVec_drop(struct RprColliderVec* this_);
     * }
     */
    public static void RprColliderVec_drop(MemorySegment this_) {
        var mh$ = RprColliderVec_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderVec_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$24.RprColliderVec_handle$MH,"RprColliderVec_handle");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprColliderVec_handle(struct RprColliderVec* this_, unsigned long index);
     * }
     */
    public static MemorySegment RprColliderVec_handle(SegmentAllocator allocator, MemorySegment this_, long index) {
        var mh$ = RprColliderVec_handle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderVec_len$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprColliderVec_len$MH,"RprColliderVec_len");
    }
    /**
     * {@snippet :
     * unsigned long RprColliderVec_len(struct RprColliderVec* this_);
     * }
     */
    public static long RprColliderVec_len(MemorySegment this_) {
        var mh$ = RprColliderVec_len$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprColliderVec_value$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprColliderVec_value$MH,"RprColliderVec_value");
    }
    /**
     * {@snippet :
     * struct RprCollider* RprColliderVec_value(struct RprColliderVec* this_, unsigned long index);
     * }
     */
    public static MemorySegment RprColliderVec_value(MemorySegment this_, long index) {
        var mh$ = RprColliderVec_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_active_collision_types$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprCollider_active_collision_types$MH,"RprCollider_active_collision_types");
    }
    /**
     * {@snippet :
     * unsigned short RprCollider_active_collision_types(struct RprCollider* this_);
     * }
     */
    public static short RprCollider_active_collision_types(MemorySegment this_) {
        var mh$ = RprCollider_active_collision_types$MH();
        try {
            return (short)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_active_events$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprCollider_active_events$MH,"RprCollider_active_events");
    }
    /**
     * {@snippet :
     * unsigned int RprCollider_active_events(struct RprCollider* this_);
     * }
     */
    public static int RprCollider_active_events(MemorySegment this_) {
        var mh$ = RprCollider_active_events$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_active_hooks$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprCollider_active_hooks$MH,"RprCollider_active_hooks");
    }
    /**
     * {@snippet :
     * unsigned int RprCollider_active_hooks(struct RprCollider* this_);
     * }
     */
    public static int RprCollider_active_hooks(MemorySegment this_) {
        var mh$ = RprCollider_active_hooks$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_collision_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$25.RprCollider_collision_groups$MH,"RprCollider_collision_groups");
    }
    /**
     * {@snippet :
     * struct RprInteractionGroups RprCollider_collision_groups(struct RprCollider* this_);
     * }
     */
    public static MemorySegment RprCollider_collision_groups(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprCollider_collision_groups$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_compute_aabb$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_compute_aabb$MH,"RprCollider_compute_aabb");
    }
    /**
     * {@snippet :
     * struct RprAabb RprCollider_compute_aabb(struct RprCollider* this_);
     * }
     */
    public static MemorySegment RprCollider_compute_aabb(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprCollider_compute_aabb$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_compute_swept_aabb$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_compute_swept_aabb$MH,"RprCollider_compute_swept_aabb");
    }
    /**
     * {@snippet :
     * struct RprAabb RprCollider_compute_swept_aabb(struct RprCollider* this_, struct RprIsometry next_position);
     * }
     */
    public static MemorySegment RprCollider_compute_swept_aabb(SegmentAllocator allocator, MemorySegment this_, MemorySegment next_position) {
        var mh$ = RprCollider_compute_swept_aabb$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, next_position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_contact_force_event_threshold$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_contact_force_event_threshold$MH,"RprCollider_contact_force_event_threshold");
    }
    /**
     * {@snippet :
     * float RprCollider_contact_force_event_threshold(struct RprCollider* this_);
     * }
     */
    public static float RprCollider_contact_force_event_threshold(MemorySegment this_) {
        var mh$ = RprCollider_contact_force_event_threshold$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_density$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_density$MH,"RprCollider_density");
    }
    /**
     * {@snippet :
     * float RprCollider_density(struct RprCollider* this_);
     * }
     */
    public static float RprCollider_density(MemorySegment this_) {
        var mh$ = RprCollider_density$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_drop$MH,"RprCollider_drop");
    }
    /**
     * {@snippet :
     * void RprCollider_drop(struct RprCollider* this_);
     * }
     */
    public static void RprCollider_drop(MemorySegment this_) {
        var mh$ = RprCollider_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_friction$MH() {
        return RuntimeHelper.requireNonNull(constants$26.RprCollider_friction$MH,"RprCollider_friction");
    }
    /**
     * {@snippet :
     * float RprCollider_friction(struct RprCollider* this_);
     * }
     */
    public static float RprCollider_friction(MemorySegment this_) {
        var mh$ = RprCollider_friction$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_friction_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_friction_combine_rule$MH,"RprCollider_friction_combine_rule");
    }
    /**
     * {@snippet :
     * enum RprCoefficientCombineRule RprCollider_friction_combine_rule(struct RprCollider* this_);
     * }
     */
    public static int RprCollider_friction_combine_rule(MemorySegment this_) {
        var mh$ = RprCollider_friction_combine_rule$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_is_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_is_enabled$MH,"RprCollider_is_enabled");
    }
    /**
     * {@snippet :
     * _Bool RprCollider_is_enabled(struct RprCollider* this_);
     * }
     */
    public static boolean RprCollider_is_enabled(MemorySegment this_) {
        var mh$ = RprCollider_is_enabled$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_is_sensor$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_is_sensor$MH,"RprCollider_is_sensor");
    }
    /**
     * {@snippet :
     * _Bool RprCollider_is_sensor(struct RprCollider* this_);
     * }
     */
    public static boolean RprCollider_is_sensor(MemorySegment this_) {
        var mh$ = RprCollider_is_sensor$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_mass$MH,"RprCollider_mass");
    }
    /**
     * {@snippet :
     * float RprCollider_mass(struct RprCollider* this_);
     * }
     */
    public static float RprCollider_mass(MemorySegment this_) {
        var mh$ = RprCollider_mass$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_material$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_material$MH,"RprCollider_material");
    }
    /**
     * {@snippet :
     * struct RprColliderMaterial RprCollider_material(struct RprCollider* this_);
     * }
     */
    public static MemorySegment RprCollider_material(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprCollider_material$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$27.RprCollider_parent$MH,"RprCollider_parent");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprCollider_parent(struct RprCollider* this_);
     * }
     */
    public static MemorySegment RprCollider_parent(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprCollider_parent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_position$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_position$MH,"RprCollider_position");
    }
    /**
     * {@snippet :
     * struct RprIsometry RprCollider_position(struct RprCollider* this_);
     * }
     */
    public static MemorySegment RprCollider_position(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprCollider_position$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_position_wrt_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_position_wrt_parent$MH,"RprCollider_position_wrt_parent");
    }
    /**
     * {@snippet :
     * struct RprIsometry RprCollider_position_wrt_parent(struct RprCollider* this_);
     * }
     */
    public static MemorySegment RprCollider_position_wrt_parent(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprCollider_position_wrt_parent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_restitution$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_restitution$MH,"RprCollider_restitution");
    }
    /**
     * {@snippet :
     * float RprCollider_restitution(struct RprCollider* this_);
     * }
     */
    public static float RprCollider_restitution(MemorySegment this_) {
        var mh$ = RprCollider_restitution$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_restitution_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_restitution_combine_rule$MH,"RprCollider_restitution_combine_rule");
    }
    /**
     * {@snippet :
     * enum RprCoefficientCombineRule RprCollider_restitution_combine_rule(struct RprCollider* this_);
     * }
     */
    public static int RprCollider_restitution_combine_rule(MemorySegment this_) {
        var mh$ = RprCollider_restitution_combine_rule$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_rotation$MH,"RprCollider_rotation");
    }
    /**
     * {@snippet :
     * struct RprRotation RprCollider_rotation(struct RprCollider* this_);
     * }
     */
    public static MemorySegment RprCollider_rotation(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprCollider_rotation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_active_collision_types$MH() {
        return RuntimeHelper.requireNonNull(constants$28.RprCollider_set_active_collision_types$MH,"RprCollider_set_active_collision_types");
    }
    /**
     * {@snippet :
     * void RprCollider_set_active_collision_types(struct RprCollider* this_, unsigned short active_collision_types);
     * }
     */
    public static void RprCollider_set_active_collision_types(MemorySegment this_, short active_collision_types) {
        var mh$ = RprCollider_set_active_collision_types$MH();
        try {
            mh$.invokeExact(this_, active_collision_types);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_active_events$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprCollider_set_active_events$MH,"RprCollider_set_active_events");
    }
    /**
     * {@snippet :
     * void RprCollider_set_active_events(struct RprCollider* this_, unsigned int active_events);
     * }
     */
    public static void RprCollider_set_active_events(MemorySegment this_, int active_events) {
        var mh$ = RprCollider_set_active_events$MH();
        try {
            mh$.invokeExact(this_, active_events);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_active_hooks$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprCollider_set_active_hooks$MH,"RprCollider_set_active_hooks");
    }
    /**
     * {@snippet :
     * void RprCollider_set_active_hooks(struct RprCollider* this_, unsigned int active_hooks);
     * }
     */
    public static void RprCollider_set_active_hooks(MemorySegment this_, int active_hooks) {
        var mh$ = RprCollider_set_active_hooks$MH();
        try {
            mh$.invokeExact(this_, active_hooks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_collision_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprCollider_set_collision_groups$MH,"RprCollider_set_collision_groups");
    }
    /**
     * {@snippet :
     * void RprCollider_set_collision_groups(struct RprCollider* this_, struct RprInteractionGroups groups);
     * }
     */
    public static void RprCollider_set_collision_groups(MemorySegment this_, MemorySegment groups) {
        var mh$ = RprCollider_set_collision_groups$MH();
        try {
            mh$.invokeExact(this_, groups);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_contact_force_event_threshold$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprCollider_set_contact_force_event_threshold$MH,"RprCollider_set_contact_force_event_threshold");
    }
    /**
     * {@snippet :
     * void RprCollider_set_contact_force_event_threshold(struct RprCollider* this_, float threshold);
     * }
     */
    public static void RprCollider_set_contact_force_event_threshold(MemorySegment this_, float threshold) {
        var mh$ = RprCollider_set_contact_force_event_threshold$MH();
        try {
            mh$.invokeExact(this_, threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_density$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprCollider_set_density$MH,"RprCollider_set_density");
    }
    /**
     * {@snippet :
     * void RprCollider_set_density(struct RprCollider* this_, float density);
     * }
     */
    public static void RprCollider_set_density(MemorySegment this_, float density) {
        var mh$ = RprCollider_set_density$MH();
        try {
            mh$.invokeExact(this_, density);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$29.RprCollider_set_enabled$MH,"RprCollider_set_enabled");
    }
    /**
     * {@snippet :
     * void RprCollider_set_enabled(struct RprCollider* this_, _Bool enabled);
     * }
     */
    public static void RprCollider_set_enabled(MemorySegment this_, boolean enabled) {
        var mh$ = RprCollider_set_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_friction$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprCollider_set_friction$MH,"RprCollider_set_friction");
    }
    /**
     * {@snippet :
     * void RprCollider_set_friction(struct RprCollider* this_, float coefficient);
     * }
     */
    public static void RprCollider_set_friction(MemorySegment this_, float coefficient) {
        var mh$ = RprCollider_set_friction$MH();
        try {
            mh$.invokeExact(this_, coefficient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_friction_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprCollider_set_friction_combine_rule$MH,"RprCollider_set_friction_combine_rule");
    }
    /**
     * {@snippet :
     * void RprCollider_set_friction_combine_rule(struct RprCollider* this_, enum RprCoefficientCombineRule rule);
     * }
     */
    public static void RprCollider_set_friction_combine_rule(MemorySegment this_, int rule) {
        var mh$ = RprCollider_set_friction_combine_rule$MH();
        try {
            mh$.invokeExact(this_, rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprCollider_set_mass$MH,"RprCollider_set_mass");
    }
    /**
     * {@snippet :
     * void RprCollider_set_mass(struct RprCollider* this_, float mass);
     * }
     */
    public static void RprCollider_set_mass(MemorySegment this_, float mass) {
        var mh$ = RprCollider_set_mass$MH();
        try {
            mh$.invokeExact(this_, mass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_position$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprCollider_set_position$MH,"RprCollider_set_position");
    }
    /**
     * {@snippet :
     * void RprCollider_set_position(struct RprCollider* this_, struct RprIsometry position);
     * }
     */
    public static void RprCollider_set_position(MemorySegment this_, MemorySegment position) {
        var mh$ = RprCollider_set_position$MH();
        try {
            mh$.invokeExact(this_, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_position_wrt_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprCollider_set_position_wrt_parent$MH,"RprCollider_set_position_wrt_parent");
    }
    /**
     * {@snippet :
     * void RprCollider_set_position_wrt_parent(struct RprCollider* this_, struct RprIsometry pos_wrt_parent);
     * }
     */
    public static void RprCollider_set_position_wrt_parent(MemorySegment this_, MemorySegment pos_wrt_parent) {
        var mh$ = RprCollider_set_position_wrt_parent$MH();
        try {
            mh$.invokeExact(this_, pos_wrt_parent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_restitution$MH() {
        return RuntimeHelper.requireNonNull(constants$30.RprCollider_set_restitution$MH,"RprCollider_set_restitution");
    }
    /**
     * {@snippet :
     * void RprCollider_set_restitution(struct RprCollider* this_, float coefficient);
     * }
     */
    public static void RprCollider_set_restitution(MemorySegment this_, float coefficient) {
        var mh$ = RprCollider_set_restitution$MH();
        try {
            mh$.invokeExact(this_, coefficient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_restitution_combine_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprCollider_set_restitution_combine_rule$MH,"RprCollider_set_restitution_combine_rule");
    }
    /**
     * {@snippet :
     * void RprCollider_set_restitution_combine_rule(struct RprCollider* this_, enum RprCoefficientCombineRule rule);
     * }
     */
    public static void RprCollider_set_restitution_combine_rule(MemorySegment this_, int rule) {
        var mh$ = RprCollider_set_restitution_combine_rule$MH();
        try {
            mh$.invokeExact(this_, rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprCollider_set_rotation$MH,"RprCollider_set_rotation");
    }
    /**
     * {@snippet :
     * void RprCollider_set_rotation(struct RprCollider* this_, struct RprRotation rotation);
     * }
     */
    public static void RprCollider_set_rotation(MemorySegment this_, MemorySegment rotation) {
        var mh$ = RprCollider_set_rotation$MH();
        try {
            mh$.invokeExact(this_, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_rotation_wrt_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprCollider_set_rotation_wrt_parent$MH,"RprCollider_set_rotation_wrt_parent");
    }
    /**
     * {@snippet :
     * void RprCollider_set_rotation_wrt_parent(struct RprCollider* this_, struct RprAngVector rotation);
     * }
     */
    public static void RprCollider_set_rotation_wrt_parent(MemorySegment this_, MemorySegment rotation) {
        var mh$ = RprCollider_set_rotation_wrt_parent$MH();
        try {
            mh$.invokeExact(this_, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_sensor$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprCollider_set_sensor$MH,"RprCollider_set_sensor");
    }
    /**
     * {@snippet :
     * void RprCollider_set_sensor(struct RprCollider* this_, _Bool is_sensor);
     * }
     */
    public static void RprCollider_set_sensor(MemorySegment this_, boolean is_sensor) {
        var mh$ = RprCollider_set_sensor$MH();
        try {
            mh$.invokeExact(this_, is_sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprCollider_set_shape$MH,"RprCollider_set_shape");
    }
    /**
     * {@snippet :
     * void RprCollider_set_shape(struct RprCollider* this_, struct RprSharedShape* shape);
     * }
     */
    public static void RprCollider_set_shape(MemorySegment this_, MemorySegment shape) {
        var mh$ = RprCollider_set_shape$MH();
        try {
            mh$.invokeExact(this_, shape);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_solver_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$31.RprCollider_set_solver_groups$MH,"RprCollider_set_solver_groups");
    }
    /**
     * {@snippet :
     * void RprCollider_set_solver_groups(struct RprCollider* this_, struct RprInteractionGroups groups);
     * }
     */
    public static void RprCollider_set_solver_groups(MemorySegment this_, MemorySegment groups) {
        var mh$ = RprCollider_set_solver_groups$MH();
        try {
            mh$.invokeExact(this_, groups);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprCollider_set_translation$MH,"RprCollider_set_translation");
    }
    /**
     * {@snippet :
     * void RprCollider_set_translation(struct RprCollider* this_, struct RprVector translation);
     * }
     */
    public static void RprCollider_set_translation(MemorySegment this_, MemorySegment translation) {
        var mh$ = RprCollider_set_translation$MH();
        try {
            mh$.invokeExact(this_, translation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_set_translation_wrt_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprCollider_set_translation_wrt_parent$MH,"RprCollider_set_translation_wrt_parent");
    }
    /**
     * {@snippet :
     * void RprCollider_set_translation_wrt_parent(struct RprCollider* this_, struct RprVector translation);
     * }
     */
    public static void RprCollider_set_translation_wrt_parent(MemorySegment this_, MemorySegment translation) {
        var mh$ = RprCollider_set_translation_wrt_parent$MH();
        try {
            mh$.invokeExact(this_, translation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprCollider_shape$MH,"RprCollider_shape");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprCollider_shape(struct RprCollider* this_);
     * }
     */
    public static MemorySegment RprCollider_shape(MemorySegment this_) {
        var mh$ = RprCollider_shape$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_solver_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprCollider_solver_groups$MH,"RprCollider_solver_groups");
    }
    /**
     * {@snippet :
     * struct RprInteractionGroups RprCollider_solver_groups(struct RprCollider* this_);
     * }
     */
    public static MemorySegment RprCollider_solver_groups(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprCollider_solver_groups$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprCollider_translation$MH,"RprCollider_translation");
    }
    /**
     * {@snippet :
     * struct RprVector RprCollider_translation(struct RprCollider* this_);
     * }
     */
    public static MemorySegment RprCollider_translation(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprCollider_translation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprCollider_volume$MH() {
        return RuntimeHelper.requireNonNull(constants$32.RprCollider_volume$MH,"RprCollider_volume");
    }
    /**
     * {@snippet :
     * float RprCollider_volume(struct RprCollider* this_);
     * }
     */
    public static float RprCollider_volume(MemorySegment this_) {
        var mh$ = RprCollider_volume$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactData_dist$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprContactData_dist$MH,"RprContactData_dist");
    }
    /**
     * {@snippet :
     * float RprContactData_dist(struct RprContactData* this_);
     * }
     */
    public static float RprContactData_dist(MemorySegment this_) {
        var mh$ = RprContactData_dist$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactData_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprContactData_impulse$MH,"RprContactData_impulse");
    }
    /**
     * {@snippet :
     * float RprContactData_impulse(struct RprContactData* this_);
     * }
     */
    public static float RprContactData_impulse(MemorySegment this_) {
        var mh$ = RprContactData_impulse$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactData_local_p1$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprContactData_local_p1$MH,"RprContactData_local_p1");
    }
    /**
     * {@snippet :
     * struct RprVector RprContactData_local_p1(struct RprContactData* this_);
     * }
     */
    public static MemorySegment RprContactData_local_p1(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprContactData_local_p1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactData_local_p2$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprContactData_local_p2$MH,"RprContactData_local_p2");
    }
    /**
     * {@snippet :
     * struct RprVector RprContactData_local_p2(struct RprContactData* this_);
     * }
     */
    public static MemorySegment RprContactData_local_p2(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprContactData_local_p2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactData_set_dist$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprContactData_set_dist$MH,"RprContactData_set_dist");
    }
    /**
     * {@snippet :
     * void RprContactData_set_dist(struct RprContactData* this_, float value);
     * }
     */
    public static void RprContactData_set_dist(MemorySegment this_, float value) {
        var mh$ = RprContactData_set_dist$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactData_set_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$33.RprContactData_set_impulse$MH,"RprContactData_set_impulse");
    }
    /**
     * {@snippet :
     * void RprContactData_set_impulse(struct RprContactData* this_, float value);
     * }
     */
    public static void RprContactData_set_impulse(MemorySegment this_, float value) {
        var mh$ = RprContactData_set_impulse$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactData_set_local_p1$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprContactData_set_local_p1$MH,"RprContactData_set_local_p1");
    }
    /**
     * {@snippet :
     * void RprContactData_set_local_p1(struct RprContactData* this_, struct RprVector value);
     * }
     */
    public static void RprContactData_set_local_p1(MemorySegment this_, MemorySegment value) {
        var mh$ = RprContactData_set_local_p1$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactData_set_local_p2$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprContactData_set_local_p2$MH,"RprContactData_set_local_p2");
    }
    /**
     * {@snippet :
     * void RprContactData_set_local_p2(struct RprContactData* this_, struct RprVector value);
     * }
     */
    public static void RprContactData_set_local_p2(MemorySegment this_, MemorySegment value) {
        var mh$ = RprContactData_set_local_p2$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactData_set_tangent_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprContactData_set_tangent_impulse$MH,"RprContactData_set_tangent_impulse");
    }
    /**
     * {@snippet :
     * void RprContactData_set_tangent_impulse(struct RprContactData* this_, float x, float y);
     * }
     */
    public static void RprContactData_set_tangent_impulse(MemorySegment this_, float x, float y) {
        var mh$ = RprContactData_set_tangent_impulse$MH();
        try {
            mh$.invokeExact(this_, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactData_tangent_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprContactData_tangent_impulse$MH,"RprContactData_tangent_impulse");
    }
    /**
     * {@snippet :
     * void RprContactData_tangent_impulse(struct RprContactData* this_, float* out_x, float* out_y);
     * }
     */
    public static void RprContactData_tangent_impulse(MemorySegment this_, MemorySegment out_x, MemorySegment out_y) {
        var mh$ = RprContactData_tangent_impulse$MH();
        try {
            mh$.invokeExact(this_, out_x, out_y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_local_n1$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprContactManifold_local_n1$MH,"RprContactManifold_local_n1");
    }
    /**
     * {@snippet :
     * struct RprVector RprContactManifold_local_n1(struct RprContactManifold* this_);
     * }
     */
    public static MemorySegment RprContactManifold_local_n1(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprContactManifold_local_n1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_local_n2$MH() {
        return RuntimeHelper.requireNonNull(constants$34.RprContactManifold_local_n2$MH,"RprContactManifold_local_n2");
    }
    /**
     * {@snippet :
     * struct RprVector RprContactManifold_local_n2(struct RprContactManifold* this_);
     * }
     */
    public static MemorySegment RprContactManifold_local_n2(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprContactManifold_local_n2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_normal$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprContactManifold_normal$MH,"RprContactManifold_normal");
    }
    /**
     * {@snippet :
     * struct RprVector RprContactManifold_normal(struct RprContactManifold* this_);
     * }
     */
    public static MemorySegment RprContactManifold_normal(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprContactManifold_normal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_points$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprContactManifold_points$MH,"RprContactManifold_points");
    }
    /**
     * {@snippet :
     * void RprContactManifold_points(struct RprContactManifold* this_, struct RprContactData** out_data, unsigned long* out_len);
     * }
     */
    public static void RprContactManifold_points(MemorySegment this_, MemorySegment out_data, MemorySegment out_len) {
        var mh$ = RprContactManifold_points$MH();
        try {
            mh$.invokeExact(this_, out_data, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_relative_dominance$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprContactManifold_relative_dominance$MH,"RprContactManifold_relative_dominance");
    }
    /**
     * {@snippet :
     * short RprContactManifold_relative_dominance(struct RprContactManifold* this_);
     * }
     */
    public static short RprContactManifold_relative_dominance(MemorySegment this_) {
        var mh$ = RprContactManifold_relative_dominance$MH();
        try {
            return (short)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_rigid_body1$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprContactManifold_rigid_body1$MH,"RprContactManifold_rigid_body1");
    }
    /**
     * {@snippet :
     * _Bool RprContactManifold_rigid_body1(struct RprContactManifold* this_, struct RprArenaKey* out);
     * }
     */
    public static boolean RprContactManifold_rigid_body1(MemorySegment this_, MemorySegment out) {
        var mh$ = RprContactManifold_rigid_body1$MH();
        try {
            return (boolean)mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_rigid_body2$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprContactManifold_rigid_body2$MH,"RprContactManifold_rigid_body2");
    }
    /**
     * {@snippet :
     * _Bool RprContactManifold_rigid_body2(struct RprContactManifold* this_, struct RprArenaKey* out);
     * }
     */
    public static boolean RprContactManifold_rigid_body2(MemorySegment this_, MemorySegment out) {
        var mh$ = RprContactManifold_rigid_body2$MH();
        try {
            return (boolean)mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_solver_contacts$MH() {
        return RuntimeHelper.requireNonNull(constants$35.RprContactManifold_solver_contacts$MH,"RprContactManifold_solver_contacts");
    }
    /**
     * {@snippet :
     * void RprContactManifold_solver_contacts(struct RprContactManifold* this_, struct RprSolverContact** out_data, unsigned long* out_len);
     * }
     */
    public static void RprContactManifold_solver_contacts(MemorySegment this_, MemorySegment out_data, MemorySegment out_len) {
        var mh$ = RprContactManifold_solver_contacts$MH();
        try {
            mh$.invokeExact(this_, out_data, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_solver_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprContactManifold_solver_flags$MH,"RprContactManifold_solver_flags");
    }
    /**
     * {@snippet :
     * unsigned int RprContactManifold_solver_flags(struct RprContactManifold* this_);
     * }
     */
    public static int RprContactManifold_solver_flags(MemorySegment this_) {
        var mh$ = RprContactManifold_solver_flags$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_subshape1$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprContactManifold_subshape1$MH,"RprContactManifold_subshape1");
    }
    /**
     * {@snippet :
     * unsigned int RprContactManifold_subshape1(struct RprContactManifold* this_);
     * }
     */
    public static int RprContactManifold_subshape1(MemorySegment this_) {
        var mh$ = RprContactManifold_subshape1$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_subshape2$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprContactManifold_subshape2$MH,"RprContactManifold_subshape2");
    }
    /**
     * {@snippet :
     * unsigned int RprContactManifold_subshape2(struct RprContactManifold* this_);
     * }
     */
    public static int RprContactManifold_subshape2(MemorySegment this_) {
        var mh$ = RprContactManifold_subshape2$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_subshape_pos1$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprContactManifold_subshape_pos1$MH,"RprContactManifold_subshape_pos1");
    }
    /**
     * {@snippet :
     * _Bool RprContactManifold_subshape_pos1(struct RprContactManifold* this_, struct RprIsometry* out);
     * }
     */
    public static boolean RprContactManifold_subshape_pos1(MemorySegment this_, MemorySegment out) {
        var mh$ = RprContactManifold_subshape_pos1$MH();
        try {
            return (boolean)mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_subshape_pos2$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprContactManifold_subshape_pos2$MH,"RprContactManifold_subshape_pos2");
    }
    /**
     * {@snippet :
     * _Bool RprContactManifold_subshape_pos2(struct RprContactManifold* this_, struct RprIsometry* out);
     * }
     */
    public static boolean RprContactManifold_subshape_pos2(MemorySegment this_, MemorySegment out) {
        var mh$ = RprContactManifold_subshape_pos2$MH();
        try {
            return (boolean)mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactManifold_user_data$MH() {
        return RuntimeHelper.requireNonNull(constants$36.RprContactManifold_user_data$MH,"RprContactManifold_user_data");
    }
    /**
     * {@snippet :
     * unsigned int RprContactManifold_user_data(struct RprContactManifold* this_);
     * }
     */
    public static int RprContactManifold_user_data(MemorySegment this_) {
        var mh$ = RprContactManifold_user_data$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_bodies$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprContactModificationContext_bodies$MH,"RprContactModificationContext_bodies");
    }
    /**
     * {@snippet :
     * struct RprRigidBodySet* RprContactModificationContext_bodies(struct RprContactModificationContext* this_);
     * }
     */
    public static MemorySegment RprContactModificationContext_bodies(MemorySegment this_) {
        var mh$ = RprContactModificationContext_bodies$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_collider1$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprContactModificationContext_collider1$MH,"RprContactModificationContext_collider1");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprContactModificationContext_collider1(struct RprContactModificationContext* this_);
     * }
     */
    public static MemorySegment RprContactModificationContext_collider1(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprContactModificationContext_collider1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_collider2$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprContactModificationContext_collider2$MH,"RprContactModificationContext_collider2");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprContactModificationContext_collider2(struct RprContactModificationContext* this_);
     * }
     */
    public static MemorySegment RprContactModificationContext_collider2(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprContactModificationContext_collider2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_colliders$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprContactModificationContext_colliders$MH,"RprContactModificationContext_colliders");
    }
    /**
     * {@snippet :
     * struct RprColliderSet* RprContactModificationContext_colliders(struct RprContactModificationContext* this_);
     * }
     */
    public static MemorySegment RprContactModificationContext_colliders(MemorySegment this_) {
        var mh$ = RprContactModificationContext_colliders$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_manifold$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprContactModificationContext_manifold$MH,"RprContactModificationContext_manifold");
    }
    /**
     * {@snippet :
     * struct RprContactManifold* RprContactModificationContext_manifold(struct RprContactModificationContext* this_);
     * }
     */
    public static MemorySegment RprContactModificationContext_manifold(MemorySegment this_) {
        var mh$ = RprContactModificationContext_manifold$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_normal$MH() {
        return RuntimeHelper.requireNonNull(constants$37.RprContactModificationContext_normal$MH,"RprContactModificationContext_normal");
    }
    /**
     * {@snippet :
     * struct RprVector RprContactModificationContext_normal(struct RprContactModificationContext* this_);
     * }
     */
    public static MemorySegment RprContactModificationContext_normal(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprContactModificationContext_normal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_rigid_body1$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprContactModificationContext_rigid_body1$MH,"RprContactModificationContext_rigid_body1");
    }
    /**
     * {@snippet :
     * _Bool RprContactModificationContext_rigid_body1(struct RprContactModificationContext* this_, struct RprArenaKey* out);
     * }
     */
    public static boolean RprContactModificationContext_rigid_body1(MemorySegment this_, MemorySegment out) {
        var mh$ = RprContactModificationContext_rigid_body1$MH();
        try {
            return (boolean)mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_rigid_body2$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprContactModificationContext_rigid_body2$MH,"RprContactModificationContext_rigid_body2");
    }
    /**
     * {@snippet :
     * _Bool RprContactModificationContext_rigid_body2(struct RprContactModificationContext* this_, struct RprArenaKey* out);
     * }
     */
    public static boolean RprContactModificationContext_rigid_body2(MemorySegment this_, MemorySegment out) {
        var mh$ = RprContactModificationContext_rigid_body2$MH();
        try {
            return (boolean)mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_set_normal$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprContactModificationContext_set_normal$MH,"RprContactModificationContext_set_normal");
    }
    /**
     * {@snippet :
     * void RprContactModificationContext_set_normal(struct RprContactModificationContext* this_, struct RprVector value);
     * }
     */
    public static void RprContactModificationContext_set_normal(MemorySegment this_, MemorySegment value) {
        var mh$ = RprContactModificationContext_set_normal$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_set_user_data$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprContactModificationContext_set_user_data$MH,"RprContactModificationContext_set_user_data");
    }
    /**
     * {@snippet :
     * void RprContactModificationContext_set_user_data(struct RprContactModificationContext* this_, unsigned int value);
     * }
     */
    public static void RprContactModificationContext_set_user_data(MemorySegment this_, int value) {
        var mh$ = RprContactModificationContext_set_user_data$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_solver_contacts$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprContactModificationContext_solver_contacts$MH,"RprContactModificationContext_solver_contacts");
    }
    /**
     * {@snippet :
     * void RprContactModificationContext_solver_contacts(struct RprContactModificationContext* this_, struct RprSolverContact** out_data, unsigned long* out_len);
     * }
     */
    public static void RprContactModificationContext_solver_contacts(MemorySegment this_, MemorySegment out_data, MemorySegment out_len) {
        var mh$ = RprContactModificationContext_solver_contacts$MH();
        try {
            mh$.invokeExact(this_, out_data, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactModificationContext_user_data$MH() {
        return RuntimeHelper.requireNonNull(constants$38.RprContactModificationContext_user_data$MH,"RprContactModificationContext_user_data");
    }
    /**
     * {@snippet :
     * unsigned int RprContactModificationContext_user_data(struct RprContactModificationContext* this_);
     * }
     */
    public static int RprContactModificationContext_user_data(MemorySegment this_) {
        var mh$ = RprContactModificationContext_user_data$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactPair_collider1$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprContactPair_collider1$MH,"RprContactPair_collider1");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprContactPair_collider1(struct RprContactPair* this_);
     * }
     */
    public static MemorySegment RprContactPair_collider1(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprContactPair_collider1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactPair_collider2$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprContactPair_collider2$MH,"RprContactPair_collider2");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprContactPair_collider2(struct RprContactPair* this_);
     * }
     */
    public static MemorySegment RprContactPair_collider2(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprContactPair_collider2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactPair_has_any_active_contact$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprContactPair_has_any_active_contact$MH,"RprContactPair_has_any_active_contact");
    }
    /**
     * {@snippet :
     * _Bool RprContactPair_has_any_active_contact(struct RprContactPair* this_);
     * }
     */
    public static boolean RprContactPair_has_any_active_contact(MemorySegment this_) {
        var mh$ = RprContactPair_has_any_active_contact$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprContactPair_manifolds$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprContactPair_manifolds$MH,"RprContactPair_manifolds");
    }
    /**
     * {@snippet :
     * void RprContactPair_manifolds(struct RprContactPair* this_, struct RprContactManifold** out_data, unsigned long* out_len);
     * }
     */
    public static void RprContactPair_manifolds(MemorySegment this_, MemorySegment out_data, MemorySegment out_len) {
        var mh$ = RprContactPair_manifolds$MH();
        try {
            mh$.invokeExact(this_, out_data, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_add_wheel$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprDynamicRayCastVehicleController_add_wheel$MH,"RprDynamicRayCastVehicleController_add_wheel");
    }
    /**
     * {@snippet :
     * struct RprWheel* RprDynamicRayCastVehicleController_add_wheel(struct RprDynamicRayCastVehicleController* this_, struct RprVector chassis_connection_cs, struct RprVector direction_cs, struct RprVector axle_cs, float suspension_rest_length, float radius, struct RprWheelTuning tuning);
     * }
     */
    public static MemorySegment RprDynamicRayCastVehicleController_add_wheel(MemorySegment this_, MemorySegment chassis_connection_cs, MemorySegment direction_cs, MemorySegment axle_cs, float suspension_rest_length, float radius, MemorySegment tuning) {
        var mh$ = RprDynamicRayCastVehicleController_add_wheel$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, chassis_connection_cs, direction_cs, axle_cs, suspension_rest_length, radius, tuning);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_chassis$MH() {
        return RuntimeHelper.requireNonNull(constants$39.RprDynamicRayCastVehicleController_chassis$MH,"RprDynamicRayCastVehicleController_chassis");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprDynamicRayCastVehicleController_chassis(struct RprDynamicRayCastVehicleController* this_);
     * }
     */
    public static MemorySegment RprDynamicRayCastVehicleController_chassis(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprDynamicRayCastVehicleController_chassis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_current_vehicle_speed$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprDynamicRayCastVehicleController_current_vehicle_speed$MH,"RprDynamicRayCastVehicleController_current_vehicle_speed");
    }
    /**
     * {@snippet :
     * float RprDynamicRayCastVehicleController_current_vehicle_speed(struct RprDynamicRayCastVehicleController* this_);
     * }
     */
    public static float RprDynamicRayCastVehicleController_current_vehicle_speed(MemorySegment this_) {
        var mh$ = RprDynamicRayCastVehicleController_current_vehicle_speed$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprDynamicRayCastVehicleController_drop$MH,"RprDynamicRayCastVehicleController_drop");
    }
    /**
     * {@snippet :
     * void RprDynamicRayCastVehicleController_drop(struct RprDynamicRayCastVehicleController* this_);
     * }
     */
    public static void RprDynamicRayCastVehicleController_drop(MemorySegment this_) {
        var mh$ = RprDynamicRayCastVehicleController_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_index_forward_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprDynamicRayCastVehicleController_index_forward_axis$MH,"RprDynamicRayCastVehicleController_index_forward_axis");
    }
    /**
     * {@snippet :
     * unsigned long RprDynamicRayCastVehicleController_index_forward_axis(struct RprDynamicRayCastVehicleController* this_);
     * }
     */
    public static long RprDynamicRayCastVehicleController_index_forward_axis(MemorySegment this_) {
        var mh$ = RprDynamicRayCastVehicleController_index_forward_axis$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_index_up_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprDynamicRayCastVehicleController_index_up_axis$MH,"RprDynamicRayCastVehicleController_index_up_axis");
    }
    /**
     * {@snippet :
     * unsigned long RprDynamicRayCastVehicleController_index_up_axis(struct RprDynamicRayCastVehicleController* this_);
     * }
     */
    public static long RprDynamicRayCastVehicleController_index_up_axis(MemorySegment this_) {
        var mh$ = RprDynamicRayCastVehicleController_index_up_axis$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_new$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprDynamicRayCastVehicleController_new$MH,"RprDynamicRayCastVehicleController_new");
    }
    /**
     * {@snippet :
     * struct RprDynamicRayCastVehicleController* RprDynamicRayCastVehicleController_new(struct RprArenaKey chassis);
     * }
     */
    public static MemorySegment RprDynamicRayCastVehicleController_new(MemorySegment chassis) {
        var mh$ = RprDynamicRayCastVehicleController_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(chassis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_set_chassis$MH() {
        return RuntimeHelper.requireNonNull(constants$40.RprDynamicRayCastVehicleController_set_chassis$MH,"RprDynamicRayCastVehicleController_set_chassis");
    }
    /**
     * {@snippet :
     * void RprDynamicRayCastVehicleController_set_chassis(struct RprDynamicRayCastVehicleController* this_, struct RprArenaKey value);
     * }
     */
    public static void RprDynamicRayCastVehicleController_set_chassis(MemorySegment this_, MemorySegment value) {
        var mh$ = RprDynamicRayCastVehicleController_set_chassis$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_set_index_forward_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprDynamicRayCastVehicleController_set_index_forward_axis$MH,"RprDynamicRayCastVehicleController_set_index_forward_axis");
    }
    /**
     * {@snippet :
     * void RprDynamicRayCastVehicleController_set_index_forward_axis(struct RprDynamicRayCastVehicleController* this_, unsigned long value);
     * }
     */
    public static void RprDynamicRayCastVehicleController_set_index_forward_axis(MemorySegment this_, long value) {
        var mh$ = RprDynamicRayCastVehicleController_set_index_forward_axis$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_set_index_up_axis$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprDynamicRayCastVehicleController_set_index_up_axis$MH,"RprDynamicRayCastVehicleController_set_index_up_axis");
    }
    /**
     * {@snippet :
     * void RprDynamicRayCastVehicleController_set_index_up_axis(struct RprDynamicRayCastVehicleController* this_, unsigned long value);
     * }
     */
    public static void RprDynamicRayCastVehicleController_set_index_up_axis(MemorySegment this_, long value) {
        var mh$ = RprDynamicRayCastVehicleController_set_index_up_axis$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_update_vehicle$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprDynamicRayCastVehicleController_update_vehicle$MH,"RprDynamicRayCastVehicleController_update_vehicle");
    }
    /**
     * {@snippet :
     * void RprDynamicRayCastVehicleController_update_vehicle(struct RprDynamicRayCastVehicleController* this_, float dt, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprQueryPipeline* queries, struct RprQueryFilter filter);
     * }
     */
    public static void RprDynamicRayCastVehicleController_update_vehicle(MemorySegment this_, float dt, MemorySegment bodies, MemorySegment colliders, MemorySegment queries, MemorySegment filter) {
        var mh$ = RprDynamicRayCastVehicleController_update_vehicle$MH();
        try {
            mh$.invokeExact(this_, dt, bodies, colliders, queries, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_wheels$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprDynamicRayCastVehicleController_wheels$MH,"RprDynamicRayCastVehicleController_wheels");
    }
    /**
     * {@snippet :
     * void RprDynamicRayCastVehicleController_wheels(struct RprDynamicRayCastVehicleController* this_, struct RprWheel** out_data, unsigned long* out_len);
     * }
     */
    public static void RprDynamicRayCastVehicleController_wheels(MemorySegment this_, MemorySegment out_data, MemorySegment out_len) {
        var mh$ = RprDynamicRayCastVehicleController_wheels$MH();
        try {
            mh$.invokeExact(this_, out_data, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprDynamicRayCastVehicleController_wheels_mut$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprDynamicRayCastVehicleController_wheels_mut$MH,"RprDynamicRayCastVehicleController_wheels_mut");
    }
    /**
     * {@snippet :
     * void RprDynamicRayCastVehicleController_wheels_mut(struct RprDynamicRayCastVehicleController* this_, struct RprWheel** out_data, unsigned long* out_len);
     * }
     */
    public static void RprDynamicRayCastVehicleController_wheels_mut(MemorySegment this_, MemorySegment out_data, MemorySegment out_len) {
        var mh$ = RprDynamicRayCastVehicleController_wheels_mut$MH();
        try {
            mh$.invokeExact(this_, out_data, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_contacts_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$41.RprGenericJoint_contacts_enabled$MH,"RprGenericJoint_contacts_enabled");
    }
    /**
     * {@snippet :
     * _Bool RprGenericJoint_contacts_enabled(struct RprGenericJoint* this_);
     * }
     */
    public static boolean RprGenericJoint_contacts_enabled(MemorySegment this_) {
        var mh$ = RprGenericJoint_contacts_enabled$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_coupled_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprGenericJoint_coupled_axes$MH,"RprGenericJoint_coupled_axes");
    }
    /**
     * {@snippet :
     * unsigned char RprGenericJoint_coupled_axes(struct RprGenericJoint* this_);
     * }
     */
    public static byte RprGenericJoint_coupled_axes(MemorySegment this_) {
        var mh$ = RprGenericJoint_coupled_axes$MH();
        try {
            return (byte)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprGenericJoint_drop$MH,"RprGenericJoint_drop");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_drop(struct RprGenericJoint* this_);
     * }
     */
    public static void RprGenericJoint_drop(MemorySegment this_) {
        var mh$ = RprGenericJoint_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_is_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprGenericJoint_is_enabled$MH,"RprGenericJoint_is_enabled");
    }
    /**
     * {@snippet :
     * _Bool RprGenericJoint_is_enabled(struct RprGenericJoint* this_);
     * }
     */
    public static boolean RprGenericJoint_is_enabled(MemorySegment this_) {
        var mh$ = RprGenericJoint_is_enabled$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_limit_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprGenericJoint_limit_axes$MH,"RprGenericJoint_limit_axes");
    }
    /**
     * {@snippet :
     * unsigned char RprGenericJoint_limit_axes(struct RprGenericJoint* this_);
     * }
     */
    public static byte RprGenericJoint_limit_axes(MemorySegment this_) {
        var mh$ = RprGenericJoint_limit_axes$MH();
        try {
            return (byte)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_limits$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprGenericJoint_limits$MH,"RprGenericJoint_limits");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_limits(struct RprGenericJoint* this_, struct RprJointLimits out[6]);
     * }
     */
    public static void RprGenericJoint_limits(MemorySegment this_, MemorySegment out) {
        var mh$ = RprGenericJoint_limits$MH();
        try {
            mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_limits_for$MH() {
        return RuntimeHelper.requireNonNull(constants$42.RprGenericJoint_limits_for$MH,"RprGenericJoint_limits_for");
    }
    /**
     * {@snippet :
     * _Bool RprGenericJoint_limits_for(struct RprGenericJoint* this_, enum RprJointAxis axis, struct RprJointLimits* out);
     * }
     */
    public static boolean RprGenericJoint_limits_for(MemorySegment this_, int axis, MemorySegment out) {
        var mh$ = RprGenericJoint_limits_for$MH();
        try {
            return (boolean)mh$.invokeExact(this_, axis, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_local_anchor1$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprGenericJoint_local_anchor1$MH,"RprGenericJoint_local_anchor1");
    }
    /**
     * {@snippet :
     * struct RprVector RprGenericJoint_local_anchor1(struct RprGenericJoint* this_);
     * }
     */
    public static MemorySegment RprGenericJoint_local_anchor1(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprGenericJoint_local_anchor1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_local_anchor2$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprGenericJoint_local_anchor2$MH,"RprGenericJoint_local_anchor2");
    }
    /**
     * {@snippet :
     * struct RprVector RprGenericJoint_local_anchor2(struct RprGenericJoint* this_);
     * }
     */
    public static MemorySegment RprGenericJoint_local_anchor2(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprGenericJoint_local_anchor2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_local_axis1$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprGenericJoint_local_axis1$MH,"RprGenericJoint_local_axis1");
    }
    /**
     * {@snippet :
     * struct RprVector RprGenericJoint_local_axis1(struct RprGenericJoint* this_);
     * }
     */
    public static MemorySegment RprGenericJoint_local_axis1(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprGenericJoint_local_axis1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_local_axis2$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprGenericJoint_local_axis2$MH,"RprGenericJoint_local_axis2");
    }
    /**
     * {@snippet :
     * struct RprVector RprGenericJoint_local_axis2(struct RprGenericJoint* this_);
     * }
     */
    public static MemorySegment RprGenericJoint_local_axis2(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprGenericJoint_local_axis2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_local_frame1$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprGenericJoint_local_frame1$MH,"RprGenericJoint_local_frame1");
    }
    /**
     * {@snippet :
     * struct RprIsometry RprGenericJoint_local_frame1(struct RprGenericJoint* this_);
     * }
     */
    public static MemorySegment RprGenericJoint_local_frame1(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprGenericJoint_local_frame1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_local_frame2$MH() {
        return RuntimeHelper.requireNonNull(constants$43.RprGenericJoint_local_frame2$MH,"RprGenericJoint_local_frame2");
    }
    /**
     * {@snippet :
     * struct RprIsometry RprGenericJoint_local_frame2(struct RprGenericJoint* this_);
     * }
     */
    public static MemorySegment RprGenericJoint_local_frame2(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprGenericJoint_local_frame2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_lock_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprGenericJoint_lock_axes$MH,"RprGenericJoint_lock_axes");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_lock_axes(struct RprGenericJoint* this_, unsigned char axes);
     * }
     */
    public static void RprGenericJoint_lock_axes(MemorySegment this_, byte axes) {
        var mh$ = RprGenericJoint_lock_axes$MH();
        try {
            mh$.invokeExact(this_, axes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_locked_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprGenericJoint_locked_axes$MH,"RprGenericJoint_locked_axes");
    }
    /**
     * {@snippet :
     * unsigned char RprGenericJoint_locked_axes(struct RprGenericJoint* this_);
     * }
     */
    public static byte RprGenericJoint_locked_axes(MemorySegment this_) {
        var mh$ = RprGenericJoint_locked_axes$MH();
        try {
            return (byte)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_motor$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprGenericJoint_motor$MH,"RprGenericJoint_motor");
    }
    /**
     * {@snippet :
     * _Bool RprGenericJoint_motor(struct RprGenericJoint* this_, enum RprJointAxis axis, struct RprJointMotor* out);
     * }
     */
    public static boolean RprGenericJoint_motor(MemorySegment this_, int axis, MemorySegment out) {
        var mh$ = RprGenericJoint_motor$MH();
        try {
            return (boolean)mh$.invokeExact(this_, axis, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_motor_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprGenericJoint_motor_axes$MH,"RprGenericJoint_motor_axes");
    }
    /**
     * {@snippet :
     * unsigned char RprGenericJoint_motor_axes(struct RprGenericJoint* this_);
     * }
     */
    public static byte RprGenericJoint_motor_axes(MemorySegment this_) {
        var mh$ = RprGenericJoint_motor_axes$MH();
        try {
            return (byte)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_motor_model$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprGenericJoint_motor_model$MH,"RprGenericJoint_motor_model");
    }
    /**
     * {@snippet :
     * _Bool RprGenericJoint_motor_model(struct RprGenericJoint* this_, enum RprJointAxis axis, enum RprMotorModel* out);
     * }
     */
    public static boolean RprGenericJoint_motor_model(MemorySegment this_, int axis, MemorySegment out) {
        var mh$ = RprGenericJoint_motor_model$MH();
        try {
            return (boolean)mh$.invokeExact(this_, axis, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_motors$MH() {
        return RuntimeHelper.requireNonNull(constants$44.RprGenericJoint_motors$MH,"RprGenericJoint_motors");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_motors(struct RprGenericJoint* this_, struct RprJointMotor out[6]);
     * }
     */
    public static void RprGenericJoint_motors(MemorySegment this_, MemorySegment out) {
        var mh$ = RprGenericJoint_motors$MH();
        try {
            mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_new$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprGenericJoint_new$MH,"RprGenericJoint_new");
    }
    /**
     * {@snippet :
     * struct RprGenericJoint* RprGenericJoint_new(unsigned char locked_axes);
     * }
     */
    public static MemorySegment RprGenericJoint_new(byte locked_axes) {
        var mh$ = RprGenericJoint_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(locked_axes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_contacts_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprGenericJoint_set_contacts_enabled$MH,"RprGenericJoint_set_contacts_enabled");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_contacts_enabled(struct RprGenericJoint* this_, _Bool value);
     * }
     */
    public static void RprGenericJoint_set_contacts_enabled(MemorySegment this_, boolean value) {
        var mh$ = RprGenericJoint_set_contacts_enabled$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_coupled_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprGenericJoint_set_coupled_axes$MH,"RprGenericJoint_set_coupled_axes");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_coupled_axes(struct RprGenericJoint* this_, unsigned char value);
     * }
     */
    public static void RprGenericJoint_set_coupled_axes(MemorySegment this_, byte value) {
        var mh$ = RprGenericJoint_set_coupled_axes$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprGenericJoint_set_enabled$MH,"RprGenericJoint_set_enabled");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_enabled(struct RprGenericJoint* this_, _Bool enabled);
     * }
     */
    public static void RprGenericJoint_set_enabled(MemorySegment this_, boolean enabled) {
        var mh$ = RprGenericJoint_set_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_limit_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprGenericJoint_set_limit_axes$MH,"RprGenericJoint_set_limit_axes");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_limit_axes(struct RprGenericJoint* this_, unsigned char value);
     * }
     */
    public static void RprGenericJoint_set_limit_axes(MemorySegment this_, byte value) {
        var mh$ = RprGenericJoint_set_limit_axes$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_limits$MH() {
        return RuntimeHelper.requireNonNull(constants$45.RprGenericJoint_set_limits$MH,"RprGenericJoint_set_limits");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_limits(struct RprGenericJoint* this_, struct RprJointLimits value[6]);
     * }
     */
    public static void RprGenericJoint_set_limits(MemorySegment this_, MemorySegment value) {
        var mh$ = RprGenericJoint_set_limits$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_limits_for$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprGenericJoint_set_limits_for$MH,"RprGenericJoint_set_limits_for");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_limits_for(struct RprGenericJoint* this_, enum RprJointAxis axis, float min, float max);
     * }
     */
    public static void RprGenericJoint_set_limits_for(MemorySegment this_, int axis, float min, float max) {
        var mh$ = RprGenericJoint_set_limits_for$MH();
        try {
            mh$.invokeExact(this_, axis, min, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_anchor1$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprGenericJoint_set_local_anchor1$MH,"RprGenericJoint_set_local_anchor1");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_local_anchor1(struct RprGenericJoint* this_, struct RprVector local_anchor);
     * }
     */
    public static void RprGenericJoint_set_local_anchor1(MemorySegment this_, MemorySegment local_anchor) {
        var mh$ = RprGenericJoint_set_local_anchor1$MH();
        try {
            mh$.invokeExact(this_, local_anchor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_anchor2$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprGenericJoint_set_local_anchor2$MH,"RprGenericJoint_set_local_anchor2");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_local_anchor2(struct RprGenericJoint* this_, struct RprVector local_anchor);
     * }
     */
    public static void RprGenericJoint_set_local_anchor2(MemorySegment this_, MemorySegment local_anchor) {
        var mh$ = RprGenericJoint_set_local_anchor2$MH();
        try {
            mh$.invokeExact(this_, local_anchor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_axis1$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprGenericJoint_set_local_axis1$MH,"RprGenericJoint_set_local_axis1");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_local_axis1(struct RprGenericJoint* this_, struct RprVector local_axis);
     * }
     */
    public static void RprGenericJoint_set_local_axis1(MemorySegment this_, MemorySegment local_axis) {
        var mh$ = RprGenericJoint_set_local_axis1$MH();
        try {
            mh$.invokeExact(this_, local_axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_axis2$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprGenericJoint_set_local_axis2$MH,"RprGenericJoint_set_local_axis2");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_local_axis2(struct RprGenericJoint* this_, struct RprVector local_axis);
     * }
     */
    public static void RprGenericJoint_set_local_axis2(MemorySegment this_, MemorySegment local_axis) {
        var mh$ = RprGenericJoint_set_local_axis2$MH();
        try {
            mh$.invokeExact(this_, local_axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_frame1$MH() {
        return RuntimeHelper.requireNonNull(constants$46.RprGenericJoint_set_local_frame1$MH,"RprGenericJoint_set_local_frame1");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_local_frame1(struct RprGenericJoint* this_, struct RprIsometry value);
     * }
     */
    public static void RprGenericJoint_set_local_frame1(MemorySegment this_, MemorySegment value) {
        var mh$ = RprGenericJoint_set_local_frame1$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_local_frame2$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprGenericJoint_set_local_frame2$MH,"RprGenericJoint_set_local_frame2");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_local_frame2(struct RprGenericJoint* this_, struct RprIsometry value);
     * }
     */
    public static void RprGenericJoint_set_local_frame2(MemorySegment this_, MemorySegment value) {
        var mh$ = RprGenericJoint_set_local_frame2$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_locked_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprGenericJoint_set_locked_axes$MH,"RprGenericJoint_set_locked_axes");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_locked_axes(struct RprGenericJoint* this_, unsigned char value);
     * }
     */
    public static void RprGenericJoint_set_locked_axes(MemorySegment this_, byte value) {
        var mh$ = RprGenericJoint_set_locked_axes$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motor$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprGenericJoint_set_motor$MH,"RprGenericJoint_set_motor");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_motor(struct RprGenericJoint* this_, enum RprJointAxis axis, float target_pos, float target_vel, float stiffness, float damping);
     * }
     */
    public static void RprGenericJoint_set_motor(MemorySegment this_, int axis, float target_pos, float target_vel, float stiffness, float damping) {
        var mh$ = RprGenericJoint_set_motor$MH();
        try {
            mh$.invokeExact(this_, axis, target_pos, target_vel, stiffness, damping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motor_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprGenericJoint_set_motor_axes$MH,"RprGenericJoint_set_motor_axes");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_motor_axes(struct RprGenericJoint* this_, unsigned char value);
     * }
     */
    public static void RprGenericJoint_set_motor_axes(MemorySegment this_, byte value) {
        var mh$ = RprGenericJoint_set_motor_axes$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motor_max_force$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprGenericJoint_set_motor_max_force$MH,"RprGenericJoint_set_motor_max_force");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_motor_max_force(struct RprGenericJoint* this_, enum RprJointAxis axis, float max_force);
     * }
     */
    public static void RprGenericJoint_set_motor_max_force(MemorySegment this_, int axis, float max_force) {
        var mh$ = RprGenericJoint_set_motor_max_force$MH();
        try {
            mh$.invokeExact(this_, axis, max_force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motor_model$MH() {
        return RuntimeHelper.requireNonNull(constants$47.RprGenericJoint_set_motor_model$MH,"RprGenericJoint_set_motor_model");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_motor_model(struct RprGenericJoint* this_, enum RprJointAxis axis, enum RprMotorModel model);
     * }
     */
    public static void RprGenericJoint_set_motor_model(MemorySegment this_, int axis, int model) {
        var mh$ = RprGenericJoint_set_motor_model$MH();
        try {
            mh$.invokeExact(this_, axis, model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motor_position$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprGenericJoint_set_motor_position$MH,"RprGenericJoint_set_motor_position");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_motor_position(struct RprGenericJoint* this_, enum RprJointAxis axis, float target_pos, float stiffness, float damping);
     * }
     */
    public static void RprGenericJoint_set_motor_position(MemorySegment this_, int axis, float target_pos, float stiffness, float damping) {
        var mh$ = RprGenericJoint_set_motor_position$MH();
        try {
            mh$.invokeExact(this_, axis, target_pos, stiffness, damping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motor_velocity$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprGenericJoint_set_motor_velocity$MH,"RprGenericJoint_set_motor_velocity");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_motor_velocity(struct RprGenericJoint* this_, enum RprJointAxis axis, float target_vel, float factor);
     * }
     */
    public static void RprGenericJoint_set_motor_velocity(MemorySegment this_, int axis, float target_vel, float factor) {
        var mh$ = RprGenericJoint_set_motor_velocity$MH();
        try {
            mh$.invokeExact(this_, axis, target_vel, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprGenericJoint_set_motors$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprGenericJoint_set_motors$MH,"RprGenericJoint_set_motors");
    }
    /**
     * {@snippet :
     * void RprGenericJoint_set_motors(struct RprGenericJoint* this_, struct RprJointMotor value[6]);
     * }
     */
    public static void RprGenericJoint_set_motors(MemorySegment this_, MemorySegment value) {
        var mh$ = RprGenericJoint_set_motors$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_all$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprImpulseJointSet_all$MH,"RprImpulseJointSet_all");
    }
    /**
     * {@snippet :
     * struct RprImpulseJointVec* RprImpulseJointSet_all(struct RprImpulseJointSet* this_);
     * }
     */
    public static MemorySegment RprImpulseJointSet_all(MemorySegment this_) {
        var mh$ = RprImpulseJointSet_all$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprImpulseJointSet_contains$MH,"RprImpulseJointSet_contains");
    }
    /**
     * {@snippet :
     * _Bool RprImpulseJointSet_contains(struct RprImpulseJointSet* this_, struct RprArenaKey handle);
     * }
     */
    public static boolean RprImpulseJointSet_contains(MemorySegment this_, MemorySegment handle) {
        var mh$ = RprImpulseJointSet_contains$MH();
        try {
            return (boolean)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$48.RprImpulseJointSet_drop$MH,"RprImpulseJointSet_drop");
    }
    /**
     * {@snippet :
     * void RprImpulseJointSet_drop(struct RprImpulseJointSet* this_);
     * }
     */
    public static void RprImpulseJointSet_drop(MemorySegment this_) {
        var mh$ = RprImpulseJointSet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_get$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprImpulseJointSet_get$MH,"RprImpulseJointSet_get");
    }
    /**
     * {@snippet :
     * struct RprImpulseJoint* RprImpulseJointSet_get(struct RprImpulseJointSet* this_, struct RprArenaKey handle);
     * }
     */
    public static MemorySegment RprImpulseJointSet_get(MemorySegment this_, MemorySegment handle) {
        var mh$ = RprImpulseJointSet_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_get_mut$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprImpulseJointSet_get_mut$MH,"RprImpulseJointSet_get_mut");
    }
    /**
     * {@snippet :
     * struct RprImpulseJoint* RprImpulseJointSet_get_mut(struct RprImpulseJointSet* this_, struct RprArenaKey handle);
     * }
     */
    public static MemorySegment RprImpulseJointSet_get_mut(MemorySegment this_, MemorySegment handle) {
        var mh$ = RprImpulseJointSet_get_mut$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprImpulseJointSet_insert$MH,"RprImpulseJointSet_insert");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprImpulseJointSet_insert(struct RprImpulseJointSet* this_, struct RprArenaKey body1, struct RprArenaKey body2, struct RprGenericJoint* data, _Bool wake_up);
     * }
     */
    public static MemorySegment RprImpulseJointSet_insert(SegmentAllocator allocator, MemorySegment this_, MemorySegment body1, MemorySegment body2, MemorySegment data, boolean wake_up) {
        var mh$ = RprImpulseJointSet_insert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, body1, body2, data, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprImpulseJointSet_is_empty$MH,"RprImpulseJointSet_is_empty");
    }
    /**
     * {@snippet :
     * _Bool RprImpulseJointSet_is_empty(struct RprImpulseJointSet* this_);
     * }
     */
    public static boolean RprImpulseJointSet_is_empty(MemorySegment this_) {
        var mh$ = RprImpulseJointSet_is_empty$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_len$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprImpulseJointSet_len$MH,"RprImpulseJointSet_len");
    }
    /**
     * {@snippet :
     * unsigned long RprImpulseJointSet_len(struct RprImpulseJointSet* this_);
     * }
     */
    public static long RprImpulseJointSet_len(MemorySegment this_) {
        var mh$ = RprImpulseJointSet_len$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$49.RprImpulseJointSet_new$MH,"RprImpulseJointSet_new");
    }
    /**
     * {@snippet :
     * struct RprImpulseJointSet* RprImpulseJointSet_new();
     * }
     */
    public static MemorySegment RprImpulseJointSet_new() {
        var mh$ = RprImpulseJointSet_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointSet_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprImpulseJointSet_remove$MH,"RprImpulseJointSet_remove");
    }
    /**
     * {@snippet :
     * struct RprImpulseJoint* RprImpulseJointSet_remove(struct RprImpulseJointSet* this_, struct RprArenaKey handle, _Bool wake_up);
     * }
     */
    public static MemorySegment RprImpulseJointSet_remove(MemorySegment this_, MemorySegment handle, boolean wake_up) {
        var mh$ = RprImpulseJointSet_remove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, handle, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointVec_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprImpulseJointVec_drop$MH,"RprImpulseJointVec_drop");
    }
    /**
     * {@snippet :
     * void RprImpulseJointVec_drop(struct RprImpulseJointVec* this_);
     * }
     */
    public static void RprImpulseJointVec_drop(MemorySegment this_) {
        var mh$ = RprImpulseJointVec_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointVec_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprImpulseJointVec_handle$MH,"RprImpulseJointVec_handle");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprImpulseJointVec_handle(struct RprImpulseJointVec* this_, unsigned long index);
     * }
     */
    public static MemorySegment RprImpulseJointVec_handle(SegmentAllocator allocator, MemorySegment this_, long index) {
        var mh$ = RprImpulseJointVec_handle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointVec_len$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprImpulseJointVec_len$MH,"RprImpulseJointVec_len");
    }
    /**
     * {@snippet :
     * unsigned long RprImpulseJointVec_len(struct RprImpulseJointVec* this_);
     * }
     */
    public static long RprImpulseJointVec_len(MemorySegment this_) {
        var mh$ = RprImpulseJointVec_len$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJointVec_value$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprImpulseJointVec_value$MH,"RprImpulseJointVec_value");
    }
    /**
     * {@snippet :
     * struct RprImpulseJoint* RprImpulseJointVec_value(struct RprImpulseJointVec* this_, unsigned long index);
     * }
     */
    public static MemorySegment RprImpulseJointVec_value(MemorySegment this_, long index) {
        var mh$ = RprImpulseJointVec_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_body1$MH() {
        return RuntimeHelper.requireNonNull(constants$50.RprImpulseJoint_body1$MH,"RprImpulseJoint_body1");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprImpulseJoint_body1(struct RprImpulseJoint* this_);
     * }
     */
    public static MemorySegment RprImpulseJoint_body1(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprImpulseJoint_body1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_body2$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprImpulseJoint_body2$MH,"RprImpulseJoint_body2");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprImpulseJoint_body2(struct RprImpulseJoint* this_);
     * }
     */
    public static MemorySegment RprImpulseJoint_body2(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprImpulseJoint_body2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_data$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprImpulseJoint_data$MH,"RprImpulseJoint_data");
    }
    /**
     * {@snippet :
     * struct RprGenericJoint* RprImpulseJoint_data(struct RprImpulseJoint* this_);
     * }
     */
    public static MemorySegment RprImpulseJoint_data(MemorySegment this_) {
        var mh$ = RprImpulseJoint_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_impulses$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprImpulseJoint_impulses$MH,"RprImpulseJoint_impulses");
    }
    /**
     * {@snippet :
     * struct RprSpacialVector RprImpulseJoint_impulses(struct RprImpulseJoint* this_);
     * }
     */
    public static MemorySegment RprImpulseJoint_impulses(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprImpulseJoint_impulses$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_retain_data$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprImpulseJoint_retain_data$MH,"RprImpulseJoint_retain_data");
    }
    /**
     * {@snippet :
     * struct RprGenericJoint* RprImpulseJoint_retain_data(struct RprImpulseJoint* this_);
     * }
     */
    public static MemorySegment RprImpulseJoint_retain_data(MemorySegment this_) {
        var mh$ = RprImpulseJoint_retain_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_set_body1$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprImpulseJoint_set_body1$MH,"RprImpulseJoint_set_body1");
    }
    /**
     * {@snippet :
     * void RprImpulseJoint_set_body1(struct RprImpulseJoint* this_, struct RprArenaKey body1);
     * }
     */
    public static void RprImpulseJoint_set_body1(MemorySegment this_, MemorySegment body1) {
        var mh$ = RprImpulseJoint_set_body1$MH();
        try {
            mh$.invokeExact(this_, body1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_set_body2$MH() {
        return RuntimeHelper.requireNonNull(constants$51.RprImpulseJoint_set_body2$MH,"RprImpulseJoint_set_body2");
    }
    /**
     * {@snippet :
     * void RprImpulseJoint_set_body2(struct RprImpulseJoint* this_, struct RprArenaKey body2);
     * }
     */
    public static void RprImpulseJoint_set_body2(MemorySegment this_, MemorySegment body2) {
        var mh$ = RprImpulseJoint_set_body2$MH();
        try {
            mh$.invokeExact(this_, body2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprImpulseJoint_set_data$MH,"RprImpulseJoint_set_data");
    }
    /**
     * {@snippet :
     * void RprImpulseJoint_set_data(struct RprImpulseJoint* this_, struct RprGenericJoint* data);
     * }
     */
    public static void RprImpulseJoint_set_data(MemorySegment this_, MemorySegment data) {
        var mh$ = RprImpulseJoint_set_data$MH();
        try {
            mh$.invokeExact(this_, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprImpulseJoint_set_impulses$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprImpulseJoint_set_impulses$MH,"RprImpulseJoint_set_impulses");
    }
    /**
     * {@snippet :
     * void RprImpulseJoint_set_impulses(struct RprImpulseJoint* this_, struct RprSpacialVector impulses);
     * }
     */
    public static void RprImpulseJoint_set_impulses(MemorySegment this_, MemorySegment impulses) {
        var mh$ = RprImpulseJoint_set_impulses$MH();
        try {
            mh$.invokeExact(this_, impulses);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIntegrationParameters_default$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprIntegrationParameters_default$MH,"RprIntegrationParameters_default");
    }
    /**
     * {@snippet :
     * struct RprIntegrationParameters RprIntegrationParameters_default();
     * }
     */
    public static MemorySegment RprIntegrationParameters_default(SegmentAllocator allocator) {
        var mh$ = RprIntegrationParameters_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIslandManager_active_dynamic_bodies$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprIslandManager_active_dynamic_bodies$MH,"RprIslandManager_active_dynamic_bodies");
    }
    /**
     * {@snippet :
     * void RprIslandManager_active_dynamic_bodies(struct RprIslandManager* this_, struct RprArenaKey** out_data, unsigned long* out_len);
     * }
     */
    public static void RprIslandManager_active_dynamic_bodies(MemorySegment this_, MemorySegment out_data, MemorySegment out_len) {
        var mh$ = RprIslandManager_active_dynamic_bodies$MH();
        try {
            mh$.invokeExact(this_, out_data, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIslandManager_active_kinematic_bodies$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprIslandManager_active_kinematic_bodies$MH,"RprIslandManager_active_kinematic_bodies");
    }
    /**
     * {@snippet :
     * void RprIslandManager_active_kinematic_bodies(struct RprIslandManager* this_, struct RprArenaKey* out_data[], unsigned long* out_len);
     * }
     */
    public static void RprIslandManager_active_kinematic_bodies(MemorySegment this_, MemorySegment out_data, MemorySegment out_len) {
        var mh$ = RprIslandManager_active_kinematic_bodies$MH();
        try {
            mh$.invokeExact(this_, out_data, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIslandManager_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$52.RprIslandManager_drop$MH,"RprIslandManager_drop");
    }
    /**
     * {@snippet :
     * void RprIslandManager_drop(struct RprIslandManager* this_);
     * }
     */
    public static void RprIslandManager_drop(MemorySegment this_) {
        var mh$ = RprIslandManager_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprIslandManager_new$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprIslandManager_new$MH,"RprIslandManager_new");
    }
    /**
     * {@snippet :
     * struct RprIslandManager* RprIslandManager_new();
     * }
     */
    public static MemorySegment RprIslandManager_new() {
        var mh$ = RprIslandManager_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprJointLimits_default$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprJointLimits_default$MH,"RprJointLimits_default");
    }
    /**
     * {@snippet :
     * struct RprJointLimits RprJointLimits_default();
     * }
     */
    public static MemorySegment RprJointLimits_default(SegmentAllocator allocator) {
        var mh$ = RprJointLimits_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprJointMotor_default$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprJointMotor_default$MH,"RprJointMotor_default");
    }
    /**
     * {@snippet :
     * struct RprJointMotor RprJointMotor_default();
     * }
     */
    public static MemorySegment RprJointMotor_default(SegmentAllocator allocator) {
        var mh$ = RprJointMotor_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_autostep$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprKinematicCharacterController_autostep$MH,"RprKinematicCharacterController_autostep");
    }
    /**
     * {@snippet :
     * _Bool RprKinematicCharacterController_autostep(struct RprKinematicCharacterController* this_, struct RprCharacterAutostep* out);
     * }
     */
    public static boolean RprKinematicCharacterController_autostep(MemorySegment this_, MemorySegment out) {
        var mh$ = RprKinematicCharacterController_autostep$MH();
        try {
            return (boolean)mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_clear_autostep$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprKinematicCharacterController_clear_autostep$MH,"RprKinematicCharacterController_clear_autostep");
    }
    /**
     * {@snippet :
     * void RprKinematicCharacterController_clear_autostep(struct RprKinematicCharacterController* this_);
     * }
     */
    public static void RprKinematicCharacterController_clear_autostep(MemorySegment this_) {
        var mh$ = RprKinematicCharacterController_clear_autostep$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_clear_snap_to_ground$MH() {
        return RuntimeHelper.requireNonNull(constants$53.RprKinematicCharacterController_clear_snap_to_ground$MH,"RprKinematicCharacterController_clear_snap_to_ground");
    }
    /**
     * {@snippet :
     * void RprKinematicCharacterController_clear_snap_to_ground(struct RprKinematicCharacterController* this_);
     * }
     */
    public static void RprKinematicCharacterController_clear_snap_to_ground(MemorySegment this_) {
        var mh$ = RprKinematicCharacterController_clear_snap_to_ground$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_default$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RprKinematicCharacterController_default$MH,"RprKinematicCharacterController_default");
    }
    /**
     * {@snippet :
     * struct RprKinematicCharacterController* RprKinematicCharacterController_default();
     * }
     */
    public static MemorySegment RprKinematicCharacterController_default() {
        var mh$ = RprKinematicCharacterController_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RprKinematicCharacterController_drop$MH,"RprKinematicCharacterController_drop");
    }
    /**
     * {@snippet :
     * void RprKinematicCharacterController_drop(struct RprKinematicCharacterController* this_);
     * }
     */
    public static void RprKinematicCharacterController_drop(MemorySegment this_) {
        var mh$ = RprKinematicCharacterController_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_max_slope_climb_angle$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RprKinematicCharacterController_max_slope_climb_angle$MH,"RprKinematicCharacterController_max_slope_climb_angle");
    }
    /**
     * {@snippet :
     * float RprKinematicCharacterController_max_slope_climb_angle(struct RprKinematicCharacterController* this_);
     * }
     */
    public static float RprKinematicCharacterController_max_slope_climb_angle(MemorySegment this_) {
        var mh$ = RprKinematicCharacterController_max_slope_climb_angle$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_min_slope_slide_angle$MH() {
        return RuntimeHelper.requireNonNull(constants$54.RprKinematicCharacterController_min_slope_slide_angle$MH,"RprKinematicCharacterController_min_slope_slide_angle");
    }
    /**
     * {@snippet :
     * float RprKinematicCharacterController_min_slope_slide_angle(struct RprKinematicCharacterController* this_);
     * }
     */
    public static float RprKinematicCharacterController_min_slope_slide_angle(MemorySegment this_) {
        var mh$ = RprKinematicCharacterController_min_slope_slide_angle$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_move_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprKinematicCharacterController_move_shape$MH,"RprKinematicCharacterController_move_shape");
    }
    /**
     * {@snippet :
     * struct RprEffectiveCharacterMovement RprKinematicCharacterController_move_shape(struct RprKinematicCharacterController* this_, float dt, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprQueryPipeline* queries, struct RprSharedShape* character_shape, struct RprIsometry character_pos, struct RprVector desired_translation, struct RprQueryFilter filter, void (**events)(struct RprCharacterCollision));
     * }
     */
    public static MemorySegment RprKinematicCharacterController_move_shape(SegmentAllocator allocator, MemorySegment this_, float dt, MemorySegment bodies, MemorySegment colliders, MemorySegment queries, MemorySegment character_shape, MemorySegment character_pos, MemorySegment desired_translation, MemorySegment filter, MemorySegment events) {
        var mh$ = RprKinematicCharacterController_move_shape$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, dt, bodies, colliders, queries, character_shape, character_pos, desired_translation, filter, events);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_new$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprKinematicCharacterController_new$MH,"RprKinematicCharacterController_new");
    }
    /**
     * {@snippet :
     * struct RprKinematicCharacterController* RprKinematicCharacterController_new(struct RprVector up, struct RprCharacterLength offset, _Bool slide, struct RprCharacterAutostep* autostep, float max_slope_climb_angle, float min_slope_slide_angle, struct RprCharacterLength* snap_to_ground);
     * }
     */
    public static MemorySegment RprKinematicCharacterController_new(MemorySegment up, MemorySegment offset, boolean slide, MemorySegment autostep, float max_slope_climb_angle, float min_slope_slide_angle, MemorySegment snap_to_ground) {
        var mh$ = RprKinematicCharacterController_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(up, offset, slide, autostep, max_slope_climb_angle, min_slope_slide_angle, snap_to_ground);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprKinematicCharacterController_offset$MH,"RprKinematicCharacterController_offset");
    }
    /**
     * {@snippet :
     * struct RprCharacterLength RprKinematicCharacterController_offset(struct RprKinematicCharacterController* this_);
     * }
     */
    public static MemorySegment RprKinematicCharacterController_offset(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprKinematicCharacterController_offset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_set_autostep$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprKinematicCharacterController_set_autostep$MH,"RprKinematicCharacterController_set_autostep");
    }
    /**
     * {@snippet :
     * void RprKinematicCharacterController_set_autostep(struct RprKinematicCharacterController* this_, struct RprCharacterAutostep value);
     * }
     */
    public static void RprKinematicCharacterController_set_autostep(MemorySegment this_, MemorySegment value) {
        var mh$ = RprKinematicCharacterController_set_autostep$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_set_max_slope_climb_angle$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprKinematicCharacterController_set_max_slope_climb_angle$MH,"RprKinematicCharacterController_set_max_slope_climb_angle");
    }
    /**
     * {@snippet :
     * void RprKinematicCharacterController_set_max_slope_climb_angle(struct RprKinematicCharacterController* this_, float value);
     * }
     */
    public static void RprKinematicCharacterController_set_max_slope_climb_angle(MemorySegment this_, float value) {
        var mh$ = RprKinematicCharacterController_set_max_slope_climb_angle$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_set_min_slope_slide_angle$MH() {
        return RuntimeHelper.requireNonNull(constants$55.RprKinematicCharacterController_set_min_slope_slide_angle$MH,"RprKinematicCharacterController_set_min_slope_slide_angle");
    }
    /**
     * {@snippet :
     * void RprKinematicCharacterController_set_min_slope_slide_angle(struct RprKinematicCharacterController* this_, float value);
     * }
     */
    public static void RprKinematicCharacterController_set_min_slope_slide_angle(MemorySegment this_, float value) {
        var mh$ = RprKinematicCharacterController_set_min_slope_slide_angle$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_set_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RprKinematicCharacterController_set_offset$MH,"RprKinematicCharacterController_set_offset");
    }
    /**
     * {@snippet :
     * void RprKinematicCharacterController_set_offset(struct RprKinematicCharacterController* this_, struct RprCharacterLength value);
     * }
     */
    public static void RprKinematicCharacterController_set_offset(MemorySegment this_, MemorySegment value) {
        var mh$ = RprKinematicCharacterController_set_offset$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_set_slide$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RprKinematicCharacterController_set_slide$MH,"RprKinematicCharacterController_set_slide");
    }
    /**
     * {@snippet :
     * void RprKinematicCharacterController_set_slide(struct RprKinematicCharacterController* this_, _Bool value);
     * }
     */
    public static void RprKinematicCharacterController_set_slide(MemorySegment this_, boolean value) {
        var mh$ = RprKinematicCharacterController_set_slide$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_set_snap_to_ground$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RprKinematicCharacterController_set_snap_to_ground$MH,"RprKinematicCharacterController_set_snap_to_ground");
    }
    /**
     * {@snippet :
     * void RprKinematicCharacterController_set_snap_to_ground(struct RprKinematicCharacterController* this_, struct RprCharacterLength value);
     * }
     */
    public static void RprKinematicCharacterController_set_snap_to_ground(MemorySegment this_, MemorySegment value) {
        var mh$ = RprKinematicCharacterController_set_snap_to_ground$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_set_up$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RprKinematicCharacterController_set_up$MH,"RprKinematicCharacterController_set_up");
    }
    /**
     * {@snippet :
     * void RprKinematicCharacterController_set_up(struct RprKinematicCharacterController* this_, struct RprVector value);
     * }
     */
    public static void RprKinematicCharacterController_set_up(MemorySegment this_, MemorySegment value) {
        var mh$ = RprKinematicCharacterController_set_up$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_slide$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RprKinematicCharacterController_slide$MH,"RprKinematicCharacterController_slide");
    }
    /**
     * {@snippet :
     * _Bool RprKinematicCharacterController_slide(struct RprKinematicCharacterController* this_);
     * }
     */
    public static boolean RprKinematicCharacterController_slide(MemorySegment this_) {
        var mh$ = RprKinematicCharacterController_slide$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_snap_to_ground$MH() {
        return RuntimeHelper.requireNonNull(constants$56.RprKinematicCharacterController_snap_to_ground$MH,"RprKinematicCharacterController_snap_to_ground");
    }
    /**
     * {@snippet :
     * _Bool RprKinematicCharacterController_snap_to_ground(struct RprKinematicCharacterController* this_, struct RprCharacterLength* out);
     * }
     */
    public static boolean RprKinematicCharacterController_snap_to_ground(MemorySegment this_, MemorySegment out) {
        var mh$ = RprKinematicCharacterController_snap_to_ground$MH();
        try {
            return (boolean)mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_solve_character_collision_impulses$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RprKinematicCharacterController_solve_character_collision_impulses$MH,"RprKinematicCharacterController_solve_character_collision_impulses");
    }
    /**
     * {@snippet :
     * void RprKinematicCharacterController_solve_character_collision_impulses(struct RprKinematicCharacterController* this_, float dt, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprQueryPipeline* queries, struct RprSharedShape* character_shape, float character_mass, struct RprCharacterCollision collision, struct RprQueryFilter filter);
     * }
     */
    public static void RprKinematicCharacterController_solve_character_collision_impulses(MemorySegment this_, float dt, MemorySegment bodies, MemorySegment colliders, MemorySegment queries, MemorySegment character_shape, float character_mass, MemorySegment collision, MemorySegment filter) {
        var mh$ = RprKinematicCharacterController_solve_character_collision_impulses$MH();
        try {
            mh$.invokeExact(this_, dt, bodies, colliders, queries, character_shape, character_mass, collision, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprKinematicCharacterController_up$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RprKinematicCharacterController_up$MH,"RprKinematicCharacterController_up");
    }
    /**
     * {@snippet :
     * struct RprVector RprKinematicCharacterController_up(struct RprKinematicCharacterController* this_);
     * }
     */
    public static MemorySegment RprKinematicCharacterController_up(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprKinematicCharacterController_up$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RprMultibodyJointSet_drop$MH,"RprMultibodyJointSet_drop");
    }
    /**
     * {@snippet :
     * void RprMultibodyJointSet_drop(struct RprMultibodyJointSet* this_);
     * }
     */
    public static void RprMultibodyJointSet_drop(MemorySegment this_) {
        var mh$ = RprMultibodyJointSet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RprMultibodyJointSet_insert$MH,"RprMultibodyJointSet_insert");
    }
    /**
     * {@snippet :
     * _Bool RprMultibodyJointSet_insert(struct RprMultibodyJointSet* this_, struct RprArenaKey body1, struct RprArenaKey body2, struct RprGenericJoint* data, _Bool wake_up, struct RprArenaKey* out);
     * }
     */
    public static boolean RprMultibodyJointSet_insert(MemorySegment this_, MemorySegment body1, MemorySegment body2, MemorySegment data, boolean wake_up, MemorySegment out) {
        var mh$ = RprMultibodyJointSet_insert$MH();
        try {
            return (boolean)mh$.invokeExact(this_, body1, body2, data, wake_up, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RprMultibodyJointSet_new$MH,"RprMultibodyJointSet_new");
    }
    /**
     * {@snippet :
     * struct RprMultibodyJointSet* RprMultibodyJointSet_new();
     * }
     */
    public static MemorySegment RprMultibodyJointSet_new() {
        var mh$ = RprMultibodyJointSet_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$57.RprMultibodyJointSet_remove$MH,"RprMultibodyJointSet_remove");
    }
    /**
     * {@snippet :
     * void RprMultibodyJointSet_remove(struct RprMultibodyJointSet* this_, struct RprArenaKey handle, _Bool wake_up);
     * }
     */
    public static void RprMultibodyJointSet_remove(MemorySegment this_, MemorySegment handle, boolean wake_up) {
        var mh$ = RprMultibodyJointSet_remove$MH();
        try {
            mh$.invokeExact(this_, handle, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_remove_joints_attached_to_rigid_body$MH() {
        return RuntimeHelper.requireNonNull(constants$58.RprMultibodyJointSet_remove_joints_attached_to_rigid_body$MH,"RprMultibodyJointSet_remove_joints_attached_to_rigid_body");
    }
    /**
     * {@snippet :
     * void RprMultibodyJointSet_remove_joints_attached_to_rigid_body(struct RprMultibodyJointSet* this_, struct RprArenaKey rb_to_remove);
     * }
     */
    public static void RprMultibodyJointSet_remove_joints_attached_to_rigid_body(MemorySegment this_, MemorySegment rb_to_remove) {
        var mh$ = RprMultibodyJointSet_remove_joints_attached_to_rigid_body$MH();
        try {
            mh$.invokeExact(this_, rb_to_remove);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprMultibodyJointSet_remove_multibody_articulations$MH() {
        return RuntimeHelper.requireNonNull(constants$58.RprMultibodyJointSet_remove_multibody_articulations$MH,"RprMultibodyJointSet_remove_multibody_articulations");
    }
    /**
     * {@snippet :
     * void RprMultibodyJointSet_remove_multibody_articulations(struct RprMultibodyJointSet* this_, struct RprArenaKey handle, _Bool wake_up);
     * }
     */
    public static void RprMultibodyJointSet_remove_multibody_articulations(MemorySegment this_, MemorySegment handle, boolean wake_up) {
        var mh$ = RprMultibodyJointSet_remove_multibody_articulations$MH();
        try {
            mh$.invokeExact(this_, handle, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprNarrowPhase_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$58.RprNarrowPhase_drop$MH,"RprNarrowPhase_drop");
    }
    /**
     * {@snippet :
     * void RprNarrowPhase_drop(struct RprNarrowPhase* this_);
     * }
     */
    public static void RprNarrowPhase_drop(MemorySegment this_) {
        var mh$ = RprNarrowPhase_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprNarrowPhase_new$MH() {
        return RuntimeHelper.requireNonNull(constants$58.RprNarrowPhase_new$MH,"RprNarrowPhase_new");
    }
    /**
     * {@snippet :
     * struct RprNarrowPhase* RprNarrowPhase_new();
     * }
     */
    public static MemorySegment RprNarrowPhase_new() {
        var mh$ = RprNarrowPhase_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPairFilterContext_bodies$MH() {
        return RuntimeHelper.requireNonNull(constants$58.RprPairFilterContext_bodies$MH,"RprPairFilterContext_bodies");
    }
    /**
     * {@snippet :
     * struct RprRigidBodySet* RprPairFilterContext_bodies(struct RprPairFilterContext* this_);
     * }
     */
    public static MemorySegment RprPairFilterContext_bodies(MemorySegment this_) {
        var mh$ = RprPairFilterContext_bodies$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPairFilterContext_collider1$MH() {
        return RuntimeHelper.requireNonNull(constants$58.RprPairFilterContext_collider1$MH,"RprPairFilterContext_collider1");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprPairFilterContext_collider1(struct RprPairFilterContext* this_);
     * }
     */
    public static MemorySegment RprPairFilterContext_collider1(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprPairFilterContext_collider1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPairFilterContext_collider2$MH() {
        return RuntimeHelper.requireNonNull(constants$59.RprPairFilterContext_collider2$MH,"RprPairFilterContext_collider2");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprPairFilterContext_collider2(struct RprPairFilterContext* this_);
     * }
     */
    public static MemorySegment RprPairFilterContext_collider2(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprPairFilterContext_collider2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPairFilterContext_colliders$MH() {
        return RuntimeHelper.requireNonNull(constants$59.RprPairFilterContext_colliders$MH,"RprPairFilterContext_colliders");
    }
    /**
     * {@snippet :
     * struct RprColliderSet* RprPairFilterContext_colliders(struct RprPairFilterContext* this_);
     * }
     */
    public static MemorySegment RprPairFilterContext_colliders(MemorySegment this_) {
        var mh$ = RprPairFilterContext_colliders$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPairFilterContext_rigid_body1$MH() {
        return RuntimeHelper.requireNonNull(constants$59.RprPairFilterContext_rigid_body1$MH,"RprPairFilterContext_rigid_body1");
    }
    /**
     * {@snippet :
     * _Bool RprPairFilterContext_rigid_body1(struct RprPairFilterContext* this_, struct RprArenaKey* out);
     * }
     */
    public static boolean RprPairFilterContext_rigid_body1(MemorySegment this_, MemorySegment out) {
        var mh$ = RprPairFilterContext_rigid_body1$MH();
        try {
            return (boolean)mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPairFilterContext_rigid_body2$MH() {
        return RuntimeHelper.requireNonNull(constants$59.RprPairFilterContext_rigid_body2$MH,"RprPairFilterContext_rigid_body2");
    }
    /**
     * {@snippet :
     * _Bool RprPairFilterContext_rigid_body2(struct RprPairFilterContext* this_, struct RprArenaKey* out);
     * }
     */
    public static boolean RprPairFilterContext_rigid_body2(MemorySegment this_, MemorySegment out) {
        var mh$ = RprPairFilterContext_rigid_body2$MH();
        try {
            return (boolean)mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPhysicsPipeline_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$59.RprPhysicsPipeline_drop$MH,"RprPhysicsPipeline_drop");
    }
    /**
     * {@snippet :
     * void RprPhysicsPipeline_drop(struct RprPhysicsPipeline* this_);
     * }
     */
    public static void RprPhysicsPipeline_drop(MemorySegment this_) {
        var mh$ = RprPhysicsPipeline_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPhysicsPipeline_new$MH() {
        return RuntimeHelper.requireNonNull(constants$59.RprPhysicsPipeline_new$MH,"RprPhysicsPipeline_new");
    }
    /**
     * {@snippet :
     * struct RprPhysicsPipeline* RprPhysicsPipeline_new();
     * }
     */
    public static MemorySegment RprPhysicsPipeline_new() {
        var mh$ = RprPhysicsPipeline_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPhysicsPipeline_step$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RprPhysicsPipeline_step$MH,"RprPhysicsPipeline_step");
    }
    /**
     * {@snippet :
     * void RprPhysicsPipeline_step(struct RprPhysicsPipeline* this_, struct RprVector gravity, struct RprIntegrationParameters integration_parameters, struct RprIslandManager* islands, struct RprBroadPhase* broad_phase, struct RprNarrowPhase* narrow_phase, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprImpulseJointSet* impulse_joints, struct RprMultibodyJointSet* multibody_joints, struct RprCCDSolver* ccd_solver, struct RprQueryPipeline* query_pipeline, struct RprPhysicsHooks* hooks, struct RprEventHandler* events);
     * }
     */
    public static void RprPhysicsPipeline_step(MemorySegment this_, MemorySegment gravity, MemorySegment integration_parameters, MemorySegment islands, MemorySegment broad_phase, MemorySegment narrow_phase, MemorySegment bodies, MemorySegment colliders, MemorySegment impulse_joints, MemorySegment multibody_joints, MemorySegment ccd_solver, MemorySegment query_pipeline, MemorySegment hooks, MemorySegment events) {
        var mh$ = RprPhysicsPipeline_step$MH();
        try {
            mh$.invokeExact(this_, gravity, integration_parameters, islands, broad_phase, narrow_phase, bodies, colliders, impulse_joints, multibody_joints, ccd_solver, query_pipeline, hooks, events);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprPhysicsPipeline_step_all$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RprPhysicsPipeline_step_all$MH,"RprPhysicsPipeline_step_all");
    }
    /**
     * {@snippet :
     * void RprPhysicsPipeline_step_all(unsigned long len, struct RprPhysicsPipeline* pipeline[], struct RprVector gravity[], struct RprIntegrationParameters integration_parameters[], struct RprIslandManager* islands[], struct RprBroadPhase* broad_phase[], struct RprNarrowPhase* narrow_phase[], struct RprRigidBodySet* bodies[], struct RprColliderSet* colliders[], struct RprImpulseJointSet* impulse_joints[], struct RprMultibodyJointSet* multibody_joints[], struct RprCCDSolver* ccd_solver[], struct RprQueryPipeline* query_pipeline[], struct RprPhysicsHooks* hooks[], struct RprEventHandler* events[]);
     * }
     */
    public static void RprPhysicsPipeline_step_all(long len, MemorySegment pipeline, MemorySegment gravity, MemorySegment integration_parameters, MemorySegment islands, MemorySegment broad_phase, MemorySegment narrow_phase, MemorySegment bodies, MemorySegment colliders, MemorySegment impulse_joints, MemorySegment multibody_joints, MemorySegment ccd_solver, MemorySegment query_pipeline, MemorySegment hooks, MemorySegment events) {
        var mh$ = RprPhysicsPipeline_step_all$MH();
        try {
            mh$.invokeExact(len, pipeline, gravity, integration_parameters, islands, broad_phase, narrow_phase, bodies, colliders, impulse_joints, multibody_joints, ccd_solver, query_pipeline, hooks, events);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryFilter_default$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RprQueryFilter_default$MH,"RprQueryFilter_default");
    }
    /**
     * {@snippet :
     * struct RprQueryFilter RprQueryFilter_default();
     * }
     */
    public static MemorySegment RprQueryFilter_default(SegmentAllocator allocator) {
        var mh$ = RprQueryFilter_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_cast_ray$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RprQueryPipeline_cast_ray$MH,"RprQueryPipeline_cast_ray");
    }
    /**
     * {@snippet :
     * _Bool RprQueryPipeline_cast_ray(struct RprQueryPipeline* this_, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprRay ray, float max_toi, _Bool solid, struct RprQueryFilter filter, struct RprSimpleRayResult* out);
     * }
     */
    public static boolean RprQueryPipeline_cast_ray(MemorySegment this_, MemorySegment bodies, MemorySegment colliders, MemorySegment ray, float max_toi, boolean solid, MemorySegment filter, MemorySegment out) {
        var mh$ = RprQueryPipeline_cast_ray$MH();
        try {
            return (boolean)mh$.invokeExact(this_, bodies, colliders, ray, max_toi, solid, filter, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_cast_ray_and_get_normal$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RprQueryPipeline_cast_ray_and_get_normal$MH,"RprQueryPipeline_cast_ray_and_get_normal");
    }
    /**
     * {@snippet :
     * _Bool RprQueryPipeline_cast_ray_and_get_normal(struct RprQueryPipeline* this_, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprRay ray, float max_toi, _Bool solid, struct RprQueryFilter filter, struct RprComplexRayResult* out);
     * }
     */
    public static boolean RprQueryPipeline_cast_ray_and_get_normal(MemorySegment this_, MemorySegment bodies, MemorySegment colliders, MemorySegment ray, float max_toi, boolean solid, MemorySegment filter, MemorySegment out) {
        var mh$ = RprQueryPipeline_cast_ray_and_get_normal$MH();
        try {
            return (boolean)mh$.invokeExact(this_, bodies, colliders, ray, max_toi, solid, filter, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_cast_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$60.RprQueryPipeline_cast_shape$MH,"RprQueryPipeline_cast_shape");
    }
    /**
     * {@snippet :
     * _Bool RprQueryPipeline_cast_shape(struct RprQueryPipeline* this_, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprIsometry shape_pos, struct RprVector shape_vel, struct RprSharedShape* shape, float max_toi, _Bool stop_at_penetration, struct RprQueryFilter filter, struct RprShapeCast* out);
     * }
     */
    public static boolean RprQueryPipeline_cast_shape(MemorySegment this_, MemorySegment bodies, MemorySegment colliders, MemorySegment shape_pos, MemorySegment shape_vel, MemorySegment shape, float max_toi, boolean stop_at_penetration, MemorySegment filter, MemorySegment out) {
        var mh$ = RprQueryPipeline_cast_shape$MH();
        try {
            return (boolean)mh$.invokeExact(this_, bodies, colliders, shape_pos, shape_vel, shape, max_toi, stop_at_penetration, filter, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_colliders_with_aabb_intersecting_aabb$MH() {
        return RuntimeHelper.requireNonNull(constants$61.RprQueryPipeline_colliders_with_aabb_intersecting_aabb$MH,"RprQueryPipeline_colliders_with_aabb_intersecting_aabb");
    }
    /**
     * {@snippet :
     * void RprQueryPipeline_colliders_with_aabb_intersecting_aabb(struct RprQueryPipeline* this_, struct RprAabb aabb, _Bool (*callback)(struct RprArenaKey));
     * }
     */
    public static void RprQueryPipeline_colliders_with_aabb_intersecting_aabb(MemorySegment this_, MemorySegment aabb, MemorySegment callback) {
        var mh$ = RprQueryPipeline_colliders_with_aabb_intersecting_aabb$MH();
        try {
            mh$.invokeExact(this_, aabb, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$61.RprQueryPipeline_drop$MH,"RprQueryPipeline_drop");
    }
    /**
     * {@snippet :
     * void RprQueryPipeline_drop(struct RprQueryPipeline* this_);
     * }
     */
    public static void RprQueryPipeline_drop(MemorySegment this_) {
        var mh$ = RprQueryPipeline_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_intersection_with_ray$MH() {
        return RuntimeHelper.requireNonNull(constants$62.RprQueryPipeline_intersection_with_ray$MH,"RprQueryPipeline_intersection_with_ray");
    }
    /**
     * {@snippet :
     * void RprQueryPipeline_intersection_with_ray(struct RprQueryPipeline* this_, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprRay ray, float max_toi, _Bool solid, struct RprQueryFilter filter, _Bool (*callback)(struct RprComplexRayResult));
     * }
     */
    public static void RprQueryPipeline_intersection_with_ray(MemorySegment this_, MemorySegment bodies, MemorySegment colliders, MemorySegment ray, float max_toi, boolean solid, MemorySegment filter, MemorySegment callback) {
        var mh$ = RprQueryPipeline_intersection_with_ray$MH();
        try {
            mh$.invokeExact(this_, bodies, colliders, ray, max_toi, solid, filter, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_intersection_with_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$62.RprQueryPipeline_intersection_with_shape$MH,"RprQueryPipeline_intersection_with_shape");
    }
    /**
     * {@snippet :
     * _Bool RprQueryPipeline_intersection_with_shape(struct RprQueryPipeline* this_, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprIsometry shape_pos, struct RprSharedShape* shape, struct RprQueryFilter filter, struct RprArenaKey* out);
     * }
     */
    public static boolean RprQueryPipeline_intersection_with_shape(MemorySegment this_, MemorySegment bodies, MemorySegment colliders, MemorySegment shape_pos, MemorySegment shape, MemorySegment filter, MemorySegment out) {
        var mh$ = RprQueryPipeline_intersection_with_shape$MH();
        try {
            return (boolean)mh$.invokeExact(this_, bodies, colliders, shape_pos, shape, filter, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_intersections_with_point$MH() {
        return RuntimeHelper.requireNonNull(constants$62.RprQueryPipeline_intersections_with_point$MH,"RprQueryPipeline_intersections_with_point");
    }
    /**
     * {@snippet :
     * void RprQueryPipeline_intersections_with_point(struct RprQueryPipeline* this_, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprVector point, struct RprQueryFilter filter, _Bool (*callback)(struct RprArenaKey));
     * }
     */
    public static void RprQueryPipeline_intersections_with_point(MemorySegment this_, MemorySegment bodies, MemorySegment colliders, MemorySegment point, MemorySegment filter, MemorySegment callback) {
        var mh$ = RprQueryPipeline_intersections_with_point$MH();
        try {
            mh$.invokeExact(this_, bodies, colliders, point, filter, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_intersections_with_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$63.RprQueryPipeline_intersections_with_shape$MH,"RprQueryPipeline_intersections_with_shape");
    }
    /**
     * {@snippet :
     * void RprQueryPipeline_intersections_with_shape(struct RprQueryPipeline* this_, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprIsometry shape_pos, struct RprSharedShape* shape, struct RprQueryFilter filter, _Bool (*callback)(struct RprArenaKey));
     * }
     */
    public static void RprQueryPipeline_intersections_with_shape(MemorySegment this_, MemorySegment bodies, MemorySegment colliders, MemorySegment shape_pos, MemorySegment shape, MemorySegment filter, MemorySegment callback) {
        var mh$ = RprQueryPipeline_intersections_with_shape$MH();
        try {
            mh$.invokeExact(this_, bodies, colliders, shape_pos, shape, filter, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_new$MH() {
        return RuntimeHelper.requireNonNull(constants$63.RprQueryPipeline_new$MH,"RprQueryPipeline_new");
    }
    /**
     * {@snippet :
     * struct RprQueryPipeline* RprQueryPipeline_new();
     * }
     */
    public static MemorySegment RprQueryPipeline_new() {
        var mh$ = RprQueryPipeline_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_nonlinear_cast_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$63.RprQueryPipeline_nonlinear_cast_shape$MH,"RprQueryPipeline_nonlinear_cast_shape");
    }
    /**
     * {@snippet :
     * _Bool RprQueryPipeline_nonlinear_cast_shape(struct RprQueryPipeline* this_, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprNonlinearRigidMotion shape_motion, struct RprSharedShape* shape, float start_time, float end_time, _Bool stop_at_penetration, struct RprQueryFilter filter, struct RprShapeCast* out);
     * }
     */
    public static boolean RprQueryPipeline_nonlinear_cast_shape(MemorySegment this_, MemorySegment bodies, MemorySegment colliders, MemorySegment shape_motion, MemorySegment shape, float start_time, float end_time, boolean stop_at_penetration, MemorySegment filter, MemorySegment out) {
        var mh$ = RprQueryPipeline_nonlinear_cast_shape$MH();
        try {
            return (boolean)mh$.invokeExact(this_, bodies, colliders, shape_motion, shape, start_time, end_time, stop_at_penetration, filter, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_project_point$MH() {
        return RuntimeHelper.requireNonNull(constants$63.RprQueryPipeline_project_point$MH,"RprQueryPipeline_project_point");
    }
    /**
     * {@snippet :
     * _Bool RprQueryPipeline_project_point(struct RprQueryPipeline* this_, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprVector point, _Bool solid, struct RprQueryFilter filter, struct RprSimplePointProject* out);
     * }
     */
    public static boolean RprQueryPipeline_project_point(MemorySegment this_, MemorySegment bodies, MemorySegment colliders, MemorySegment point, boolean solid, MemorySegment filter, MemorySegment out) {
        var mh$ = RprQueryPipeline_project_point$MH();
        try {
            return (boolean)mh$.invokeExact(this_, bodies, colliders, point, solid, filter, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_project_point_and_get_feature$MH() {
        return RuntimeHelper.requireNonNull(constants$63.RprQueryPipeline_project_point_and_get_feature$MH,"RprQueryPipeline_project_point_and_get_feature");
    }
    /**
     * {@snippet :
     * _Bool RprQueryPipeline_project_point_and_get_feature(struct RprQueryPipeline* this_, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders, struct RprVector point, struct RprQueryFilter filter, struct RprComplexPointProject* out);
     * }
     */
    public static boolean RprQueryPipeline_project_point_and_get_feature(MemorySegment this_, MemorySegment bodies, MemorySegment colliders, MemorySegment point, MemorySegment filter, MemorySegment out) {
        var mh$ = RprQueryPipeline_project_point_and_get_feature$MH();
        try {
            return (boolean)mh$.invokeExact(this_, bodies, colliders, point, filter, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_update$MH() {
        return RuntimeHelper.requireNonNull(constants$64.RprQueryPipeline_update$MH,"RprQueryPipeline_update");
    }
    /**
     * {@snippet :
     * void RprQueryPipeline_update(struct RprQueryPipeline* this_, struct RprRigidBodySet* bodies, struct RprColliderSet* colliders);
     * }
     */
    public static void RprQueryPipeline_update(MemorySegment this_, MemorySegment bodies, MemorySegment colliders) {
        var mh$ = RprQueryPipeline_update$MH();
        try {
            mh$.invokeExact(this_, bodies, colliders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprQueryPipeline_update_all$MH() {
        return RuntimeHelper.requireNonNull(constants$64.RprQueryPipeline_update_all$MH,"RprQueryPipeline_update_all");
    }
    /**
     * {@snippet :
     * void RprQueryPipeline_update_all(unsigned long len, struct RprQueryPipeline* pipeline[], struct RprRigidBodySet* bodies[], struct RprColliderSet* colliders[]);
     * }
     */
    public static void RprQueryPipeline_update_all(long len, MemorySegment pipeline, MemorySegment bodies, MemorySegment colliders) {
        var mh$ = RprQueryPipeline_update_all$MH();
        try {
            mh$.invokeExact(len, pipeline, bodies, colliders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyActivation_angular_threshold$MH() {
        return RuntimeHelper.requireNonNull(constants$64.RprRigidBodyActivation_angular_threshold$MH,"RprRigidBodyActivation_angular_threshold");
    }
    /**
     * {@snippet :
     * float RprRigidBodyActivation_angular_threshold(struct RprRigidBodyActivation* this_);
     * }
     */
    public static float RprRigidBodyActivation_angular_threshold(MemorySegment this_) {
        var mh$ = RprRigidBodyActivation_angular_threshold$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyActivation_linear_threshold$MH() {
        return RuntimeHelper.requireNonNull(constants$64.RprRigidBodyActivation_linear_threshold$MH,"RprRigidBodyActivation_linear_threshold");
    }
    /**
     * {@snippet :
     * float RprRigidBodyActivation_linear_threshold(struct RprRigidBodyActivation* this_);
     * }
     */
    public static float RprRigidBodyActivation_linear_threshold(MemorySegment this_) {
        var mh$ = RprRigidBodyActivation_linear_threshold$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyActivation_set_angular_threshold$MH() {
        return RuntimeHelper.requireNonNull(constants$64.RprRigidBodyActivation_set_angular_threshold$MH,"RprRigidBodyActivation_set_angular_threshold");
    }
    /**
     * {@snippet :
     * void RprRigidBodyActivation_set_angular_threshold(struct RprRigidBodyActivation* this_, float value);
     * }
     */
    public static void RprRigidBodyActivation_set_angular_threshold(MemorySegment this_, float value) {
        var mh$ = RprRigidBodyActivation_set_angular_threshold$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyActivation_set_linear_threshold$MH() {
        return RuntimeHelper.requireNonNull(constants$64.RprRigidBodyActivation_set_linear_threshold$MH,"RprRigidBodyActivation_set_linear_threshold");
    }
    /**
     * {@snippet :
     * void RprRigidBodyActivation_set_linear_threshold(struct RprRigidBodyActivation* this_, float value);
     * }
     */
    public static void RprRigidBodyActivation_set_linear_threshold(MemorySegment this_, float value) {
        var mh$ = RprRigidBodyActivation_set_linear_threshold$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyActivation_set_sleeping$MH() {
        return RuntimeHelper.requireNonNull(constants$65.RprRigidBodyActivation_set_sleeping$MH,"RprRigidBodyActivation_set_sleeping");
    }
    /**
     * {@snippet :
     * void RprRigidBodyActivation_set_sleeping(struct RprRigidBodyActivation* this_, _Bool value);
     * }
     */
    public static void RprRigidBodyActivation_set_sleeping(MemorySegment this_, boolean value) {
        var mh$ = RprRigidBodyActivation_set_sleeping$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyActivation_set_time_since_can_sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$65.RprRigidBodyActivation_set_time_since_can_sleep$MH,"RprRigidBodyActivation_set_time_since_can_sleep");
    }
    /**
     * {@snippet :
     * void RprRigidBodyActivation_set_time_since_can_sleep(struct RprRigidBodyActivation* this_, float value);
     * }
     */
    public static void RprRigidBodyActivation_set_time_since_can_sleep(MemorySegment this_, float value) {
        var mh$ = RprRigidBodyActivation_set_time_since_can_sleep$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyActivation_set_time_until_sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$65.RprRigidBodyActivation_set_time_until_sleep$MH,"RprRigidBodyActivation_set_time_until_sleep");
    }
    /**
     * {@snippet :
     * void RprRigidBodyActivation_set_time_until_sleep(struct RprRigidBodyActivation* this_, float value);
     * }
     */
    public static void RprRigidBodyActivation_set_time_until_sleep(MemorySegment this_, float value) {
        var mh$ = RprRigidBodyActivation_set_time_until_sleep$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyActivation_sleeping$MH() {
        return RuntimeHelper.requireNonNull(constants$65.RprRigidBodyActivation_sleeping$MH,"RprRigidBodyActivation_sleeping");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBodyActivation_sleeping(struct RprRigidBodyActivation* this_);
     * }
     */
    public static boolean RprRigidBodyActivation_sleeping(MemorySegment this_) {
        var mh$ = RprRigidBodyActivation_sleeping$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyActivation_time_since_can_sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$65.RprRigidBodyActivation_time_since_can_sleep$MH,"RprRigidBodyActivation_time_since_can_sleep");
    }
    /**
     * {@snippet :
     * float RprRigidBodyActivation_time_since_can_sleep(struct RprRigidBodyActivation* this_);
     * }
     */
    public static float RprRigidBodyActivation_time_since_can_sleep(MemorySegment this_) {
        var mh$ = RprRigidBodyActivation_time_since_can_sleep$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyActivation_time_until_sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$65.RprRigidBodyActivation_time_until_sleep$MH,"RprRigidBodyActivation_time_until_sleep");
    }
    /**
     * {@snippet :
     * float RprRigidBodyActivation_time_until_sleep(struct RprRigidBodyActivation* this_);
     * }
     */
    public static float RprRigidBodyActivation_time_until_sleep(MemorySegment this_) {
        var mh$ = RprRigidBodyActivation_time_until_sleep$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_additional_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$66.RprRigidBodyBuilder_additional_mass$MH,"RprRigidBodyBuilder_additional_mass");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_additional_mass(struct RprRigidBodyBuilder* this_, float mass);
     * }
     */
    public static void RprRigidBodyBuilder_additional_mass(MemorySegment this_, float mass) {
        var mh$ = RprRigidBodyBuilder_additional_mass$MH();
        try {
            mh$.invokeExact(this_, mass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_angular_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$66.RprRigidBodyBuilder_angular_damping$MH,"RprRigidBodyBuilder_angular_damping");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_angular_damping(struct RprRigidBodyBuilder* this_, float factor);
     * }
     */
    public static void RprRigidBodyBuilder_angular_damping(MemorySegment this_, float factor) {
        var mh$ = RprRigidBodyBuilder_angular_damping$MH();
        try {
            mh$.invokeExact(this_, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_angvel$MH() {
        return RuntimeHelper.requireNonNull(constants$66.RprRigidBodyBuilder_angvel$MH,"RprRigidBodyBuilder_angvel");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_angvel(struct RprRigidBodyBuilder* this_, struct RprAngVector angvel);
     * }
     */
    public static void RprRigidBodyBuilder_angvel(MemorySegment this_, MemorySegment angvel) {
        var mh$ = RprRigidBodyBuilder_angvel$MH();
        try {
            mh$.invokeExact(this_, angvel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_build$MH() {
        return RuntimeHelper.requireNonNull(constants$66.RprRigidBodyBuilder_build$MH,"RprRigidBodyBuilder_build");
    }
    /**
     * {@snippet :
     * struct RprRigidBody* RprRigidBodyBuilder_build(struct RprRigidBodyBuilder* this_);
     * }
     */
    public static MemorySegment RprRigidBodyBuilder_build(MemorySegment this_) {
        var mh$ = RprRigidBodyBuilder_build$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_can_sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$66.RprRigidBodyBuilder_can_sleep$MH,"RprRigidBodyBuilder_can_sleep");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_can_sleep(struct RprRigidBodyBuilder* this_, _Bool can_sleep);
     * }
     */
    public static void RprRigidBodyBuilder_can_sleep(MemorySegment this_, boolean can_sleep) {
        var mh$ = RprRigidBodyBuilder_can_sleep$MH();
        try {
            mh$.invokeExact(this_, can_sleep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_ccd_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$66.RprRigidBodyBuilder_ccd_enabled$MH,"RprRigidBodyBuilder_ccd_enabled");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_ccd_enabled(struct RprRigidBodyBuilder* this_, _Bool enabled);
     * }
     */
    public static void RprRigidBodyBuilder_ccd_enabled(MemorySegment this_, boolean enabled) {
        var mh$ = RprRigidBodyBuilder_ccd_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_dominance_group$MH() {
        return RuntimeHelper.requireNonNull(constants$67.RprRigidBodyBuilder_dominance_group$MH,"RprRigidBodyBuilder_dominance_group");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_dominance_group(struct RprRigidBodyBuilder* this_, signed char group);
     * }
     */
    public static void RprRigidBodyBuilder_dominance_group(MemorySegment this_, byte group) {
        var mh$ = RprRigidBodyBuilder_dominance_group$MH();
        try {
            mh$.invokeExact(this_, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$67.RprRigidBodyBuilder_drop$MH,"RprRigidBodyBuilder_drop");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_drop(struct RprRigidBodyBuilder* this_);
     * }
     */
    public static void RprRigidBodyBuilder_drop(MemorySegment this_) {
        var mh$ = RprRigidBodyBuilder_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_dynamic$MH() {
        return RuntimeHelper.requireNonNull(constants$67.RprRigidBodyBuilder_dynamic$MH,"RprRigidBodyBuilder_dynamic");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyBuilder* RprRigidBodyBuilder_dynamic();
     * }
     */
    public static MemorySegment RprRigidBodyBuilder_dynamic() {
        var mh$ = RprRigidBodyBuilder_dynamic$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$67.RprRigidBodyBuilder_enabled$MH,"RprRigidBodyBuilder_enabled");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_enabled(struct RprRigidBodyBuilder* this_, _Bool enabled);
     * }
     */
    public static void RprRigidBodyBuilder_enabled(MemorySegment this_, boolean enabled) {
        var mh$ = RprRigidBodyBuilder_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_fixed$MH() {
        return RuntimeHelper.requireNonNull(constants$67.RprRigidBodyBuilder_fixed$MH,"RprRigidBodyBuilder_fixed");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyBuilder* RprRigidBodyBuilder_fixed();
     * }
     */
    public static MemorySegment RprRigidBodyBuilder_fixed() {
        var mh$ = RprRigidBodyBuilder_fixed$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_gravity_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$67.RprRigidBodyBuilder_gravity_scale$MH,"RprRigidBodyBuilder_gravity_scale");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_gravity_scale(struct RprRigidBodyBuilder* this_, float scale_factor);
     * }
     */
    public static void RprRigidBodyBuilder_gravity_scale(MemorySegment this_, float scale_factor) {
        var mh$ = RprRigidBodyBuilder_gravity_scale$MH();
        try {
            mh$.invokeExact(this_, scale_factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_kinematic_position_based$MH() {
        return RuntimeHelper.requireNonNull(constants$68.RprRigidBodyBuilder_kinematic_position_based$MH,"RprRigidBodyBuilder_kinematic_position_based");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyBuilder* RprRigidBodyBuilder_kinematic_position_based();
     * }
     */
    public static MemorySegment RprRigidBodyBuilder_kinematic_position_based() {
        var mh$ = RprRigidBodyBuilder_kinematic_position_based$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_kinematic_velocity_based$MH() {
        return RuntimeHelper.requireNonNull(constants$68.RprRigidBodyBuilder_kinematic_velocity_based$MH,"RprRigidBodyBuilder_kinematic_velocity_based");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyBuilder* RprRigidBodyBuilder_kinematic_velocity_based();
     * }
     */
    public static MemorySegment RprRigidBodyBuilder_kinematic_velocity_based() {
        var mh$ = RprRigidBodyBuilder_kinematic_velocity_based$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_linear_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$68.RprRigidBodyBuilder_linear_damping$MH,"RprRigidBodyBuilder_linear_damping");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_linear_damping(struct RprRigidBodyBuilder* this_, float factor);
     * }
     */
    public static void RprRigidBodyBuilder_linear_damping(MemorySegment this_, float factor) {
        var mh$ = RprRigidBodyBuilder_linear_damping$MH();
        try {
            mh$.invokeExact(this_, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_linvel$MH() {
        return RuntimeHelper.requireNonNull(constants$68.RprRigidBodyBuilder_linvel$MH,"RprRigidBodyBuilder_linvel");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_linvel(struct RprRigidBodyBuilder* this_, struct RprVector linvel);
     * }
     */
    public static void RprRigidBodyBuilder_linvel(MemorySegment this_, MemorySegment linvel) {
        var mh$ = RprRigidBodyBuilder_linvel$MH();
        try {
            mh$.invokeExact(this_, linvel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_new$MH() {
        return RuntimeHelper.requireNonNull(constants$68.RprRigidBodyBuilder_new$MH,"RprRigidBodyBuilder_new");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyBuilder* RprRigidBodyBuilder_new(enum RprRigidBodyType body_type);
     * }
     */
    public static MemorySegment RprRigidBodyBuilder_new(int body_type) {
        var mh$ = RprRigidBodyBuilder_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_position$MH() {
        return RuntimeHelper.requireNonNull(constants$68.RprRigidBodyBuilder_position$MH,"RprRigidBodyBuilder_position");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_position(struct RprRigidBodyBuilder* this_, struct RprIsometry position);
     * }
     */
    public static void RprRigidBodyBuilder_position(MemorySegment this_, MemorySegment position) {
        var mh$ = RprRigidBodyBuilder_position$MH();
        try {
            mh$.invokeExact(this_, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$69.RprRigidBodyBuilder_rotation$MH,"RprRigidBodyBuilder_rotation");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_rotation(struct RprRigidBodyBuilder* this_, struct RprAngVector rotation);
     * }
     */
    public static void RprRigidBodyBuilder_rotation(MemorySegment this_, MemorySegment rotation) {
        var mh$ = RprRigidBodyBuilder_rotation$MH();
        try {
            mh$.invokeExact(this_, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_sleeping$MH() {
        return RuntimeHelper.requireNonNull(constants$69.RprRigidBodyBuilder_sleeping$MH,"RprRigidBodyBuilder_sleeping");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_sleeping(struct RprRigidBodyBuilder* this_, _Bool sleeping);
     * }
     */
    public static void RprRigidBodyBuilder_sleeping(MemorySegment this_, boolean sleeping) {
        var mh$ = RprRigidBodyBuilder_sleeping$MH();
        try {
            mh$.invokeExact(this_, sleeping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyBuilder_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$69.RprRigidBodyBuilder_translation$MH,"RprRigidBodyBuilder_translation");
    }
    /**
     * {@snippet :
     * void RprRigidBodyBuilder_translation(struct RprRigidBodyBuilder* this_, struct RprVector translation);
     * }
     */
    public static void RprRigidBodyBuilder_translation(MemorySegment this_, MemorySegment translation) {
        var mh$ = RprRigidBodyBuilder_translation$MH();
        try {
            mh$.invokeExact(this_, translation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyMassProps_additional_local_mprops$MH() {
        return RuntimeHelper.requireNonNull(constants$69.RprRigidBodyMassProps_additional_local_mprops$MH,"RprRigidBodyMassProps_additional_local_mprops");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBodyMassProps_additional_local_mprops(struct RprRigidBodyMassProps* this_, struct RprRigidBodyAdditionalMassProps* out);
     * }
     */
    public static boolean RprRigidBodyMassProps_additional_local_mprops(MemorySegment this_, MemorySegment out) {
        var mh$ = RprRigidBodyMassProps_additional_local_mprops$MH();
        try {
            return (boolean)mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyMassProps_effective_angular_inertia$MH() {
        return RuntimeHelper.requireNonNull(constants$69.RprRigidBodyMassProps_effective_angular_inertia$MH,"RprRigidBodyMassProps_effective_angular_inertia");
    }
    /**
     * {@snippet :
     * struct RprAngularInertia RprRigidBodyMassProps_effective_angular_inertia(struct RprRigidBodyMassProps* this_);
     * }
     */
    public static MemorySegment RprRigidBodyMassProps_effective_angular_inertia(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBodyMassProps_effective_angular_inertia$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyMassProps_effective_inv_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$69.RprRigidBodyMassProps_effective_inv_mass$MH,"RprRigidBodyMassProps_effective_inv_mass");
    }
    /**
     * {@snippet :
     * struct RprVector RprRigidBodyMassProps_effective_inv_mass(struct RprRigidBodyMassProps* this_);
     * }
     */
    public static MemorySegment RprRigidBodyMassProps_effective_inv_mass(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBodyMassProps_effective_inv_mass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyMassProps_effective_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$70.RprRigidBodyMassProps_effective_mass$MH,"RprRigidBodyMassProps_effective_mass");
    }
    /**
     * {@snippet :
     * struct RprVector RprRigidBodyMassProps_effective_mass(struct RprRigidBodyMassProps* this_);
     * }
     */
    public static MemorySegment RprRigidBodyMassProps_effective_mass(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBodyMassProps_effective_mass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyMassProps_effective_world_inv_inertia_sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$70.RprRigidBodyMassProps_effective_world_inv_inertia_sqrt$MH,"RprRigidBodyMassProps_effective_world_inv_inertia_sqrt");
    }
    /**
     * {@snippet :
     * struct RprAngularInertia RprRigidBodyMassProps_effective_world_inv_inertia_sqrt(struct RprRigidBodyMassProps* this_);
     * }
     */
    public static MemorySegment RprRigidBodyMassProps_effective_world_inv_inertia_sqrt(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBodyMassProps_effective_world_inv_inertia_sqrt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyMassProps_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$70.RprRigidBodyMassProps_flags$MH,"RprRigidBodyMassProps_flags");
    }
    /**
     * {@snippet :
     * unsigned char RprRigidBodyMassProps_flags(struct RprRigidBodyMassProps* this_);
     * }
     */
    public static byte RprRigidBodyMassProps_flags(MemorySegment this_) {
        var mh$ = RprRigidBodyMassProps_flags$MH();
        try {
            return (byte)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyMassProps_local_mprops$MH() {
        return RuntimeHelper.requireNonNull(constants$70.RprRigidBodyMassProps_local_mprops$MH,"RprRigidBodyMassProps_local_mprops");
    }
    /**
     * {@snippet :
     * struct RprMassProperties RprRigidBodyMassProps_local_mprops(struct RprRigidBodyMassProps* this_);
     * }
     */
    public static MemorySegment RprRigidBodyMassProps_local_mprops(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBodyMassProps_local_mprops$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyMassProps_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$70.RprRigidBodyMassProps_mass$MH,"RprRigidBodyMassProps_mass");
    }
    /**
     * {@snippet :
     * float RprRigidBodyMassProps_mass(struct RprRigidBodyMassProps* this_);
     * }
     */
    public static float RprRigidBodyMassProps_mass(MemorySegment this_) {
        var mh$ = RprRigidBodyMassProps_mass$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyMassProps_world_com$MH() {
        return RuntimeHelper.requireNonNull(constants$70.RprRigidBodyMassProps_world_com$MH,"RprRigidBodyMassProps_world_com");
    }
    /**
     * {@snippet :
     * struct RprVector RprRigidBodyMassProps_world_com(struct RprRigidBodyMassProps* this_);
     * }
     */
    public static MemorySegment RprRigidBodyMassProps_world_com(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBodyMassProps_world_com$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_all$MH() {
        return RuntimeHelper.requireNonNull(constants$71.RprRigidBodySet_all$MH,"RprRigidBodySet_all");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyVec* RprRigidBodySet_all(struct RprRigidBodySet* this_);
     * }
     */
    public static MemorySegment RprRigidBodySet_all(MemorySegment this_) {
        var mh$ = RprRigidBodySet_all$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$71.RprRigidBodySet_contains$MH,"RprRigidBodySet_contains");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBodySet_contains(struct RprRigidBodySet* this_, struct RprArenaKey handle);
     * }
     */
    public static boolean RprRigidBodySet_contains(MemorySegment this_, MemorySegment handle) {
        var mh$ = RprRigidBodySet_contains$MH();
        try {
            return (boolean)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$71.RprRigidBodySet_drop$MH,"RprRigidBodySet_drop");
    }
    /**
     * {@snippet :
     * void RprRigidBodySet_drop(struct RprRigidBodySet* this_);
     * }
     */
    public static void RprRigidBodySet_drop(MemorySegment this_) {
        var mh$ = RprRigidBodySet_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_get$MH() {
        return RuntimeHelper.requireNonNull(constants$71.RprRigidBodySet_get$MH,"RprRigidBodySet_get");
    }
    /**
     * {@snippet :
     * struct RprRigidBody* RprRigidBodySet_get(struct RprRigidBodySet* this_, struct RprArenaKey handle);
     * }
     */
    public static MemorySegment RprRigidBodySet_get(MemorySegment this_, MemorySegment handle) {
        var mh$ = RprRigidBodySet_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_get_mut$MH() {
        return RuntimeHelper.requireNonNull(constants$71.RprRigidBodySet_get_mut$MH,"RprRigidBodySet_get_mut");
    }
    /**
     * {@snippet :
     * struct RprRigidBody* RprRigidBodySet_get_mut(struct RprRigidBodySet* this_, struct RprArenaKey handle);
     * }
     */
    public static MemorySegment RprRigidBodySet_get_mut(MemorySegment this_, MemorySegment handle) {
        var mh$ = RprRigidBodySet_get_mut$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$71.RprRigidBodySet_insert$MH,"RprRigidBodySet_insert");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprRigidBodySet_insert(struct RprRigidBodySet* this_, struct RprRigidBody* rb);
     * }
     */
    public static MemorySegment RprRigidBodySet_insert(SegmentAllocator allocator, MemorySegment this_, MemorySegment rb) {
        var mh$ = RprRigidBodySet_insert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, rb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$72.RprRigidBodySet_is_empty$MH,"RprRigidBodySet_is_empty");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBodySet_is_empty(struct RprRigidBodySet* this_);
     * }
     */
    public static boolean RprRigidBodySet_is_empty(MemorySegment this_) {
        var mh$ = RprRigidBodySet_is_empty$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_len$MH() {
        return RuntimeHelper.requireNonNull(constants$72.RprRigidBodySet_len$MH,"RprRigidBodySet_len");
    }
    /**
     * {@snippet :
     * unsigned long RprRigidBodySet_len(struct RprRigidBodySet* this_);
     * }
     */
    public static long RprRigidBodySet_len(MemorySegment this_) {
        var mh$ = RprRigidBodySet_len$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_new$MH() {
        return RuntimeHelper.requireNonNull(constants$72.RprRigidBodySet_new$MH,"RprRigidBodySet_new");
    }
    /**
     * {@snippet :
     * struct RprRigidBodySet* RprRigidBodySet_new();
     * }
     */
    public static MemorySegment RprRigidBodySet_new() {
        var mh$ = RprRigidBodySet_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodySet_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$72.RprRigidBodySet_remove$MH,"RprRigidBodySet_remove");
    }
    /**
     * {@snippet :
     * struct RprRigidBody* RprRigidBodySet_remove(struct RprRigidBodySet* this_, struct RprArenaKey handle, struct RprIslandManager* islands, struct RprColliderSet* colliders, struct RprImpulseJointSet* impulse_joints, struct RprMultibodyJointSet* multibody_joints, _Bool remove_attached_colliders);
     * }
     */
    public static MemorySegment RprRigidBodySet_remove(MemorySegment this_, MemorySegment handle, MemorySegment islands, MemorySegment colliders, MemorySegment impulse_joints, MemorySegment multibody_joints, boolean remove_attached_colliders) {
        var mh$ = RprRigidBodySet_remove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, handle, islands, colliders, impulse_joints, multibody_joints, remove_attached_colliders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyVec_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$72.RprRigidBodyVec_drop$MH,"RprRigidBodyVec_drop");
    }
    /**
     * {@snippet :
     * void RprRigidBodyVec_drop(struct RprRigidBodyVec* this_);
     * }
     */
    public static void RprRigidBodyVec_drop(MemorySegment this_) {
        var mh$ = RprRigidBodyVec_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyVec_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$72.RprRigidBodyVec_handle$MH,"RprRigidBodyVec_handle");
    }
    /**
     * {@snippet :
     * struct RprArenaKey RprRigidBodyVec_handle(struct RprRigidBodyVec* this_, unsigned long index);
     * }
     */
    public static MemorySegment RprRigidBodyVec_handle(SegmentAllocator allocator, MemorySegment this_, long index) {
        var mh$ = RprRigidBodyVec_handle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyVec_len$MH() {
        return RuntimeHelper.requireNonNull(constants$73.RprRigidBodyVec_len$MH,"RprRigidBodyVec_len");
    }
    /**
     * {@snippet :
     * unsigned long RprRigidBodyVec_len(struct RprRigidBodyVec* this_);
     * }
     */
    public static long RprRigidBodyVec_len(MemorySegment this_) {
        var mh$ = RprRigidBodyVec_len$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBodyVec_value$MH() {
        return RuntimeHelper.requireNonNull(constants$73.RprRigidBodyVec_value$MH,"RprRigidBodyVec_value");
    }
    /**
     * {@snippet :
     * struct RprRigidBody* RprRigidBodyVec_value(struct RprRigidBodyVec* this_, unsigned long index);
     * }
     */
    public static MemorySegment RprRigidBodyVec_value(MemorySegment this_, long index) {
        var mh$ = RprRigidBodyVec_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_activation$MH() {
        return RuntimeHelper.requireNonNull(constants$73.RprRigidBody_activation$MH,"RprRigidBody_activation");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyActivation* RprRigidBody_activation(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_activation(MemorySegment this_) {
        var mh$ = RprRigidBody_activation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_activation_mut$MH() {
        return RuntimeHelper.requireNonNull(constants$73.RprRigidBody_activation_mut$MH,"RprRigidBody_activation_mut");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyActivation* RprRigidBody_activation_mut(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_activation_mut(MemorySegment this_) {
        var mh$ = RprRigidBody_activation_mut$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_add_force$MH() {
        return RuntimeHelper.requireNonNull(constants$73.RprRigidBody_add_force$MH,"RprRigidBody_add_force");
    }
    /**
     * {@snippet :
     * void RprRigidBody_add_force(struct RprRigidBody* this_, struct RprVector force, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_add_force(MemorySegment this_, MemorySegment force, boolean wake_up) {
        var mh$ = RprRigidBody_add_force$MH();
        try {
            mh$.invokeExact(this_, force, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_add_force_at_point$MH() {
        return RuntimeHelper.requireNonNull(constants$73.RprRigidBody_add_force_at_point$MH,"RprRigidBody_add_force_at_point");
    }
    /**
     * {@snippet :
     * void RprRigidBody_add_force_at_point(struct RprRigidBody* this_, struct RprVector force, struct RprVector point, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_add_force_at_point(MemorySegment this_, MemorySegment force, MemorySegment point, boolean wake_up) {
        var mh$ = RprRigidBody_add_force_at_point$MH();
        try {
            mh$.invokeExact(this_, force, point, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_add_torque$MH() {
        return RuntimeHelper.requireNonNull(constants$74.RprRigidBody_add_torque$MH,"RprRigidBody_add_torque");
    }
    /**
     * {@snippet :
     * void RprRigidBody_add_torque(struct RprRigidBody* this_, struct RprAngVector torque, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_add_torque(MemorySegment this_, MemorySegment torque, boolean wake_up) {
        var mh$ = RprRigidBody_add_torque$MH();
        try {
            mh$.invokeExact(this_, torque, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_angular_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$74.RprRigidBody_angular_damping$MH,"RprRigidBody_angular_damping");
    }
    /**
     * {@snippet :
     * float RprRigidBody_angular_damping(struct RprRigidBody* this_);
     * }
     */
    public static float RprRigidBody_angular_damping(MemorySegment this_) {
        var mh$ = RprRigidBody_angular_damping$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_angvel$MH() {
        return RuntimeHelper.requireNonNull(constants$74.RprRigidBody_angvel$MH,"RprRigidBody_angvel");
    }
    /**
     * {@snippet :
     * struct RprAngVector RprRigidBody_angvel(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_angvel(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBody_angvel$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_apply_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$74.RprRigidBody_apply_impulse$MH,"RprRigidBody_apply_impulse");
    }
    /**
     * {@snippet :
     * void RprRigidBody_apply_impulse(struct RprRigidBody* this_, struct RprVector impulse, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_apply_impulse(MemorySegment this_, MemorySegment impulse, boolean wake_up) {
        var mh$ = RprRigidBody_apply_impulse$MH();
        try {
            mh$.invokeExact(this_, impulse, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_apply_impulse_at_point$MH() {
        return RuntimeHelper.requireNonNull(constants$74.RprRigidBody_apply_impulse_at_point$MH,"RprRigidBody_apply_impulse_at_point");
    }
    /**
     * {@snippet :
     * void RprRigidBody_apply_impulse_at_point(struct RprRigidBody* this_, struct RprVector impulse, struct RprVector point, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_apply_impulse_at_point(MemorySegment this_, MemorySegment impulse, MemorySegment point, boolean wake_up) {
        var mh$ = RprRigidBody_apply_impulse_at_point$MH();
        try {
            mh$.invokeExact(this_, impulse, point, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_apply_torque_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$74.RprRigidBody_apply_torque_impulse$MH,"RprRigidBody_apply_torque_impulse");
    }
    /**
     * {@snippet :
     * void RprRigidBody_apply_torque_impulse(struct RprRigidBody* this_, struct RprAngVector torque_impulse, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_apply_torque_impulse(MemorySegment this_, MemorySegment torque_impulse, boolean wake_up) {
        var mh$ = RprRigidBody_apply_torque_impulse$MH();
        try {
            mh$.invokeExact(this_, torque_impulse, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_body_type$MH() {
        return RuntimeHelper.requireNonNull(constants$75.RprRigidBody_body_type$MH,"RprRigidBody_body_type");
    }
    /**
     * {@snippet :
     * enum RprRigidBodyType RprRigidBody_body_type(struct RprRigidBody* this_);
     * }
     */
    public static int RprRigidBody_body_type(MemorySegment this_) {
        var mh$ = RprRigidBody_body_type$MH();
        try {
            return (int)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_center_of_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$75.RprRigidBody_center_of_mass$MH,"RprRigidBody_center_of_mass");
    }
    /**
     * {@snippet :
     * struct RprVector RprRigidBody_center_of_mass(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_center_of_mass(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBody_center_of_mass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_colliders$MH() {
        return RuntimeHelper.requireNonNull(constants$75.RprRigidBody_colliders$MH,"RprRigidBody_colliders");
    }
    /**
     * {@snippet :
     * void RprRigidBody_colliders(struct RprRigidBody* this_, struct RprArenaKey** out_data, unsigned long* out_len);
     * }
     */
    public static void RprRigidBody_colliders(MemorySegment this_, MemorySegment out_data, MemorySegment out_len) {
        var mh$ = RprRigidBody_colliders$MH();
        try {
            mh$.invokeExact(this_, out_data, out_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_dominance_group$MH() {
        return RuntimeHelper.requireNonNull(constants$75.RprRigidBody_dominance_group$MH,"RprRigidBody_dominance_group");
    }
    /**
     * {@snippet :
     * signed char RprRigidBody_dominance_group(struct RprRigidBody* this_);
     * }
     */
    public static byte RprRigidBody_dominance_group(MemorySegment this_) {
        var mh$ = RprRigidBody_dominance_group$MH();
        try {
            return (byte)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$75.RprRigidBody_drop$MH,"RprRigidBody_drop");
    }
    /**
     * {@snippet :
     * void RprRigidBody_drop(struct RprRigidBody* this_);
     * }
     */
    public static void RprRigidBody_drop(MemorySegment this_) {
        var mh$ = RprRigidBody_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_effective_dominance_group$MH() {
        return RuntimeHelper.requireNonNull(constants$75.RprRigidBody_effective_dominance_group$MH,"RprRigidBody_effective_dominance_group");
    }
    /**
     * {@snippet :
     * short RprRigidBody_effective_dominance_group(struct RprRigidBody* this_);
     * }
     */
    public static short RprRigidBody_effective_dominance_group(MemorySegment this_) {
        var mh$ = RprRigidBody_effective_dominance_group$MH();
        try {
            return (short)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_enable_ccd$MH() {
        return RuntimeHelper.requireNonNull(constants$76.RprRigidBody_enable_ccd$MH,"RprRigidBody_enable_ccd");
    }
    /**
     * {@snippet :
     * void RprRigidBody_enable_ccd(struct RprRigidBody* this_, _Bool enabled);
     * }
     */
    public static void RprRigidBody_enable_ccd(MemorySegment this_, boolean enabled) {
        var mh$ = RprRigidBody_enable_ccd$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_gravitational_potential_energy$MH() {
        return RuntimeHelper.requireNonNull(constants$76.RprRigidBody_gravitational_potential_energy$MH,"RprRigidBody_gravitational_potential_energy");
    }
    /**
     * {@snippet :
     * float RprRigidBody_gravitational_potential_energy(struct RprRigidBody* this_, float dt, struct RprVector gravity);
     * }
     */
    public static float RprRigidBody_gravitational_potential_energy(MemorySegment this_, float dt, MemorySegment gravity) {
        var mh$ = RprRigidBody_gravitational_potential_energy$MH();
        try {
            return (float)mh$.invokeExact(this_, dt, gravity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_gravity_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$76.RprRigidBody_gravity_scale$MH,"RprRigidBody_gravity_scale");
    }
    /**
     * {@snippet :
     * float RprRigidBody_gravity_scale(struct RprRigidBody* this_);
     * }
     */
    public static float RprRigidBody_gravity_scale(MemorySegment this_) {
        var mh$ = RprRigidBody_gravity_scale$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_ccd_active$MH() {
        return RuntimeHelper.requireNonNull(constants$76.RprRigidBody_is_ccd_active$MH,"RprRigidBody_is_ccd_active");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBody_is_ccd_active(struct RprRigidBody* this_);
     * }
     */
    public static boolean RprRigidBody_is_ccd_active(MemorySegment this_) {
        var mh$ = RprRigidBody_is_ccd_active$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_ccd_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$76.RprRigidBody_is_ccd_enabled$MH,"RprRigidBody_is_ccd_enabled");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBody_is_ccd_enabled(struct RprRigidBody* this_);
     * }
     */
    public static boolean RprRigidBody_is_ccd_enabled(MemorySegment this_) {
        var mh$ = RprRigidBody_is_ccd_enabled$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_dynamic$MH() {
        return RuntimeHelper.requireNonNull(constants$76.RprRigidBody_is_dynamic$MH,"RprRigidBody_is_dynamic");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBody_is_dynamic(struct RprRigidBody* this_);
     * }
     */
    public static boolean RprRigidBody_is_dynamic(MemorySegment this_) {
        var mh$ = RprRigidBody_is_dynamic$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$77.RprRigidBody_is_enabled$MH,"RprRigidBody_is_enabled");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBody_is_enabled(struct RprRigidBody* this_);
     * }
     */
    public static boolean RprRigidBody_is_enabled(MemorySegment this_) {
        var mh$ = RprRigidBody_is_enabled$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_fixed$MH() {
        return RuntimeHelper.requireNonNull(constants$77.RprRigidBody_is_fixed$MH,"RprRigidBody_is_fixed");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBody_is_fixed(struct RprRigidBody* this_);
     * }
     */
    public static boolean RprRigidBody_is_fixed(MemorySegment this_) {
        var mh$ = RprRigidBody_is_fixed$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_kinematic$MH() {
        return RuntimeHelper.requireNonNull(constants$77.RprRigidBody_is_kinematic$MH,"RprRigidBody_is_kinematic");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBody_is_kinematic(struct RprRigidBody* this_);
     * }
     */
    public static boolean RprRigidBody_is_kinematic(MemorySegment this_) {
        var mh$ = RprRigidBody_is_kinematic$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_rotation_locked$MH() {
        return RuntimeHelper.requireNonNull(constants$77.RprRigidBody_is_rotation_locked$MH,"RprRigidBody_is_rotation_locked");
    }
    /**
     * {@snippet :
     * void RprRigidBody_is_rotation_locked(struct RprRigidBody* this_, _Bool *out[3]);
     * }
     */
    public static void RprRigidBody_is_rotation_locked(MemorySegment this_, MemorySegment out) {
        var mh$ = RprRigidBody_is_rotation_locked$MH();
        try {
            mh$.invokeExact(this_, out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_sleeping$MH() {
        return RuntimeHelper.requireNonNull(constants$77.RprRigidBody_is_sleeping$MH,"RprRigidBody_is_sleeping");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBody_is_sleeping(struct RprRigidBody* this_);
     * }
     */
    public static boolean RprRigidBody_is_sleeping(MemorySegment this_) {
        var mh$ = RprRigidBody_is_sleeping$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_is_translation_locked$MH() {
        return RuntimeHelper.requireNonNull(constants$77.RprRigidBody_is_translation_locked$MH,"RprRigidBody_is_translation_locked");
    }
    /**
     * {@snippet :
     * _Bool RprRigidBody_is_translation_locked(struct RprRigidBody* this_);
     * }
     */
    public static boolean RprRigidBody_is_translation_locked(MemorySegment this_) {
        var mh$ = RprRigidBody_is_translation_locked$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_kinetic_energy$MH() {
        return RuntimeHelper.requireNonNull(constants$78.RprRigidBody_kinetic_energy$MH,"RprRigidBody_kinetic_energy");
    }
    /**
     * {@snippet :
     * float RprRigidBody_kinetic_energy(struct RprRigidBody* this_);
     * }
     */
    public static float RprRigidBody_kinetic_energy(MemorySegment this_) {
        var mh$ = RprRigidBody_kinetic_energy$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_linear_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$78.RprRigidBody_linear_damping$MH,"RprRigidBody_linear_damping");
    }
    /**
     * {@snippet :
     * float RprRigidBody_linear_damping(struct RprRigidBody* this_);
     * }
     */
    public static float RprRigidBody_linear_damping(MemorySegment this_) {
        var mh$ = RprRigidBody_linear_damping$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_linvel$MH() {
        return RuntimeHelper.requireNonNull(constants$78.RprRigidBody_linvel$MH,"RprRigidBody_linvel");
    }
    /**
     * {@snippet :
     * struct RprVector RprRigidBody_linvel(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_linvel(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBody_linvel$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_lock_rotations$MH() {
        return RuntimeHelper.requireNonNull(constants$78.RprRigidBody_lock_rotations$MH,"RprRigidBody_lock_rotations");
    }
    /**
     * {@snippet :
     * void RprRigidBody_lock_rotations(struct RprRigidBody* this_, _Bool locked, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_lock_rotations(MemorySegment this_, boolean locked, boolean wake_up) {
        var mh$ = RprRigidBody_lock_rotations$MH();
        try {
            mh$.invokeExact(this_, locked, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_lock_translations$MH() {
        return RuntimeHelper.requireNonNull(constants$78.RprRigidBody_lock_translations$MH,"RprRigidBody_lock_translations");
    }
    /**
     * {@snippet :
     * void RprRigidBody_lock_translations(struct RprRigidBody* this_, _Bool locked, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_lock_translations(MemorySegment this_, boolean locked, boolean wake_up) {
        var mh$ = RprRigidBody_lock_translations$MH();
        try {
            mh$.invokeExact(this_, locked, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_locked_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$78.RprRigidBody_locked_axes$MH,"RprRigidBody_locked_axes");
    }
    /**
     * {@snippet :
     * unsigned char RprRigidBody_locked_axes(struct RprRigidBody* this_);
     * }
     */
    public static byte RprRigidBody_locked_axes(MemorySegment this_) {
        var mh$ = RprRigidBody_locked_axes$MH();
        try {
            return (byte)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$79.RprRigidBody_mass$MH,"RprRigidBody_mass");
    }
    /**
     * {@snippet :
     * float RprRigidBody_mass(struct RprRigidBody* this_);
     * }
     */
    public static float RprRigidBody_mass(MemorySegment this_) {
        var mh$ = RprRigidBody_mass$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_mass_properties$MH() {
        return RuntimeHelper.requireNonNull(constants$79.RprRigidBody_mass_properties$MH,"RprRigidBody_mass_properties");
    }
    /**
     * {@snippet :
     * struct RprRigidBodyMassProps* RprRigidBody_mass_properties(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_mass_properties(MemorySegment this_) {
        var mh$ = RprRigidBody_mass_properties$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_next_position$MH() {
        return RuntimeHelper.requireNonNull(constants$79.RprRigidBody_next_position$MH,"RprRigidBody_next_position");
    }
    /**
     * {@snippet :
     * struct RprIsometry RprRigidBody_next_position(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_next_position(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBody_next_position$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_position$MH() {
        return RuntimeHelper.requireNonNull(constants$79.RprRigidBody_position$MH,"RprRigidBody_position");
    }
    /**
     * {@snippet :
     * struct RprIsometry RprRigidBody_position(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_position(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBody_position$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_predict_position_using_velocity_and_forces$MH() {
        return RuntimeHelper.requireNonNull(constants$79.RprRigidBody_predict_position_using_velocity_and_forces$MH,"RprRigidBody_predict_position_using_velocity_and_forces");
    }
    /**
     * {@snippet :
     * struct RprIsometry RprRigidBody_predict_position_using_velocity_and_forces(struct RprRigidBody* this_, float dt);
     * }
     */
    public static MemorySegment RprRigidBody_predict_position_using_velocity_and_forces(SegmentAllocator allocator, MemorySegment this_, float dt) {
        var mh$ = RprRigidBody_predict_position_using_velocity_and_forces$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, dt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_recompute_mass_properties_from_colliders$MH() {
        return RuntimeHelper.requireNonNull(constants$79.RprRigidBody_recompute_mass_properties_from_colliders$MH,"RprRigidBody_recompute_mass_properties_from_colliders");
    }
    /**
     * {@snippet :
     * void RprRigidBody_recompute_mass_properties_from_colliders(struct RprRigidBody* this_, struct RprColliderSet* colliders);
     * }
     */
    public static void RprRigidBody_recompute_mass_properties_from_colliders(MemorySegment this_, MemorySegment colliders) {
        var mh$ = RprRigidBody_recompute_mass_properties_from_colliders$MH();
        try {
            mh$.invokeExact(this_, colliders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_reset_forces$MH() {
        return RuntimeHelper.requireNonNull(constants$80.RprRigidBody_reset_forces$MH,"RprRigidBody_reset_forces");
    }
    /**
     * {@snippet :
     * void RprRigidBody_reset_forces(struct RprRigidBody* this_, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_reset_forces(MemorySegment this_, boolean wake_up) {
        var mh$ = RprRigidBody_reset_forces$MH();
        try {
            mh$.invokeExact(this_, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_reset_torques$MH() {
        return RuntimeHelper.requireNonNull(constants$80.RprRigidBody_reset_torques$MH,"RprRigidBody_reset_torques");
    }
    /**
     * {@snippet :
     * void RprRigidBody_reset_torques(struct RprRigidBody* this_, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_reset_torques(MemorySegment this_, boolean wake_up) {
        var mh$ = RprRigidBody_reset_torques$MH();
        try {
            mh$.invokeExact(this_, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$80.RprRigidBody_rotation$MH,"RprRigidBody_rotation");
    }
    /**
     * {@snippet :
     * struct RprRotation RprRigidBody_rotation(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_rotation(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBody_rotation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_additional_mass$MH() {
        return RuntimeHelper.requireNonNull(constants$80.RprRigidBody_set_additional_mass$MH,"RprRigidBody_set_additional_mass");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_additional_mass(struct RprRigidBody* this_, float additional_mass, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_set_additional_mass(MemorySegment this_, float additional_mass, boolean wake_up) {
        var mh$ = RprRigidBody_set_additional_mass$MH();
        try {
            mh$.invokeExact(this_, additional_mass, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_angular_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$80.RprRigidBody_set_angular_damping$MH,"RprRigidBody_set_angular_damping");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_angular_damping(struct RprRigidBody* this_, float damping);
     * }
     */
    public static void RprRigidBody_set_angular_damping(MemorySegment this_, float damping) {
        var mh$ = RprRigidBody_set_angular_damping$MH();
        try {
            mh$.invokeExact(this_, damping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_angvel$MH() {
        return RuntimeHelper.requireNonNull(constants$80.RprRigidBody_set_angvel$MH,"RprRigidBody_set_angvel");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_angvel(struct RprRigidBody* this_, struct RprVector angvel, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_set_angvel(MemorySegment this_, MemorySegment angvel, boolean wake_up) {
        var mh$ = RprRigidBody_set_angvel$MH();
        try {
            mh$.invokeExact(this_, angvel, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_body_type$MH() {
        return RuntimeHelper.requireNonNull(constants$81.RprRigidBody_set_body_type$MH,"RprRigidBody_set_body_type");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_body_type(struct RprRigidBody* this_, enum RprRigidBodyType status, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_set_body_type(MemorySegment this_, int status, boolean wake_up) {
        var mh$ = RprRigidBody_set_body_type$MH();
        try {
            mh$.invokeExact(this_, status, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_dominance_group$MH() {
        return RuntimeHelper.requireNonNull(constants$81.RprRigidBody_set_dominance_group$MH,"RprRigidBody_set_dominance_group");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_dominance_group(struct RprRigidBody* this_, signed char dominance);
     * }
     */
    public static void RprRigidBody_set_dominance_group(MemorySegment this_, byte dominance) {
        var mh$ = RprRigidBody_set_dominance_group$MH();
        try {
            mh$.invokeExact(this_, dominance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$81.RprRigidBody_set_enabled$MH,"RprRigidBody_set_enabled");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_enabled(struct RprRigidBody* this_, _Bool enabled);
     * }
     */
    public static void RprRigidBody_set_enabled(MemorySegment this_, boolean enabled) {
        var mh$ = RprRigidBody_set_enabled$MH();
        try {
            mh$.invokeExact(this_, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_enabled_rotations$MH() {
        return RuntimeHelper.requireNonNull(constants$81.RprRigidBody_set_enabled_rotations$MH,"RprRigidBody_set_enabled_rotations");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_enabled_rotations(struct RprRigidBody* this_, _Bool allow_rotations_x, _Bool allow_rotations_y, _Bool allow_rotations_z, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_set_enabled_rotations(MemorySegment this_, boolean allow_rotations_x, boolean allow_rotations_y, boolean allow_rotations_z, boolean wake_up) {
        var mh$ = RprRigidBody_set_enabled_rotations$MH();
        try {
            mh$.invokeExact(this_, allow_rotations_x, allow_rotations_y, allow_rotations_z, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_enabled_translations$MH() {
        return RuntimeHelper.requireNonNull(constants$81.RprRigidBody_set_enabled_translations$MH,"RprRigidBody_set_enabled_translations");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_enabled_translations(struct RprRigidBody* this_, _Bool allow_translation_x, _Bool allow_translation_y, _Bool allow_translation_z, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_set_enabled_translations(MemorySegment this_, boolean allow_translation_x, boolean allow_translation_y, boolean allow_translation_z, boolean wake_up) {
        var mh$ = RprRigidBody_set_enabled_translations$MH();
        try {
            mh$.invokeExact(this_, allow_translation_x, allow_translation_y, allow_translation_z, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_gravity_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$81.RprRigidBody_set_gravity_scale$MH,"RprRigidBody_set_gravity_scale");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_gravity_scale(struct RprRigidBody* this_, float scale, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_set_gravity_scale(MemorySegment this_, float scale, boolean wake_up) {
        var mh$ = RprRigidBody_set_gravity_scale$MH();
        try {
            mh$.invokeExact(this_, scale, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_linear_damping$MH() {
        return RuntimeHelper.requireNonNull(constants$82.RprRigidBody_set_linear_damping$MH,"RprRigidBody_set_linear_damping");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_linear_damping(struct RprRigidBody* this_, float damping);
     * }
     */
    public static void RprRigidBody_set_linear_damping(MemorySegment this_, float damping) {
        var mh$ = RprRigidBody_set_linear_damping$MH();
        try {
            mh$.invokeExact(this_, damping);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_linvel$MH() {
        return RuntimeHelper.requireNonNull(constants$82.RprRigidBody_set_linvel$MH,"RprRigidBody_set_linvel");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_linvel(struct RprRigidBody* this_, struct RprVector linvel, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_set_linvel(MemorySegment this_, MemorySegment linvel, boolean wake_up) {
        var mh$ = RprRigidBody_set_linvel$MH();
        try {
            mh$.invokeExact(this_, linvel, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_locked_axes$MH() {
        return RuntimeHelper.requireNonNull(constants$82.RprRigidBody_set_locked_axes$MH,"RprRigidBody_set_locked_axes");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_locked_axes(struct RprRigidBody* this_, unsigned char locked_axes, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_set_locked_axes(MemorySegment this_, byte locked_axes, boolean wake_up) {
        var mh$ = RprRigidBody_set_locked_axes$MH();
        try {
            mh$.invokeExact(this_, locked_axes, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_next_kinematic_position$MH() {
        return RuntimeHelper.requireNonNull(constants$82.RprRigidBody_set_next_kinematic_position$MH,"RprRigidBody_set_next_kinematic_position");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_next_kinematic_position(struct RprRigidBody* this_, struct RprIsometry pos);
     * }
     */
    public static void RprRigidBody_set_next_kinematic_position(MemorySegment this_, MemorySegment pos) {
        var mh$ = RprRigidBody_set_next_kinematic_position$MH();
        try {
            mh$.invokeExact(this_, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_next_kinematic_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$82.RprRigidBody_set_next_kinematic_rotation$MH,"RprRigidBody_set_next_kinematic_rotation");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_next_kinematic_rotation(struct RprRigidBody* this_, struct RprRotation rotation);
     * }
     */
    public static void RprRigidBody_set_next_kinematic_rotation(MemorySegment this_, MemorySegment rotation) {
        var mh$ = RprRigidBody_set_next_kinematic_rotation$MH();
        try {
            mh$.invokeExact(this_, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_next_kinematic_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$82.RprRigidBody_set_next_kinematic_translation$MH,"RprRigidBody_set_next_kinematic_translation");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_next_kinematic_translation(struct RprRigidBody* this_, struct RprVector translation);
     * }
     */
    public static void RprRigidBody_set_next_kinematic_translation(MemorySegment this_, MemorySegment translation) {
        var mh$ = RprRigidBody_set_next_kinematic_translation$MH();
        try {
            mh$.invokeExact(this_, translation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_position$MH() {
        return RuntimeHelper.requireNonNull(constants$83.RprRigidBody_set_position$MH,"RprRigidBody_set_position");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_position(struct RprRigidBody* this_, struct RprIsometry pos, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_set_position(MemorySegment this_, MemorySegment pos, boolean wake_up) {
        var mh$ = RprRigidBody_set_position$MH();
        try {
            mh$.invokeExact(this_, pos, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$83.RprRigidBody_set_rotation$MH,"RprRigidBody_set_rotation");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_rotation(struct RprRigidBody* this_, struct RprRotation rotation, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_set_rotation(MemorySegment this_, MemorySegment rotation, boolean wake_up) {
        var mh$ = RprRigidBody_set_rotation$MH();
        try {
            mh$.invokeExact(this_, rotation, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_set_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$83.RprRigidBody_set_translation$MH,"RprRigidBody_set_translation");
    }
    /**
     * {@snippet :
     * void RprRigidBody_set_translation(struct RprRigidBody* this_, struct RprVector translation, _Bool wake_up);
     * }
     */
    public static void RprRigidBody_set_translation(MemorySegment this_, MemorySegment translation, boolean wake_up) {
        var mh$ = RprRigidBody_set_translation$MH();
        try {
            mh$.invokeExact(this_, translation, wake_up);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$83.RprRigidBody_sleep$MH,"RprRigidBody_sleep");
    }
    /**
     * {@snippet :
     * void RprRigidBody_sleep(struct RprRigidBody* this_);
     * }
     */
    public static void RprRigidBody_sleep(MemorySegment this_) {
        var mh$ = RprRigidBody_sleep$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_translation$MH() {
        return RuntimeHelper.requireNonNull(constants$83.RprRigidBody_translation$MH,"RprRigidBody_translation");
    }
    /**
     * {@snippet :
     * struct RprVector RprRigidBody_translation(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_translation(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBody_translation$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_user_force$MH() {
        return RuntimeHelper.requireNonNull(constants$83.RprRigidBody_user_force$MH,"RprRigidBody_user_force");
    }
    /**
     * {@snippet :
     * struct RprVector RprRigidBody_user_force(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_user_force(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBody_user_force$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_user_torque$MH() {
        return RuntimeHelper.requireNonNull(constants$84.RprRigidBody_user_torque$MH,"RprRigidBody_user_torque");
    }
    /**
     * {@snippet :
     * struct RprAngVector RprRigidBody_user_torque(struct RprRigidBody* this_);
     * }
     */
    public static MemorySegment RprRigidBody_user_torque(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprRigidBody_user_torque$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_velocity_at_point$MH() {
        return RuntimeHelper.requireNonNull(constants$84.RprRigidBody_velocity_at_point$MH,"RprRigidBody_velocity_at_point");
    }
    /**
     * {@snippet :
     * struct RprVector RprRigidBody_velocity_at_point(struct RprRigidBody* this_, struct RprVector point);
     * }
     */
    public static MemorySegment RprRigidBody_velocity_at_point(SegmentAllocator allocator, MemorySegment this_, MemorySegment point) {
        var mh$ = RprRigidBody_velocity_at_point$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprRigidBody_wake_up$MH() {
        return RuntimeHelper.requireNonNull(constants$84.RprRigidBody_wake_up$MH,"RprRigidBody_wake_up");
    }
    /**
     * {@snippet :
     * void RprRigidBody_wake_up(struct RprRigidBody* this_, _Bool strong);
     * }
     */
    public static void RprRigidBody_wake_up(MemorySegment this_, boolean strong) {
        var mh$ = RprRigidBody_wake_up$MH();
        try {
            mh$.invokeExact(this_, strong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$84.RprSharedShape_acquire$MH,"RprSharedShape_acquire");
    }
    /**
     * {@snippet :
     * void RprSharedShape_acquire(struct RprSharedShape* this_);
     * }
     */
    public static void RprSharedShape_acquire(MemorySegment this_) {
        var mh$ = RprSharedShape_acquire$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_ball$MH() {
        return RuntimeHelper.requireNonNull(constants$84.RprSharedShape_ball$MH,"RprSharedShape_ball");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_ball(float radius);
     * }
     */
    public static MemorySegment RprSharedShape_ball(float radius) {
        var mh$ = RprSharedShape_ball$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_capsule$MH() {
        return RuntimeHelper.requireNonNull(constants$84.RprSharedShape_capsule$MH,"RprSharedShape_capsule");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_capsule(struct RprVector a, struct RprVector b, float radius);
     * }
     */
    public static MemorySegment RprSharedShape_capsule(MemorySegment a, MemorySegment b, float radius) {
        var mh$ = RprSharedShape_capsule$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b, radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_compound$MH() {
        return RuntimeHelper.requireNonNull(constants$85.RprSharedShape_compound$MH,"RprSharedShape_compound");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_compound(struct RprCompoundChild shapes_data[], unsigned long shapes_len);
     * }
     */
    public static MemorySegment RprSharedShape_compound(MemorySegment shapes_data, long shapes_len) {
        var mh$ = RprSharedShape_compound$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(shapes_data, shapes_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_cone$MH() {
        return RuntimeHelper.requireNonNull(constants$85.RprSharedShape_cone$MH,"RprSharedShape_cone");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_cone(float half_height, float radius);
     * }
     */
    public static MemorySegment RprSharedShape_cone(float half_height, float radius) {
        var mh$ = RprSharedShape_cone$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(half_height, radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_convex_decomposition$MH() {
        return RuntimeHelper.requireNonNull(constants$85.RprSharedShape_convex_decomposition$MH,"RprSharedShape_convex_decomposition");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_convex_decomposition(struct RprVector vertices_data[], unsigned long vertices_len, unsigned int indices_data[], unsigned long indices_len);
     * }
     */
    public static MemorySegment RprSharedShape_convex_decomposition(MemorySegment vertices_data, long vertices_len, MemorySegment indices_data, long indices_len) {
        var mh$ = RprSharedShape_convex_decomposition$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vertices_data, vertices_len, indices_data, indices_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_convex_decomposition_with_params$MH() {
        return RuntimeHelper.requireNonNull(constants$85.RprSharedShape_convex_decomposition_with_params$MH,"RprSharedShape_convex_decomposition_with_params");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_convex_decomposition_with_params(struct RprVector vertices_data[], unsigned long vertices_len, unsigned int indices_data[], unsigned long indices_len, struct RprVHACDParameters* params);
     * }
     */
    public static MemorySegment RprSharedShape_convex_decomposition_with_params(MemorySegment vertices_data, long vertices_len, MemorySegment indices_data, long indices_len, MemorySegment params) {
        var mh$ = RprSharedShape_convex_decomposition_with_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vertices_data, vertices_len, indices_data, indices_len, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_convex_hull$MH() {
        return RuntimeHelper.requireNonNull(constants$85.RprSharedShape_convex_hull$MH,"RprSharedShape_convex_hull");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_convex_hull(struct RprVector points_data[], unsigned long points_len);
     * }
     */
    public static MemorySegment RprSharedShape_convex_hull(MemorySegment points_data, long points_len) {
        var mh$ = RprSharedShape_convex_hull$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(points_data, points_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_convex_mesh$MH() {
        return RuntimeHelper.requireNonNull(constants$85.RprSharedShape_convex_mesh$MH,"RprSharedShape_convex_mesh");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_convex_mesh(struct RprVector* points_data, unsigned long points_len, unsigned int indices_data[], unsigned long indices_len);
     * }
     */
    public static MemorySegment RprSharedShape_convex_mesh(MemorySegment points_data, long points_len, MemorySegment indices_data, long indices_len) {
        var mh$ = RprSharedShape_convex_mesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(points_data, points_len, indices_data, indices_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_cuboid$MH() {
        return RuntimeHelper.requireNonNull(constants$86.RprSharedShape_cuboid$MH,"RprSharedShape_cuboid");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_cuboid(float hx, float hy, float hz);
     * }
     */
    public static MemorySegment RprSharedShape_cuboid(float hx, float hy, float hz) {
        var mh$ = RprSharedShape_cuboid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hx, hy, hz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_cylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$86.RprSharedShape_cylinder$MH,"RprSharedShape_cylinder");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_cylinder(float half_height, float radius);
     * }
     */
    public static MemorySegment RprSharedShape_cylinder(float half_height, float radius) {
        var mh$ = RprSharedShape_cylinder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(half_height, radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_data$MH() {
        return RuntimeHelper.requireNonNull(constants$86.RprSharedShape_data$MH,"RprSharedShape_data");
    }
    /**
     * {@snippet :
     * void* RprSharedShape_data(struct RprSharedShape* this_);
     * }
     */
    public static MemorySegment RprSharedShape_data(MemorySegment this_) {
        var mh$ = RprSharedShape_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_halfspace$MH() {
        return RuntimeHelper.requireNonNull(constants$86.RprSharedShape_halfspace$MH,"RprSharedShape_halfspace");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_halfspace(struct RprVector outward_normal);
     * }
     */
    public static MemorySegment RprSharedShape_halfspace(MemorySegment outward_normal) {
        var mh$ = RprSharedShape_halfspace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(outward_normal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_heightfield$MH() {
        return RuntimeHelper.requireNonNull(constants$86.RprSharedShape_heightfield$MH,"RprSharedShape_heightfield");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_heightfield(unsigned long heights_rows, unsigned long heights_cols, float heights_data[], struct RprVector scale);
     * }
     */
    public static MemorySegment RprSharedShape_heightfield(long heights_rows, long heights_cols, MemorySegment heights_data, MemorySegment scale) {
        var mh$ = RprSharedShape_heightfield$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(heights_rows, heights_cols, heights_data, scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_polyline$MH() {
        return RuntimeHelper.requireNonNull(constants$86.RprSharedShape_polyline$MH,"RprSharedShape_polyline");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_polyline(struct RprVector vertices_data[], unsigned long vertices_len, unsigned int indices_data[], unsigned long indices_len);
     * }
     */
    public static MemorySegment RprSharedShape_polyline(MemorySegment vertices_data, long vertices_len, MemorySegment indices_data, long indices_len) {
        var mh$ = RprSharedShape_polyline$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vertices_data, vertices_len, indices_data, indices_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_release$MH() {
        return RuntimeHelper.requireNonNull(constants$87.RprSharedShape_release$MH,"RprSharedShape_release");
    }
    /**
     * {@snippet :
     * void RprSharedShape_release(struct RprSharedShape* this_);
     * }
     */
    public static void RprSharedShape_release(MemorySegment this_) {
        var mh$ = RprSharedShape_release$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_round_cone$MH() {
        return RuntimeHelper.requireNonNull(constants$87.RprSharedShape_round_cone$MH,"RprSharedShape_round_cone");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_round_cone(float half_height, float radius, float border_radius);
     * }
     */
    public static MemorySegment RprSharedShape_round_cone(float half_height, float radius, float border_radius) {
        var mh$ = RprSharedShape_round_cone$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(half_height, radius, border_radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_round_convex_decomposition$MH() {
        return RuntimeHelper.requireNonNull(constants$87.RprSharedShape_round_convex_decomposition$MH,"RprSharedShape_round_convex_decomposition");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_round_convex_decomposition(struct RprVector vertices_data[], unsigned long vertices_len, unsigned int indices_data[], unsigned long indices_len, float border_radius);
     * }
     */
    public static MemorySegment RprSharedShape_round_convex_decomposition(MemorySegment vertices_data, long vertices_len, MemorySegment indices_data, long indices_len, float border_radius) {
        var mh$ = RprSharedShape_round_convex_decomposition$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vertices_data, vertices_len, indices_data, indices_len, border_radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_round_convex_decomposition_with_params$MH() {
        return RuntimeHelper.requireNonNull(constants$87.RprSharedShape_round_convex_decomposition_with_params$MH,"RprSharedShape_round_convex_decomposition_with_params");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_round_convex_decomposition_with_params(struct RprVector vertices_data[], unsigned long vertices_len, unsigned int indices_data[], unsigned long indices_len, struct RprVHACDParameters* params, float border_radius);
     * }
     */
    public static MemorySegment RprSharedShape_round_convex_decomposition_with_params(MemorySegment vertices_data, long vertices_len, MemorySegment indices_data, long indices_len, MemorySegment params, float border_radius) {
        var mh$ = RprSharedShape_round_convex_decomposition_with_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vertices_data, vertices_len, indices_data, indices_len, params, border_radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_round_convex_hull$MH() {
        return RuntimeHelper.requireNonNull(constants$87.RprSharedShape_round_convex_hull$MH,"RprSharedShape_round_convex_hull");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_round_convex_hull(struct RprVector points_data[], unsigned long points_len, float border_radius);
     * }
     */
    public static MemorySegment RprSharedShape_round_convex_hull(MemorySegment points_data, long points_len, float border_radius) {
        var mh$ = RprSharedShape_round_convex_hull$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(points_data, points_len, border_radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_round_convex_mesh$MH() {
        return RuntimeHelper.requireNonNull(constants$87.RprSharedShape_round_convex_mesh$MH,"RprSharedShape_round_convex_mesh");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_round_convex_mesh(struct RprVector* points_data, unsigned long points_len, unsigned int indices_data[], unsigned long indices_len, float border_radius);
     * }
     */
    public static MemorySegment RprSharedShape_round_convex_mesh(MemorySegment points_data, long points_len, MemorySegment indices_data, long indices_len, float border_radius) {
        var mh$ = RprSharedShape_round_convex_mesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(points_data, points_len, indices_data, indices_len, border_radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_round_cuboid$MH() {
        return RuntimeHelper.requireNonNull(constants$88.RprSharedShape_round_cuboid$MH,"RprSharedShape_round_cuboid");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_round_cuboid(float hx, float hy, float hz, float border_radius);
     * }
     */
    public static MemorySegment RprSharedShape_round_cuboid(float hx, float hy, float hz, float border_radius) {
        var mh$ = RprSharedShape_round_cuboid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hx, hy, hz, border_radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_round_cylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$88.RprSharedShape_round_cylinder$MH,"RprSharedShape_round_cylinder");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_round_cylinder(float half_height, float radius, float border_radius);
     * }
     */
    public static MemorySegment RprSharedShape_round_cylinder(float half_height, float radius, float border_radius) {
        var mh$ = RprSharedShape_round_cylinder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(half_height, radius, border_radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_round_triangle$MH() {
        return RuntimeHelper.requireNonNull(constants$88.RprSharedShape_round_triangle$MH,"RprSharedShape_round_triangle");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_round_triangle(struct RprVector a, struct RprVector b, struct RprVector c, float border_radius);
     * }
     */
    public static MemorySegment RprSharedShape_round_triangle(MemorySegment a, MemorySegment b, MemorySegment c, float border_radius) {
        var mh$ = RprSharedShape_round_triangle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b, c, border_radius);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_segment$MH() {
        return RuntimeHelper.requireNonNull(constants$88.RprSharedShape_segment$MH,"RprSharedShape_segment");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_segment(struct RprVector a, struct RprVector b);
     * }
     */
    public static MemorySegment RprSharedShape_segment(MemorySegment a, MemorySegment b) {
        var mh$ = RprSharedShape_segment$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_strong_count$MH() {
        return RuntimeHelper.requireNonNull(constants$88.RprSharedShape_strong_count$MH,"RprSharedShape_strong_count");
    }
    /**
     * {@snippet :
     * unsigned long RprSharedShape_strong_count(struct RprSharedShape* this_);
     * }
     */
    public static long RprSharedShape_strong_count(MemorySegment this_) {
        var mh$ = RprSharedShape_strong_count$MH();
        try {
            return (long)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_triangle$MH() {
        return RuntimeHelper.requireNonNull(constants$88.RprSharedShape_triangle$MH,"RprSharedShape_triangle");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_triangle(struct RprVector a, struct RprVector b, struct RprVector c);
     * }
     */
    public static MemorySegment RprSharedShape_triangle(MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = RprSharedShape_triangle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSharedShape_trimesh$MH() {
        return RuntimeHelper.requireNonNull(constants$89.RprSharedShape_trimesh$MH,"RprSharedShape_trimesh");
    }
    /**
     * {@snippet :
     * struct RprSharedShape* RprSharedShape_trimesh(struct RprVector vertices_data[], unsigned long vertices_len, unsigned int indices_data[], unsigned long indices_len, unsigned char flags);
     * }
     */
    public static MemorySegment RprSharedShape_trimesh(MemorySegment vertices_data, long vertices_len, MemorySegment indices_data, long indices_len, byte flags) {
        var mh$ = RprSharedShape_trimesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vertices_data, vertices_len, indices_data, indices_len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_dist$MH() {
        return RuntimeHelper.requireNonNull(constants$89.RprSolverContact_dist$MH,"RprSolverContact_dist");
    }
    /**
     * {@snippet :
     * float RprSolverContact_dist(struct RprSolverContact* this_);
     * }
     */
    public static float RprSolverContact_dist(MemorySegment this_) {
        var mh$ = RprSolverContact_dist$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_friction$MH() {
        return RuntimeHelper.requireNonNull(constants$89.RprSolverContact_friction$MH,"RprSolverContact_friction");
    }
    /**
     * {@snippet :
     * float RprSolverContact_friction(struct RprSolverContact* this_);
     * }
     */
    public static float RprSolverContact_friction(MemorySegment this_) {
        var mh$ = RprSolverContact_friction$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_is_bouncy$MH() {
        return RuntimeHelper.requireNonNull(constants$89.RprSolverContact_is_bouncy$MH,"RprSolverContact_is_bouncy");
    }
    /**
     * {@snippet :
     * _Bool RprSolverContact_is_bouncy(struct RprSolverContact* this_);
     * }
     */
    public static boolean RprSolverContact_is_bouncy(MemorySegment this_) {
        var mh$ = RprSolverContact_is_bouncy$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_is_new$MH() {
        return RuntimeHelper.requireNonNull(constants$89.RprSolverContact_is_new$MH,"RprSolverContact_is_new");
    }
    /**
     * {@snippet :
     * _Bool RprSolverContact_is_new(struct RprSolverContact* this_);
     * }
     */
    public static boolean RprSolverContact_is_new(MemorySegment this_) {
        var mh$ = RprSolverContact_is_new$MH();
        try {
            return (boolean)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_point$MH() {
        return RuntimeHelper.requireNonNull(constants$89.RprSolverContact_point$MH,"RprSolverContact_point");
    }
    /**
     * {@snippet :
     * struct RprVector RprSolverContact_point(struct RprSolverContact* this_);
     * }
     */
    public static MemorySegment RprSolverContact_point(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprSolverContact_point$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_restitution$MH() {
        return RuntimeHelper.requireNonNull(constants$90.RprSolverContact_restitution$MH,"RprSolverContact_restitution");
    }
    /**
     * {@snippet :
     * float RprSolverContact_restitution(struct RprSolverContact* this_);
     * }
     */
    public static float RprSolverContact_restitution(MemorySegment this_) {
        var mh$ = RprSolverContact_restitution$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_set_dist$MH() {
        return RuntimeHelper.requireNonNull(constants$90.RprSolverContact_set_dist$MH,"RprSolverContact_set_dist");
    }
    /**
     * {@snippet :
     * void RprSolverContact_set_dist(struct RprSolverContact* this_, float value);
     * }
     */
    public static void RprSolverContact_set_dist(MemorySegment this_, float value) {
        var mh$ = RprSolverContact_set_dist$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_set_friction$MH() {
        return RuntimeHelper.requireNonNull(constants$90.RprSolverContact_set_friction$MH,"RprSolverContact_set_friction");
    }
    /**
     * {@snippet :
     * void RprSolverContact_set_friction(struct RprSolverContact* this_, float value);
     * }
     */
    public static void RprSolverContact_set_friction(MemorySegment this_, float value) {
        var mh$ = RprSolverContact_set_friction$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_set_point$MH() {
        return RuntimeHelper.requireNonNull(constants$90.RprSolverContact_set_point$MH,"RprSolverContact_set_point");
    }
    /**
     * {@snippet :
     * void RprSolverContact_set_point(struct RprSolverContact* this_, struct RprVector value);
     * }
     */
    public static void RprSolverContact_set_point(MemorySegment this_, MemorySegment value) {
        var mh$ = RprSolverContact_set_point$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_set_restitution$MH() {
        return RuntimeHelper.requireNonNull(constants$90.RprSolverContact_set_restitution$MH,"RprSolverContact_set_restitution");
    }
    /**
     * {@snippet :
     * void RprSolverContact_set_restitution(struct RprSolverContact* this_, float value);
     * }
     */
    public static void RprSolverContact_set_restitution(MemorySegment this_, float value) {
        var mh$ = RprSolverContact_set_restitution$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_set_tangent_velocity$MH() {
        return RuntimeHelper.requireNonNull(constants$90.RprSolverContact_set_tangent_velocity$MH,"RprSolverContact_set_tangent_velocity");
    }
    /**
     * {@snippet :
     * void RprSolverContact_set_tangent_velocity(struct RprSolverContact* this_, struct RprVector value);
     * }
     */
    public static void RprSolverContact_set_tangent_velocity(MemorySegment this_, MemorySegment value) {
        var mh$ = RprSolverContact_set_tangent_velocity$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprSolverContact_tangent_velocity$MH() {
        return RuntimeHelper.requireNonNull(constants$91.RprSolverContact_tangent_velocity$MH,"RprSolverContact_tangent_velocity");
    }
    /**
     * {@snippet :
     * struct RprVector RprSolverContact_tangent_velocity(struct RprSolverContact* this_);
     * }
     */
    public static MemorySegment RprSolverContact_tangent_velocity(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprSolverContact_tangent_velocity$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprVHACDParameters_default$MH() {
        return RuntimeHelper.requireNonNull(constants$91.RprVHACDParameters_default$MH,"RprVHACDParameters_default");
    }
    /**
     * {@snippet :
     * struct RprVHACDParameters RprVHACDParameters_default();
     * }
     */
    public static MemorySegment RprVHACDParameters_default(SegmentAllocator allocator) {
        var mh$ = RprVHACDParameters_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprVHACD_decompose$MH() {
        return RuntimeHelper.requireNonNull(constants$91.RprVHACD_decompose$MH,"RprVHACD_decompose");
    }
    /**
     * {@snippet :
     * struct RprVHACD* RprVHACD_decompose(struct RprVHACDParameters* params, struct RprVector* points_data, unsigned long points_len, unsigned int* indices_data, unsigned long indices_len, _Bool keep_voxel_to_primitives_map);
     * }
     */
    public static MemorySegment RprVHACD_decompose(MemorySegment params, MemorySegment points_data, long points_len, MemorySegment indices_data, long indices_len, boolean keep_voxel_to_primitives_map) {
        var mh$ = RprVHACD_decompose$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(params, points_data, points_len, indices_data, indices_len, keep_voxel_to_primitives_map);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprVHACD_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$91.RprVHACD_drop$MH,"RprVHACD_drop");
    }
    /**
     * {@snippet :
     * void RprVHACD_drop(struct RprVHACD* this_);
     * }
     */
    public static void RprVHACD_drop(MemorySegment this_) {
        var mh$ = RprVHACD_drop$MH();
        try {
            mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheelTuning_default$MH() {
        return RuntimeHelper.requireNonNull(constants$91.RprWheelTuning_default$MH,"RprWheelTuning_default");
    }
    /**
     * {@snippet :
     * struct RprWheelTuning RprWheelTuning_default();
     * }
     */
    public static MemorySegment RprWheelTuning_default(SegmentAllocator allocator) {
        var mh$ = RprWheelTuning_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_axle$MH() {
        return RuntimeHelper.requireNonNull(constants$91.RprWheel_axle$MH,"RprWheel_axle");
    }
    /**
     * {@snippet :
     * struct RprVector RprWheel_axle(struct RprWheel* this_);
     * }
     */
    public static MemorySegment RprWheel_axle(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprWheel_axle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_axle_cs$MH() {
        return RuntimeHelper.requireNonNull(constants$92.RprWheel_axle_cs$MH,"RprWheel_axle_cs");
    }
    /**
     * {@snippet :
     * struct RprVector RprWheel_axle_cs(struct RprWheel* this_);
     * }
     */
    public static MemorySegment RprWheel_axle_cs(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprWheel_axle_cs$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_brake$MH() {
        return RuntimeHelper.requireNonNull(constants$92.RprWheel_brake$MH,"RprWheel_brake");
    }
    /**
     * {@snippet :
     * float RprWheel_brake(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_brake(MemorySegment this_) {
        var mh$ = RprWheel_brake$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_center$MH() {
        return RuntimeHelper.requireNonNull(constants$92.RprWheel_center$MH,"RprWheel_center");
    }
    /**
     * {@snippet :
     * struct RprVector RprWheel_center(struct RprWheel* this_);
     * }
     */
    public static MemorySegment RprWheel_center(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprWheel_center$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_chassis_connection_point_cs$MH() {
        return RuntimeHelper.requireNonNull(constants$92.RprWheel_chassis_connection_point_cs$MH,"RprWheel_chassis_connection_point_cs");
    }
    /**
     * {@snippet :
     * struct RprVector RprWheel_chassis_connection_point_cs(struct RprWheel* this_);
     * }
     */
    public static MemorySegment RprWheel_chassis_connection_point_cs(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprWheel_chassis_connection_point_cs$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_damping_compression$MH() {
        return RuntimeHelper.requireNonNull(constants$92.RprWheel_damping_compression$MH,"RprWheel_damping_compression");
    }
    /**
     * {@snippet :
     * float RprWheel_damping_compression(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_damping_compression(MemorySegment this_) {
        var mh$ = RprWheel_damping_compression$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_damping_relaxation$MH() {
        return RuntimeHelper.requireNonNull(constants$92.RprWheel_damping_relaxation$MH,"RprWheel_damping_relaxation");
    }
    /**
     * {@snippet :
     * float RprWheel_damping_relaxation(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_damping_relaxation(MemorySegment this_) {
        var mh$ = RprWheel_damping_relaxation$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_direction_cs$MH() {
        return RuntimeHelper.requireNonNull(constants$93.RprWheel_direction_cs$MH,"RprWheel_direction_cs");
    }
    /**
     * {@snippet :
     * struct RprVector RprWheel_direction_cs(struct RprWheel* this_);
     * }
     */
    public static MemorySegment RprWheel_direction_cs(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprWheel_direction_cs$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_engine_force$MH() {
        return RuntimeHelper.requireNonNull(constants$93.RprWheel_engine_force$MH,"RprWheel_engine_force");
    }
    /**
     * {@snippet :
     * float RprWheel_engine_force(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_engine_force(MemorySegment this_) {
        var mh$ = RprWheel_engine_force$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_forward_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$93.RprWheel_forward_impulse$MH,"RprWheel_forward_impulse");
    }
    /**
     * {@snippet :
     * float RprWheel_forward_impulse(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_forward_impulse(MemorySegment this_) {
        var mh$ = RprWheel_forward_impulse$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_max_suspension_force$MH() {
        return RuntimeHelper.requireNonNull(constants$93.RprWheel_max_suspension_force$MH,"RprWheel_max_suspension_force");
    }
    /**
     * {@snippet :
     * float RprWheel_max_suspension_force(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_max_suspension_force(MemorySegment this_) {
        var mh$ = RprWheel_max_suspension_force$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_max_suspension_travel$MH() {
        return RuntimeHelper.requireNonNull(constants$93.RprWheel_max_suspension_travel$MH,"RprWheel_max_suspension_travel");
    }
    /**
     * {@snippet :
     * float RprWheel_max_suspension_travel(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_max_suspension_travel(MemorySegment this_) {
        var mh$ = RprWheel_max_suspension_travel$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_radius$MH() {
        return RuntimeHelper.requireNonNull(constants$93.RprWheel_radius$MH,"RprWheel_radius");
    }
    /**
     * {@snippet :
     * float RprWheel_radius(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_radius(MemorySegment this_) {
        var mh$ = RprWheel_radius$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$94.RprWheel_rotation$MH,"RprWheel_rotation");
    }
    /**
     * {@snippet :
     * float RprWheel_rotation(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_rotation(MemorySegment this_) {
        var mh$ = RprWheel_rotation$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_axle_cs$MH() {
        return RuntimeHelper.requireNonNull(constants$94.RprWheel_set_axle_cs$MH,"RprWheel_set_axle_cs");
    }
    /**
     * {@snippet :
     * void RprWheel_set_axle_cs(struct RprWheel* this_, struct RprVector value);
     * }
     */
    public static void RprWheel_set_axle_cs(MemorySegment this_, MemorySegment value) {
        var mh$ = RprWheel_set_axle_cs$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_brake$MH() {
        return RuntimeHelper.requireNonNull(constants$94.RprWheel_set_brake$MH,"RprWheel_set_brake");
    }
    /**
     * {@snippet :
     * void RprWheel_set_brake(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_brake(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_brake$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_chassis_connection_point_cs$MH() {
        return RuntimeHelper.requireNonNull(constants$94.RprWheel_set_chassis_connection_point_cs$MH,"RprWheel_set_chassis_connection_point_cs");
    }
    /**
     * {@snippet :
     * void RprWheel_set_chassis_connection_point_cs(struct RprWheel* this_, struct RprVector value);
     * }
     */
    public static void RprWheel_set_chassis_connection_point_cs(MemorySegment this_, MemorySegment value) {
        var mh$ = RprWheel_set_chassis_connection_point_cs$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_damping_compression$MH() {
        return RuntimeHelper.requireNonNull(constants$94.RprWheel_set_damping_compression$MH,"RprWheel_set_damping_compression");
    }
    /**
     * {@snippet :
     * void RprWheel_set_damping_compression(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_damping_compression(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_damping_compression$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_damping_relaxation$MH() {
        return RuntimeHelper.requireNonNull(constants$94.RprWheel_set_damping_relaxation$MH,"RprWheel_set_damping_relaxation");
    }
    /**
     * {@snippet :
     * void RprWheel_set_damping_relaxation(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_damping_relaxation(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_damping_relaxation$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_direction_cs$MH() {
        return RuntimeHelper.requireNonNull(constants$95.RprWheel_set_direction_cs$MH,"RprWheel_set_direction_cs");
    }
    /**
     * {@snippet :
     * void RprWheel_set_direction_cs(struct RprWheel* this_, struct RprVector value);
     * }
     */
    public static void RprWheel_set_direction_cs(MemorySegment this_, MemorySegment value) {
        var mh$ = RprWheel_set_direction_cs$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_engine_force$MH() {
        return RuntimeHelper.requireNonNull(constants$95.RprWheel_set_engine_force$MH,"RprWheel_set_engine_force");
    }
    /**
     * {@snippet :
     * void RprWheel_set_engine_force(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_engine_force(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_engine_force$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_forward_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$95.RprWheel_set_forward_impulse$MH,"RprWheel_set_forward_impulse");
    }
    /**
     * {@snippet :
     * void RprWheel_set_forward_impulse(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_forward_impulse(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_forward_impulse$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_max_suspension_force$MH() {
        return RuntimeHelper.requireNonNull(constants$95.RprWheel_set_max_suspension_force$MH,"RprWheel_set_max_suspension_force");
    }
    /**
     * {@snippet :
     * void RprWheel_set_max_suspension_force(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_max_suspension_force(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_max_suspension_force$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_max_suspension_travel$MH() {
        return RuntimeHelper.requireNonNull(constants$95.RprWheel_set_max_suspension_travel$MH,"RprWheel_set_max_suspension_travel");
    }
    /**
     * {@snippet :
     * void RprWheel_set_max_suspension_travel(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_max_suspension_travel(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_max_suspension_travel$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_radius$MH() {
        return RuntimeHelper.requireNonNull(constants$95.RprWheel_set_radius$MH,"RprWheel_set_radius");
    }
    /**
     * {@snippet :
     * void RprWheel_set_radius(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_radius(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_radius$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_rotation$MH() {
        return RuntimeHelper.requireNonNull(constants$96.RprWheel_set_rotation$MH,"RprWheel_set_rotation");
    }
    /**
     * {@snippet :
     * void RprWheel_set_rotation(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_rotation(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_rotation$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_side_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$96.RprWheel_set_side_impulse$MH,"RprWheel_set_side_impulse");
    }
    /**
     * {@snippet :
     * void RprWheel_set_side_impulse(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_side_impulse(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_side_impulse$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_steering$MH() {
        return RuntimeHelper.requireNonNull(constants$96.RprWheel_set_steering$MH,"RprWheel_set_steering");
    }
    /**
     * {@snippet :
     * void RprWheel_set_steering(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_steering(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_steering$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_suspension_rest_length$MH() {
        return RuntimeHelper.requireNonNull(constants$96.RprWheel_set_suspension_rest_length$MH,"RprWheel_set_suspension_rest_length");
    }
    /**
     * {@snippet :
     * void RprWheel_set_suspension_rest_length(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_suspension_rest_length(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_suspension_rest_length$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_suspension_stiffness$MH() {
        return RuntimeHelper.requireNonNull(constants$96.RprWheel_set_suspension_stiffness$MH,"RprWheel_set_suspension_stiffness");
    }
    /**
     * {@snippet :
     * void RprWheel_set_suspension_stiffness(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_suspension_stiffness(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_suspension_stiffness$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_set_wheel_suspension_force$MH() {
        return RuntimeHelper.requireNonNull(constants$96.RprWheel_set_wheel_suspension_force$MH,"RprWheel_set_wheel_suspension_force");
    }
    /**
     * {@snippet :
     * void RprWheel_set_wheel_suspension_force(struct RprWheel* this_, float value);
     * }
     */
    public static void RprWheel_set_wheel_suspension_force(MemorySegment this_, float value) {
        var mh$ = RprWheel_set_wheel_suspension_force$MH();
        try {
            mh$.invokeExact(this_, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_side_impulse$MH() {
        return RuntimeHelper.requireNonNull(constants$97.RprWheel_side_impulse$MH,"RprWheel_side_impulse");
    }
    /**
     * {@snippet :
     * float RprWheel_side_impulse(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_side_impulse(MemorySegment this_) {
        var mh$ = RprWheel_side_impulse$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_steering$MH() {
        return RuntimeHelper.requireNonNull(constants$97.RprWheel_steering$MH,"RprWheel_steering");
    }
    /**
     * {@snippet :
     * float RprWheel_steering(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_steering(MemorySegment this_) {
        var mh$ = RprWheel_steering$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_suspension$MH() {
        return RuntimeHelper.requireNonNull(constants$97.RprWheel_suspension$MH,"RprWheel_suspension");
    }
    /**
     * {@snippet :
     * struct RprVector RprWheel_suspension(struct RprWheel* this_);
     * }
     */
    public static MemorySegment RprWheel_suspension(SegmentAllocator allocator, MemorySegment this_) {
        var mh$ = RprWheel_suspension$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_suspension_rest_length$MH() {
        return RuntimeHelper.requireNonNull(constants$97.RprWheel_suspension_rest_length$MH,"RprWheel_suspension_rest_length");
    }
    /**
     * {@snippet :
     * float RprWheel_suspension_rest_length(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_suspension_rest_length(MemorySegment this_) {
        var mh$ = RprWheel_suspension_rest_length$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_suspension_stiffness$MH() {
        return RuntimeHelper.requireNonNull(constants$97.RprWheel_suspension_stiffness$MH,"RprWheel_suspension_stiffness");
    }
    /**
     * {@snippet :
     * float RprWheel_suspension_stiffness(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_suspension_stiffness(MemorySegment this_) {
        var mh$ = RprWheel_suspension_stiffness$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RprWheel_wheel_suspension_force$MH() {
        return RuntimeHelper.requireNonNull(constants$97.RprWheel_wheel_suspension_force$MH,"RprWheel_wheel_suspension_force");
    }
    /**
     * {@snippet :
     * float RprWheel_wheel_suspension_force(struct RprWheel* this_);
     * }
     */
    public static float RprWheel_wheel_suspension_force(MemorySegment this_) {
        var mh$ = RprWheel_wheel_suspension_force$MH();
        try {
            return (float)mh$.invokeExact(this_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$98.NULL$ADDR;
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define __WCLONE 2147483648
     * }
     */
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    /**
     * {@snippet :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_ANG_AXES 56
     * }
     */
    public static int RprJointAxesMask_ANG_AXES() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_FREE_PRISMATIC_AXES 1
     * }
     */
    public static int RprJointAxesMask_FREE_PRISMATIC_AXES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_FREE_REVOLUTE_AXES 8
     * }
     */
    public static int RprJointAxesMask_FREE_REVOLUTE_AXES() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_FREE_SPHERICAL_AXES 56
     * }
     */
    public static int RprJointAxesMask_FREE_SPHERICAL_AXES() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_LIN_AXES 7
     * }
     */
    public static int RprJointAxesMask_LIN_AXES() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_LOCKED_FIXED_AXES 63
     * }
     */
    public static int RprJointAxesMask_LOCKED_FIXED_AXES() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_LOCKED_PRISMATIC_AXES 62
     * }
     */
    public static int RprJointAxesMask_LOCKED_PRISMATIC_AXES() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_LOCKED_REVOLUTE_AXES 55
     * }
     */
    public static int RprJointAxesMask_LOCKED_REVOLUTE_AXES() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * #define RprJointAxesMask_LOCKED_SPHERICAL_AXES 7
     * }
     */
    public static int RprJointAxesMask_LOCKED_SPHERICAL_AXES() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define RprLockedAxes_ROTATION_LOCKED 56
     * }
     */
    public static int RprLockedAxes_ROTATION_LOCKED() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define RprLockedAxes_ROTATION_LOCKED_X 8
     * }
     */
    public static int RprLockedAxes_ROTATION_LOCKED_X() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define RprLockedAxes_ROTATION_LOCKED_Y 16
     * }
     */
    public static int RprLockedAxes_ROTATION_LOCKED_Y() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define RprLockedAxes_ROTATION_LOCKED_Z 32
     * }
     */
    public static int RprLockedAxes_ROTATION_LOCKED_Z() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define RprLockedAxes_TRANSLATION_LOCKED 7
     * }
     */
    public static int RprLockedAxes_TRANSLATION_LOCKED() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define RprLockedAxes_TRANSLATION_LOCKED_X 1
     * }
     */
    public static int RprLockedAxes_TRANSLATION_LOCKED_X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RprLockedAxes_TRANSLATION_LOCKED_Y 2
     * }
     */
    public static int RprLockedAxes_TRANSLATION_LOCKED_Y() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RprLockedAxes_TRANSLATION_LOCKED_Z 4
     * }
     */
    public static int RprLockedAxes_TRANSLATION_LOCKED_Z() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RprQueryFilterFlags_EXCLUDE_DYNAMIC 8
     * }
     */
    public static int RprQueryFilterFlags_EXCLUDE_DYNAMIC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define RprQueryFilterFlags_EXCLUDE_FIXED 2
     * }
     */
    public static int RprQueryFilterFlags_EXCLUDE_FIXED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RprQueryFilterFlags_EXCLUDE_KINEMATIC 4
     * }
     */
    public static int RprQueryFilterFlags_EXCLUDE_KINEMATIC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RprQueryFilterFlags_EXCLUDE_SENSORS 16
     * }
     */
    public static int RprQueryFilterFlags_EXCLUDE_SENSORS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define RprQueryFilterFlags_EXCLUDE_SOLIDS 32
     * }
     */
    public static int RprQueryFilterFlags_EXCLUDE_SOLIDS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define RprQueryFilterFlags_ONLY_DYNAMIC 6
     * }
     */
    public static int RprQueryFilterFlags_ONLY_DYNAMIC() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define RprQueryFilterFlags_ONLY_FIXED 12
     * }
     */
    public static int RprQueryFilterFlags_ONLY_FIXED() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define RprQueryFilterFlags_ONLY_KINEMATIC 10
     * }
     */
    public static int RprQueryFilterFlags_ONLY_KINEMATIC() {
        return (int)10L;
    }
}


