// Generated by jextract

package rapier.sys;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class RprEffectiveCharacterMovement {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y")
        ).withName("translation"),
        Constants$root.C_BOOL$LAYOUT.withName("grounded"),
        MemoryLayout.paddingLayout(24)
    ).withName("RprEffectiveCharacterMovement");
    public static MemoryLayout $LAYOUT() {
        return RprEffectiveCharacterMovement.$struct$LAYOUT;
    }
    public static MemorySegment translation$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle grounded$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("grounded"));
    public static VarHandle grounded$VH() {
        return RprEffectiveCharacterMovement.grounded$VH;
    }
    public static boolean grounded$get(MemorySegment seg) {
        return (boolean)RprEffectiveCharacterMovement.grounded$VH.get(seg);
    }
    public static void grounded$set( MemorySegment seg, boolean x) {
        RprEffectiveCharacterMovement.grounded$VH.set(seg, x);
    }
    public static boolean grounded$get(MemorySegment seg, long index) {
        return (boolean)RprEffectiveCharacterMovement.grounded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grounded$set(MemorySegment seg, long index, boolean x) {
        RprEffectiveCharacterMovement.grounded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


